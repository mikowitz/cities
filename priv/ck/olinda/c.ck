[
  [20800.0, 0.0, 0.0],
  [24800.0, 0.0, 0.037037037037037035],
  [42800.0, 0.037037037037037035, 0.26666666666666666],
  [18700.0, 0.26666666666666666, 0.1111111111111111],
  [4100.0, 0.1111111111111111, 0.24242424242424243],
  [40000.0, 0.24242424242424243, 0.26666666666666666],
  [4800.0, 0.26666666666666666, 0.26666666666666666],
  [4200.0, 0.26666666666666666, 0.14285714285714285],
  [2500.0, 0.14285714285714285, 0.08333333333333333],
  [9400.0, 0.08333333333333333, 0.125],
  [2900.0, 0.125, 0.08333333333333333],
  [4600.0, 0.08333333333333333, 0.08333333333333333],
  [10300.0, 0.08333333333333333, 0.2222222222222222],
  [14800.0, 0.2222222222222222, 0.08333333333333333],
  [7400.0, 0.08333333333333333, 0.037037037037037035],
  [7100.0, 0.037037037037037035, 0.08333333333333333],
  [1000.0, 0.08333333333333333, 0.03333333333333333],
  [3400.0, 0.03333333333333333, 0.13333333333333333],
  [200.0, 0.13333333333333333, 0.3333333333333333],
  [2200.0, 0.3333333333333333, 0.047619047619047616],
  [9000.0, 0.047619047619047616, 0.19047619047619047],
  [1000.0, 0.19047619047619047, 0.26666666666666666],
  [14100.0, 0.26666666666666666, 0.25],
  [11300.0, 0.25, 0.05555555555555555],
  [15500.0, 0.05555555555555555, 0.08333333333333333],
  [92200.0, 0.08333333333333333, 0.26666666666666666],
  [20100.0, 0.26666666666666666, 0.08333333333333333],
  [12100.0, 0.08333333333333333, 0.26666666666666666],
  [14700.0, 0.26666666666666666, 0.16666666666666666],
  [21100.0, 0.16666666666666666, 0.16666666666666666],
  [8500.0, 0.16666666666666666, 0.08333333333333333],
  [6100.0, 0.08333333333333333, 0.26666666666666666],
  [51600.0, 0.26666666666666666, 0.2380952380952381],
  [2200.0, 0.2380952380952381, 0.05555555555555555],
  [20300.0, 0.05555555555555555, 0.2222222222222222],
  [19800.0, 0.2222222222222222, 0.19047619047619047],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.78 => p.pan;
300.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
