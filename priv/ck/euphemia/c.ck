[
  [1500.0, 0.0, 0.0],
  [18800.0, 0.0, 0.13333333333333333],
  [1700.0, 0.13333333333333333, 0.26666666666666666],
  [9900.0, 0.26666666666666666, 0.08333333333333333],
  [14500.0, 0.08333333333333333, 0.14814814814814814],
  [13900.0, 0.14814814814814814, 0.2916666666666667],
  [7600.0, 0.2916666666666667, 0.06666666666666667],
  [16900.0, 0.06666666666666667, 0.05555555555555555],
  [9300.0, 0.05555555555555555, 0.2222222222222222],
  [10100.0, 0.2222222222222222, 0.047619047619047616],
  [13200.0, 0.047619047619047616, 0.19999999999999998],
  [41900.0, 0.19999999999999998, 0.041666666666666664],
  [5000.0, 0.041666666666666664, 0.06666666666666667],
  [7500.0, 0.06666666666666667, 0.08333333333333333],
  [6100.0, 0.08333333333333333, 0.125],
  [1800.0, 0.125, 0.26666666666666666],
  [29300.0, 0.26666666666666666, 0.06666666666666667],
  [23200.0, 0.06666666666666667, 0.07407407407407407],
  [19500.0, 0.07407407407407407, 0.19999999999999998],
  [6200.0, 0.19999999999999998, 0.1851851851851852],
  [3200.0, 0.1851851851851852, 0.2222222222222222],
  [12200.0, 0.2222222222222222, 0.08333333333333333],
  [19100.0, 0.08333333333333333, 0.14285714285714285],
  [8700.0, 0.14285714285714285, 0.19999999999999998],
  [5200.0, 0.19999999999999998, 0.2222222222222222],
  [3500.0, 0.2222222222222222, 0.047619047619047616],
  [8900.0, 0.047619047619047616, 0.25],
  [13600.0, 0.25, 0.25],
  [9400.0, 0.25, 0.09523809523809523],
  [13600.0, 0.09523809523809523, 0.25],
  [28800.0, 0.25, 0.09523809523809523],
  [10300.0, 0.09523809523809523, 0.05555555555555555],
  [25700.0, 0.05555555555555555, 0.14285714285714285],
  [38300.0, 0.14285714285714285, 0.16666666666666666],
  [13800.0, 0.16666666666666666, 0.08333333333333333],
  [6600.0, 0.08333333333333333, 0.2916666666666667],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.78 => p.pan;
300.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
