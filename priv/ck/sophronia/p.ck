[
  [3400.0, 0.0, 0.0],
  [6700.0, 0.0, 0.16666666666666666],
  [24200.0, 0.16666666666666666, 0.5],
  [2000.0, 0.5, 0.5],
  [11000.0, 0.5, 0.4],
  [7400.0, 0.4, 0.16666666666666666],
  [26100.0, 0.16666666666666666, 0.125],
  [4900.0, 0.125, 0.5],
  [2300.0, 0.5, 0.5],
  [35200.0, 0.5, 0.25],
  [22800.0, 0.25, 0.07142857142857142],
  [9300.0, 0.07142857142857142, 0.05555555555555555],
  [6600.0, 0.05555555555555555, 0.2222222222222222],
  [12700.0, 0.2222222222222222, 0.08333333333333333],
  [14500.0, 0.08333333333333333, 0.16666666666666666],
  [34000.0, 0.16666666666666666, 0.23076923076923078],
  [11700.0, 0.23076923076923078, 0.05555555555555555],
  [17400.0, 0.05555555555555555, 0.08333333333333333],
  [9800.0, 0.08333333333333333, 0.05555555555555555],
  [36000.0, 0.05555555555555555, 0.25],
  [22300.0, 0.25, 0.2692307692307692],
  [45700.0, 0.2692307692307692, 0.2222222222222222],
  [8800.0, 0.2222222222222222, 0.25],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
0.19 => p.pan;
1600.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
