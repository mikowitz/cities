[
  [500.0, 0.0, 0.0],
  [32900.0, 0.0, 0.025974025974025972],
  [13700.0, 0.025974025974025972, 0.0303030303030303],
  [38100.0, 0.0303030303030303, 0.02727272727272727],
  [35100.0, 0.02727272727272727, 0.006493506493506493],
  [6900.0, 0.006493506493506493, 0.03246753246753247],
  [45800.0, 0.03246753246753247, 0.012987012987012986],
  [9700.0, 0.012987012987012986, 0.009090909090909092],
  [7300.0, 0.009090909090909092, 0.03409090909090909],
  [2100.0, 0.03409090909090909, 0.03896103896103896],
  [4300.0, 0.03896103896103896, 0.03409090909090909],
  [1400.0, 0.03409090909090909, 0.02727272727272727],
  [21600.0, 0.02727272727272727, 0.012987012987012986],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
0.63 => p.pan;
2200.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
