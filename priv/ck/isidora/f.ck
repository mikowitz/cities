[
  [19100.0, 0.0, 0.0],
  [4600.0, 0.0, 0.06666666666666667],
  [3300.0, 0.06666666666666667, 0.1111111111111111],
  [40800.0, 0.1111111111111111, 0.047619047619047616],
  [12600.0, 0.047619047619047616, 0.19047619047619047],
  [25800.0, 0.19047619047619047, 0.037037037037037035],
  [24000.0, 0.037037037037037035, 0.16666666666666666],
  [18400.0, 0.16666666666666666, 0.3333333333333333],
  [5500.0, 0.3333333333333333, 0.2222222222222222],
  [8200.0, 0.2222222222222222, 0.3333333333333333],
  [200.0, 0.3333333333333333, 0.09999999999999999],
  [5900.0, 0.09999999999999999, 0.13333333333333333],
  [68700.0, 0.13333333333333333, 0.3333333333333333],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.56 => p.pan;
600.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
