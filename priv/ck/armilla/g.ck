[
  [65700.0, 0.0, 0.0],
  [9300.0, 0.0, 0.125],
  [62900.0, 0.125, 0.14285714285714285],
  [33400.0, 0.14285714285714285, 0.04081632653061224],
  [2200.0, 0.04081632653061224, 0.08163265306122448],
  [4600.0, 0.08163265306122448, 0.14285714285714285],
  [20800.0, 0.14285714285714285, 0.09523809523809523],
  [86900.0, 0.09523809523809523, 0.03571428571428571],
  [4900.0, 0.03571428571428571, 0.14285714285714285],
  [8300.0, 0.14285714285714285, 0.14285714285714285],
  [4800.0, 0.14285714285714285, 0.02040816326530612],
  [6700.0, 0.02040816326530612, 0.14285714285714285],
  [16800.0, 0.14285714285714285, 0.14285714285714285],
  [11200.0, 0.14285714285714285, 0.14285714285714285],
  [21000.0, 0.14285714285714285, 0.14285714285714285],
  [4900.0, 0.14285714285714285, 0.14285714285714285],
  [6300.0, 0.14285714285714285, 0.14285714285714285],
  [6900.0, 0.14285714285714285, 0.14285714285714285],
  [4600.0, 0.14285714285714285, 0.14285714285714285],
  [23000.0, 0.14285714285714285, 0.14285714285714285],
  [6000.0, 0.14285714285714285, 0.14285714285714285],
  [17400.0, 0.14285714285714285, 0.02040816326530612],
  [53800.0, 0.02040816326530612, 0.10204081632653061],
  [1800.0, 0.10204081632653061, 0.14285714285714285],
  [3500.0, 0.14285714285714285, 0.14285714285714285],
  [45100.0, 0.14285714285714285, 0.07792207792207792],
  [6900.0, 0.07792207792207792, 0.028571428571428574],
  [22200.0, 0.028571428571428574, 0.14285714285714285],
  [19900.0, 0.14285714285714285, 0.11904761904761905],
  [39000.0, 0.11904761904761905, 0.14285714285714285],
  [6900.0, 0.14285714285714285, 0.14285714285714285],
  [2200.0, 0.14285714285714285, 0.08163265306122448],
  [600.0, 0.08163265306122448, 0.14285714285714285],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.48 => p.pan;
700.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
