[
  [96500.0, 0.0, 0.0],
  [6500.0, 0.0, 0.051948051948051945],
  [10000.0, 0.051948051948051945, 0.03896103896103896],
  [21000.0, 0.03896103896103896, 0.07575757575757576],
  [9800.0, 0.07575757575757576, 0.07792207792207792],
  [86500.0, 0.07792207792207792, 0.03409090909090909],
  [41900.0, 0.03409090909090909, 0.04132231404958678],
  [54200.0, 0.04132231404958678, 0.012987012987012986],
  [145300.0, 0.012987012987012986, 0.06818181818181818],
  [7400.0, 0.06818181818181818, 0.051948051948051945],
  [21500.0, 0.051948051948051945, 0.045454545454545456],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
0.63 => p.pan;
2200.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
