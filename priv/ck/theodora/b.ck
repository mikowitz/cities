[
  [64000.0, 0.0, 0.0],
  [45500.0, 0.0, 0.22727272727272727],
  [25500.0, 0.22727272727272727, 0.1],
  [8700.0, 0.1, 0.25],
  [7900.0, 0.25, 0.4166666666666667],
  [8600.0, 0.4166666666666667, 0.5],
  [52700.0, 0.5, 0.25],
  [81900.0, 0.25, 0.16666666666666666],
  [15400.0, 0.16666666666666666, 0.1],
  [105000.0, 0.1, 0.4166666666666667],
  [27600.0, 0.4166666666666667, 0.08333333333333333],
  [32100.0, 0.08333333333333333, 0.2692307692307692],
  [5700.0, 0.2692307692307692, 0.3333333333333333],
  [7400.0, 0.3333333333333333, 0.125],
  [14900.0, 0.125, 0.21428571428571427],
  [18400.0, 0.21428571428571427, 0.08333333333333333],
  [3200.0, 0.08333333333333333, 0.22727272727272727],
  [53400.0, 0.22727272727272727, 0.0625],
  [2500.0, 0.0625, 0.125],
  [19000.0, 0.125, 0.25],
  [8900.0, 0.25, 0.125],
  [3200.0, 0.125, 0.1875],
  [9300.0, 0.1875, 0.05555555555555555],
  [29100.0, 0.05555555555555555, 0.35],
  [32300.0, 0.35, 0.07142857142857142],
  [18400.0, 0.07142857142857142, 0.05555555555555555],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.85 => p.pan;
200.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
