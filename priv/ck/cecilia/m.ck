[
  [4700.0, 0.0, 0.0],
  [3800.0, 0.0, 0.038461538461538464],
  [60800.0, 0.038461538461538464, 0.038461538461538464],
  [29200.0, 0.038461538461538464, 0.05128205128205128],
  [19500.0, 0.05128205128205128, 0.02564102564102564],
  [6600.0, 0.02564102564102564, 0.02564102564102564],
  [7200.0, 0.02564102564102564, 0.038461538461538464],
  [2400.0, 0.038461538461538464, 0.038461538461538464],
  [9100.0, 0.038461538461538464, 0.057692307692307696],
  [3700.0, 0.057692307692307696, 0.02564102564102564],
  [30700.0, 0.02564102564102564, 0.042735042735042736],
  [2000.0, 0.042735042735042736, 0.038461538461538464],
  [5300.0, 0.038461538461538464, 0.02564102564102564],
  [7500.0, 0.02564102564102564, 0.07692307692307693],
  [1700.0, 0.07692307692307693, 0.057692307692307696],
  [1800.0, 0.057692307692307696, 0.02564102564102564],
  [800.0, 0.02564102564102564, 0.05982905982905983],
  [27000.0, 0.05982905982905983, 0.038461538461538464],
  [1100.0, 0.038461538461538464, 0.07692307692307693],
  [2400.0, 0.07692307692307693, 0.038461538461538464],
  [11100.0, 0.038461538461538464, 0.04615384615384615],
  [2000.0, 0.04615384615384615, 0.07692307692307693],
  [21400.0, 0.07692307692307693, 0.01282051282051282],
  [1900.0, 0.01282051282051282, 0.057692307692307696],
  [19000.0, 0.057692307692307696, 0.038461538461538464],
  [39800.0, 0.038461538461538464, 0.07692307692307693],
  [32900.0, 0.07692307692307693, 0.07692307692307693],
  [14900.0, 0.07692307692307693, 0.07692307692307693],
  [3500.0, 0.07692307692307693, 0.06153846153846154],
  [4800.0, 0.06153846153846154, 0.010989010989010988],
  [11000.0, 0.010989010989010988, 0.038461538461538464],
  [700.0, 0.038461538461538464, 0.06153846153846154],
  [13900.0, 0.06153846153846154, 0.019230769230769232],
  [1500.0, 0.019230769230769232, 0.019230769230769232],
  [20500.0, 0.019230769230769232, 0.019230769230769232],
  [17200.0, 0.019230769230769232, 0.03076923076923077],
  [2700.0, 0.03076923076923077, 0.02564102564102564],
  [400.0, 0.02564102564102564, 0.017094017094017092],
  [9500.0, 0.017094017094017092, 0.02564102564102564],
  [30600.0, 0.02564102564102564, 0.038461538461538464],
  [23500.0, 0.038461538461538464, 0.038461538461538464],
  [13500.0, 0.038461538461538464, 0.07692307692307693],
  [2700.0, 0.07692307692307693, 0.057692307692307696],
  [8900.0, 0.057692307692307696, 0.057692307692307696],
  [56700.0, 0.057692307692307696, 0.015384615384615385],
  [500.0, 0.015384615384615385, 0.028846153846153848],
  [27900.0, 0.028846153846153848, 0.04807692307692308],
  [24900.0, 0.04807692307692308, 0.010989010989010988],
  [13300.0, 0.010989010989010988, 0.07692307692307693],
  [22700.0, 0.07692307692307693, 0.010989010989010988],
  [2700.0, 0.010989010989010988, 0.057692307692307696],
  [5000.0, 0.057692307692307696, 0.019230769230769232],
  [4200.0, 0.019230769230769232, 0.01282051282051282],
  [17200.0, 0.01282051282051282, 0.038461538461538464],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.04 => p.pan;
1300.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
