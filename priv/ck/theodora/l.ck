[
  [60200.0, 0.0, 0.0],
  [11100.0, 0.0, 0.3333333333333333],
  [28300.0, 0.3333333333333333, 0.09523809523809523],
  [200.0, 0.09523809523809523, 0.09523809523809523],
  [2000.0, 0.09523809523809523, 0.14285714285714285],
  [3200.0, 0.14285714285714285, 0.13333333333333333],
  [1800.0, 0.13333333333333333, 0.125],
  [3000.0, 0.125, 0.2916666666666667],
  [13100.0, 0.2916666666666667, 0.13333333333333333],
  [21100.0, 0.13333333333333333, 0.08333333333333333],
  [25500.0, 0.08333333333333333, 0.3055555555555555],
  [9100.0, 0.3055555555555555, 0.2222222222222222],
  [7900.0, 0.2222222222222222, 0.1111111111111111],
  [5500.0, 0.1111111111111111, 0.2777777777777778],
  [12300.0, 0.2777777777777778, 0.14814814814814814],
  [200.0, 0.14814814814814814, 0.26666666666666666],
  [15700.0, 0.26666666666666666, 0.3333333333333333],
  [18900.0, 0.3333333333333333, 0.08333333333333333],
  [4300.0, 0.08333333333333333, 0.3333333333333333],
  [3800.0, 0.3333333333333333, 0.26666666666666666],
  [3300.0, 0.26666666666666666, 0.08333333333333333],
  [29200.0, 0.08333333333333333, 0.08333333333333333],
  [28200.0, 0.08333333333333333, 0.2777777777777778],
  [2600.0, 0.2777777777777778, 0.1388888888888889],
  [9300.0, 0.1388888888888889, 0.3055555555555555],
  [200.0, 0.3055555555555555, 0.2222222222222222],
  [18500.0, 0.2222222222222222, 0.3333333333333333],
  [12700.0, 0.3333333333333333, 0.21212121212121213],
  [18200.0, 0.21212121212121213, 0.08333333333333333],
  [16400.0, 0.08333333333333333, 0.2962962962962963],
  [17300.0, 0.2962962962962963, 0.037037037037037035],
  [4200.0, 0.037037037037037035, 0.3333333333333333],
  [7700.0, 0.3333333333333333, 0.1111111111111111],
  [11000.0, 0.1111111111111111, 0.3333333333333333],
  [1300.0, 0.3333333333333333, 0.08333333333333333],
  [4900.0, 0.08333333333333333, 0.13333333333333333],
  [7800.0, 0.13333333333333333, 0.08333333333333333],
  [200.0, 0.08333333333333333, 0.2380952380952381],
  [2900.0, 0.2380952380952381, 0.2857142857142857],
  [8500.0, 0.2857142857142857, 0.20512820512820515],
  [6400.0, 0.20512820512820515, 0.26666666666666666],
  [5300.0, 0.26666666666666666, 0.2857142857142857],
  [14700.0, 0.2857142857142857, 0.05555555555555555],
  [200.0, 0.05555555555555555, 0.2777777777777778],
  [8700.0, 0.2777777777777778, 0.3333333333333333],
  [5100.0, 0.3333333333333333, 0.047619047619047616],
  [6900.0, 0.047619047619047616, 0.26666666666666666],
  [1900.0, 0.26666666666666666, 0.19047619047619047],
  [5500.0, 0.19047619047619047, 0.14285714285714285],
  [4500.0, 0.14285714285714285, 0.041666666666666664],
  [14100.0, 0.041666666666666664, 0.06666666666666667],
  [28400.0, 0.06666666666666667, 0.125],
  [4500.0, 0.125, 0.041666666666666664],
  [3200.0, 0.041666666666666664, 0.1111111111111111],
  [10100.0, 0.1111111111111111, 0.08333333333333333],
  [30700.0, 0.08333333333333333, 0.1111111111111111],
  [5400.0, 0.1111111111111111, 0.06666666666666667],
  [14700.0, 0.06666666666666667, 0.041666666666666664],
  [4900.0, 0.041666666666666664, 0.3],
  [8000.0, 0.3, 0.047619047619047616],
  [12900.0, 0.047619047619047616, 0.2916666666666667],
  [36200.0, 0.2916666666666667, 0.08333333333333333],
  [16700.0, 0.08333333333333333, 0.1851851851851852],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.11 => p.pan;
1200.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
