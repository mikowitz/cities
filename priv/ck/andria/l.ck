[
  [6000.0, 0.0, 0.0],
  [3700.0, 0.0, 0.26666666666666666],
  [200.0, 0.26666666666666666, 0.25],
  [7800.0, 0.25, 0.2916666666666667],
  [200.0, 0.2916666666666667, 0.14285714285714285],
  [1300.0, 0.14285714285714285, 0.19047619047619047],
  [8800.0, 0.19047619047619047, 0.09523809523809523],
  [5300.0, 0.09523809523809523, 0.14814814814814814],
  [5400.0, 0.14814814814814814, 0.1111111111111111],
  [10300.0, 0.1111111111111111, 0.08333333333333333],
  [200.0, 0.08333333333333333, 0.16666666666666666],
  [11100.0, 0.16666666666666666, 0.19047619047619047],
  [9700.0, 0.19047619047619047, 0.041666666666666664],
  [14800.0, 0.041666666666666664, 0.07407407407407407],
  [6700.0, 0.07407407407407407, 0.125],
  [54000.0, 0.125, 0.1851851851851852],
  [14900.0, 0.1851851851851852, 0.19047619047619047],
  [8000.0, 0.19047619047619047, 0.3076923076923077],
  [1600.0, 0.3076923076923077, 0.08333333333333333],
  [1200.0, 0.08333333333333333, 0.13333333333333333],
  [600.0, 0.13333333333333333, 0.16666666666666666],
  [400.0, 0.16666666666666666, 0.2777777777777778],
  [6600.0, 0.2777777777777778, 0.08333333333333333],
  [2100.0, 0.08333333333333333, 0.1111111111111111],
  [13800.0, 0.1111111111111111, 0.3333333333333333],
  [51000.0, 0.3333333333333333, 0.25641025641025644],
  [2500.0, 0.25641025641025644, 0.3333333333333333],
  [4000.0, 0.3333333333333333, 0.1111111111111111],
  [200.0, 0.1111111111111111, 0.25],
  [7200.0, 0.25, 0.3333333333333333],
  [5000.0, 0.3333333333333333, 0.19047619047619047],
  [17300.0, 0.19047619047619047, 0.2333333333333333],
  [1600.0, 0.2333333333333333, 0.2333333333333333],
  [8700.0, 0.2333333333333333, 0.07407407407407407],
  [23400.0, 0.07407407407407407, 0.07407407407407407],
  [16300.0, 0.07407407407407407, 0.25],
  [5500.0, 0.25, 0.2333333333333333],
  [23100.0, 0.2333333333333333, 0.05555555555555555],
  [12300.0, 0.05555555555555555, 0.1111111111111111],
  [23100.0, 0.1111111111111111, 0.2916666666666667],
  [6400.0, 0.2916666666666667, 0.13333333333333333],
  [2000.0, 0.13333333333333333, 0.3333333333333333],
  [5400.0, 0.3333333333333333, 0.2857142857142857],
  [6500.0, 0.2857142857142857, 0.1851851851851852],
  [3500.0, 0.1851851851851852, 0.037037037037037035],
  [4700.0, 0.037037037037037035, 0.14814814814814814],
  [1400.0, 0.14814814814814814, 0.08333333333333333],
  [28800.0, 0.08333333333333333, 0.1111111111111111],
  [4100.0, 0.1111111111111111, 0.2222222222222222],
  [20900.0, 0.2222222222222222, 0.13333333333333333],
  [18700.0, 0.13333333333333333, 0.3333333333333333],
  [16100.0, 0.3333333333333333, 0.2962962962962963],
  [2600.0, 0.2962962962962963, 0.20833333333333334],
  [18700.0, 0.20833333333333334, 0.2380952380952381],
  [12800.0, 0.2380952380952381, 0.13333333333333333],
  [8000.0, 0.13333333333333333, 0.09999999999999999],
  [18500.0, 0.09999999999999999, 0.14814814814814814],
  [6800.0, 0.14814814814814814, 0.19999999999999998],
  [200.0, 0.19999999999999998, 0.16666666666666666],
  [7400.0, 0.16666666666666666, 0.2222222222222222],
  [8200.0, 0.2222222222222222, 0.2777777777777778],
  [2800.0, 0.2777777777777778, 0.3333333333333333],
  [6100.0, 0.3333333333333333, 0.19999999999999998],
  [63300.0, 0.19999999999999998, 0.19047619047619047],
  [25600.0, 0.19047619047619047, 0.07142857142857142],
  [18600.0, 0.07142857142857142, 0.13333333333333333],
  [1200.0, 0.13333333333333333, 0.1111111111111111],
  [12000.0, 0.1111111111111111, 0.2222222222222222],
  [8600.0, 0.2222222222222222, 0.2333333333333333],
  [200.0, 0.2333333333333333, 0.2222222222222222],
  [2600.0, 0.2222222222222222, 0.3333333333333333],
  [700.0, 0.3333333333333333, 0.2222222222222222],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.11 => p.pan;
1200.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
