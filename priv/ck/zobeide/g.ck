[
  [12300.0, 0.0, 0.0],
  [69800.0, 0.0, 0.07142857142857142],
  [2800.0, 0.07142857142857142, 0.14285714285714285],
  [4400.0, 0.14285714285714285, 0.08571428571428572],
  [17400.0, 0.08571428571428572, 0.12244897959183673],
  [16100.0, 0.12244897959183673, 0.14285714285714285],
  [67000.0, 0.14285714285714285, 0.14285714285714285],
  [27900.0, 0.14285714285714285, 0.14285714285714285],
  [10600.0, 0.14285714285714285, 0.047619047619047616],
  [21000.0, 0.047619047619047616, 0.10714285714285714],
  [18300.0, 0.10714285714285714, 0.05714285714285715],
  [10800.0, 0.05714285714285715, 0.14285714285714285],
  [13000.0, 0.14285714285714285, 0.08571428571428572],
  [43600.0, 0.08571428571428572, 0.05714285714285715],
  [3200.0, 0.05714285714285715, 0.14285714285714285],
  [16200.0, 0.14285714285714285, 0.06349206349206349],
  [18700.0, 0.06349206349206349, 0.14285714285714285],
  [6100.0, 0.14285714285714285, 0.07142857142857142],
  [13300.0, 0.07142857142857142, 0.14285714285714285],
  [76800.0, 0.14285714285714285, 0.10204081632653061],
  [6800.0, 0.10204081632653061, 0.07142857142857142],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.48 => p.pan;
700.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
