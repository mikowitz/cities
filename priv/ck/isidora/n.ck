[
  [800.0, 0.0, 0.0],
  [1500.0, 0.0, 0.14285714285714285],
  [3800.0, 0.14285714285714285, 0.14285714285714285],
  [11400.0, 0.14285714285714285, 0.10714285714285714],
  [10600.0, 0.10714285714285714, 0.12244897959183673],
  [15600.0, 0.12244897959183673, 0.061224489795918366],
  [9600.0, 0.061224489795918366, 0.11111111111111112],
  [17700.0, 0.11111111111111112, 0.031746031746031744],
  [3100.0, 0.031746031746031744, 0.09523809523809523],
  [9300.0, 0.09523809523809523, 0.12244897959183673],
  [5600.0, 0.12244897959183673, 0.11111111111111112],
  [2500.0, 0.11111111111111112, 0.1285714285714286],
  [2200.0, 0.1285714285714286, 0.14285714285714285],
  [2100.0, 0.14285714285714285, 0.14285714285714285],
  [1800.0, 0.14285714285714285, 0.028571428571428574],
  [12500.0, 0.028571428571428574, 0.08571428571428572],
  [3500.0, 0.08571428571428572, 0.07142857142857142],
  [5300.0, 0.07142857142857142, 0.07142857142857142],
  [8100.0, 0.07142857142857142, 0.1142857142857143],
  [1800.0, 0.1142857142857143, 0.07142857142857142],
  [5400.0, 0.07142857142857142, 0.125],
  [2400.0, 0.125, 0.09523809523809523],
  [23800.0, 0.09523809523809523, 0.14285714285714285],
  [3600.0, 0.14285714285714285, 0.09523809523809523],
  [6600.0, 0.09523809523809523, 0.1142857142857143],
  [2200.0, 0.1142857142857143, 0.047619047619047616],
  [4600.0, 0.047619047619047616, 0.11111111111111112],
  [1900.0, 0.11111111111111112, 0.1142857142857143],
  [10300.0, 0.1142857142857143, 0.14285714285714285],
  [4700.0, 0.14285714285714285, 0.14285714285714285],
  [13600.0, 0.14285714285714285, 0.14285714285714285],
  [2500.0, 0.14285714285714285, 0.14285714285714285],
  [4500.0, 0.14285714285714285, 0.09523809523809523],
  [6500.0, 0.09523809523809523, 0.1142857142857143],
  [15700.0, 0.1142857142857143, 0.14285714285714285],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
0.04 => p.pan;
1400.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
