[
  [80500.0, 0.0, 0.0],
  [1500.0, 0.0, 0.045454545454545456],
  [5200.0, 0.045454545454545456, 0.18181818181818182],
  [3100.0, 0.18181818181818182, 0.25],
  [16200.0, 0.25, 0.14285714285714285],
  [31200.0, 0.14285714285714285, 0.375],
  [4200.0, 0.375, 0.14285714285714285],
  [23300.0, 0.14285714285714285, 0.25],
  [300.0, 0.25, 0.21428571428571427],
  [7400.0, 0.21428571428571427, 0.2857142857142857],
  [12800.0, 0.2857142857142857, 0.2777777777777778],
  [500.0, 0.2777777777777778, 0.08333333333333333],
  [62400.0, 0.08333333333333333, 0.3333333333333333],
  [7500.0, 0.3333333333333333, 0.14285714285714285],
  [22800.0, 0.14285714285714285, 0.05],
  [500.0, 0.05, 0.08333333333333333],
  [22900.0, 0.08333333333333333, 0.3333333333333333],
  [10700.0, 0.3333333333333333, 0.07142857142857142],
  [7200.0, 0.07142857142857142, 0.4],
  [5300.0, 0.4, 0.08333333333333333],
  [11500.0, 0.08333333333333333, 0.2],
  [400.0, 0.2, 0.13636363636363635],
  [7100.0, 0.13636363636363635, 0.22727272727272727],
  [64300.0, 0.22727272727272727, 0.1111111111111111],
  [11200.0, 0.1111111111111111, 0.2857142857142857],
  [39200.0, 0.2857142857142857, 0.2857142857142857],
  [7800.0, 0.2857142857142857, 0.2],
  [25400.0, 0.2, 0.14285714285714285],
  [78400.0, 0.14285714285714285, 0.0625],
  [8600.0, 0.0625, 0.08333333333333333],
  [9200.0, 0.08333333333333333, 0.21428571428571427],
  [35500.0, 0.21428571428571427, 0.14285714285714285],
  [3200.0, 0.14285714285714285, 0.375],
  [5700.0, 0.375, 0.2857142857142857],
  [6500.0, 0.2857142857142857, 0.1875],
  [1200.0, 0.1875, 0.3],
  [700.0, 0.3, 0.4],
  [6700.0, 0.4, 0.0625],
  [4200.0, 0.0625, 0.3125],
  [21000.0, 0.3125, 0.125],
  [18900.0, 0.125, 0.2857142857142857],
  [8400.0, 0.2857142857142857, 0.05],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
0.19 => p.pan;
1600.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
