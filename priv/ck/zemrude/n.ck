[
  [27700.0, 0.0, 0.0],
  [3500.0, 0.0, 0.12698412698412698],
  [5100.0, 0.12698412698412698, 0.03571428571428571],
  [7300.0, 0.03571428571428571, 0.11904761904761905],
  [6100.0, 0.11904761904761905, 0.07142857142857142],
  [5200.0, 0.07142857142857142, 0.07142857142857142],
  [4900.0, 0.07142857142857142, 0.125],
  [2100.0, 0.125, 0.125],
  [2200.0, 0.125, 0.06349206349206349],
  [4500.0, 0.06349206349206349, 0.12698412698412698],
  [2000.0, 0.12698412698412698, 0.1142857142857143],
  [2200.0, 0.1142857142857143, 0.061224489795918366],
  [6700.0, 0.061224489795918366, 0.12244897959183673],
  [4800.0, 0.12244897959183673, 0.028571428571428574],
  [6800.0, 0.028571428571428574, 0.07142857142857142],
  [7500.0, 0.07142857142857142, 0.08571428571428572],
  [4300.0, 0.08571428571428572, 0.14285714285714285],
  [1800.0, 0.14285714285714285, 0.11904761904761905],
  [7000.0, 0.11904761904761905, 0.14285714285714285],
  [12400.0, 0.14285714285714285, 0.061224489795918366],
  [700.0, 0.061224489795918366, 0.07142857142857142],
  [3500.0, 0.07142857142857142, 0.09523809523809523],
  [11100.0, 0.09523809523809523, 0.09523809523809523],
  [29300.0, 0.09523809523809523, 0.14285714285714285],
  [1800.0, 0.14285714285714285, 0.10714285714285714],
  [8700.0, 0.10714285714285714, 0.07142857142857142],
  [11800.0, 0.07142857142857142, 0.12698412698412698],
  [2000.0, 0.12698412698412698, 0.09523809523809523],
  [1800.0, 0.09523809523809523, 0.061224489795918366],
  [3200.0, 0.061224489795918366, 0.12244897959183673],
  [3300.0, 0.12244897959183673, 0.14285714285714285],
  [1600.0, 0.14285714285714285, 0.08163265306122448],
  [10400.0, 0.08163265306122448, 0.12244897959183673],
  [11700.0, 0.12244897959183673, 0.031746031746031744],
  [1300.0, 0.031746031746031744, 0.125],
  [8600.0, 0.125, 0.09523809523809523],
  [3300.0, 0.09523809523809523, 0.14285714285714285],
  [4900.0, 0.14285714285714285, 0.1142857142857143],
  [1200.0, 0.1142857142857143, 0.14285714285714285],
  [4700.0, 0.14285714285714285, 0.1142857142857143],
  [2800.0, 0.1142857142857143, 0.07142857142857142],
  [1600.0, 0.07142857142857142, 0.09523809523809523],
  [700.0, 0.09523809523809523, 0.14285714285714285],
  [1100.0, 0.14285714285714285, 0.07142857142857142],
  [10200.0, 0.07142857142857142, 0.07142857142857142],
  [6200.0, 0.07142857142857142, 0.11904761904761905],
  [13400.0, 0.11904761904761905, 0.047619047619047616],
  [1900.0, 0.047619047619047616, 0.09523809523809523],
  [2000.0, 0.09523809523809523, 0.05357142857142857],
  [3300.0, 0.05357142857142857, 0.10714285714285714],
  [13900.0, 0.10714285714285714, 0.12244897959183673],
  [4200.0, 0.12244897959183673, 0.047619047619047616],
  [2200.0, 0.047619047619047616, 0.12244897959183673],
  [6600.0, 0.12244897959183673, 0.07142857142857142],
  [2500.0, 0.07142857142857142, 0.05194805194805195],
  [3000.0, 0.05194805194805195, 0.12987012987012986],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
0.04 => p.pan;
1400.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
