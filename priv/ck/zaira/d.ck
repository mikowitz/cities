[
  [8300.0, 0.0, 0.0],
  [7800.0, 0.0, 0.5],
  [15700.0, 0.5, 0.0625],
  [22200.0, 0.0625, 0.5],
  [1200.0, 0.5, 0.5],
  [5200.0, 0.5, 0.08333333333333333],
  [4100.0, 0.08333333333333333, 0.35714285714285715],
  [3300.0, 0.35714285714285715, 0.5],
  [12400.0, 0.5, 0.5],
  [5000.0, 0.5, 0.42857142857142855],
  [13900.0, 0.42857142857142855, 0.5],
  [26700.0, 0.5, 0.125],
  [13600.0, 0.125, 0.5],
  [1200.0, 0.5, 0.5],
  [9100.0, 0.5, 0.0625],
  [2800.0, 0.0625, 0.5],
  [30200.0, 0.5, 0.5],
  [4900.0, 0.5, 0.5],
  [28400.0, 0.5, 0.0625],
  [3500.0, 0.0625, 0.5],
  [6900.0, 0.5, 0.1111111111111111],
  [3500.0, 0.1111111111111111, 0.5],
  [11200.0, 0.5, 0.125],
  [17500.0, 0.125, 0.5],
  [16600.0, 0.5, 0.3333333333333333],
  [200.0, 0.3333333333333333, 0.1875],
  [3700.0, 0.1875, 0.25],
  [1600.0, 0.25, 0.5],
  [2900.0, 0.5, 0.5],
  [3800.0, 0.5, 0.5],
  [19500.0, 0.5, 0.0625],
  [3700.0, 0.0625, 0.5],
  [2500.0, 0.5, 0.5],
  [2000.0, 0.5, 0.5],
  [1900.0, 0.5, 0.125],
  [4800.0, 0.125, 0.2857142857142857],
  [9900.0, 0.2857142857142857, 0.5],
  [1400.0, 0.5, 0.2222222222222222],
  [30300.0, 0.2222222222222222, 0.3888888888888889],
  [1100.0, 0.3888888888888889, 0.2777777777777778],
  [4200.0, 0.2777777777777778, 0.5],
  [200.0, 0.5, 0.2222222222222222],
  [8400.0, 0.2222222222222222, 0.2777777777777778],
  [22500.0, 0.2777777777777778, 0.125],
  [1700.0, 0.125, 0.5],
  [700.0, 0.5, 0.42857142857142855],
  [11600.0, 0.42857142857142855, 0.045454545454545456],
  [2500.0, 0.045454545454545456, 0.3],
  [13000.0, 0.3, 0.5],
  [18400.0, 0.5, 0.125],
  [23100.0, 0.125, 0.5],
  [20900.0, 0.5, 0.2857142857142857],
  [11500.0, 0.2857142857142857, 0.375],
  [11700.0, 0.375, 0.5],
  [6400.0, 0.5, 0.125],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.7 => p.pan;
400.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
