[
  [39100.0, 0.0, 0.0],
  [16500.0, 0.0, 0.5],
  [32600.0, 0.5, 0.5],
  [1900.0, 0.5, 0.5],
  [32100.0, 0.5, 0.125],
  [2300.0, 0.125, 0.375],
  [13700.0, 0.375, 0.5],
  [300.0, 0.5, 0.35714285714285715],
  [37400.0, 0.35714285714285715, 0.5],
  [18000.0, 0.5, 0.5],
  [8200.0, 0.5, 0.1],
  [2100.0, 0.1, 0.07142857142857142],
  [38100.0, 0.07142857142857142, 0.5],
  [200.0, 0.5, 0.5],
  [22900.0, 0.5, 0.125],
  [6100.0, 0.125, 0.5],
  [13500.0, 0.5, 0.5],
  [26500.0, 0.5, 0.5],
  [10100.0, 0.5, 0.5],
  [18900.0, 0.5, 0.5],
  [4000.0, 0.5, 0.3],
  [3100.0, 0.3, 0.4166666666666667],
  [23000.0, 0.4166666666666667, 0.3125],
  [9400.0, 0.3125, 0.5],
  [15900.0, 0.5, 0.15],
  [8500.0, 0.15, 0.5],
  [2800.0, 0.5, 0.5],
  [24500.0, 0.5, 0.5],
  [26700.0, 0.5, 0.5],
  [11400.0, 0.5, 0.5],
  [7800.0, 0.5, 0.08333333333333333],
  [24500.0, 0.08333333333333333, 0.5],
  [3000.0, 0.5, 0.17647058823529413],
  [9900.0, 0.17647058823529413, 0.38235294117647056],
  [9100.0, 0.38235294117647056, 0.5],
  [1300.0, 0.5, 0.5],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.7 => p.pan;
400.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
