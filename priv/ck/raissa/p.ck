[
  [9100.0, 0.0, 0.0],
  [300.0, 0.0, 0.3],
  [500.0, 0.3, 0.4],
  [500.0, 0.4, 0.08333333333333333],
  [42600.0, 0.08333333333333333, 0.3333333333333333],
  [11600.0, 0.3333333333333333, 0.1],
  [48200.0, 0.1, 0.2857142857142857],
  [39200.0, 0.2857142857142857, 0.1],
  [14500.0, 0.1, 0.3],
  [95100.0, 0.3, 0.4444444444444444],
  [7200.0, 0.4444444444444444, 0.3333333333333333],
  [1900.0, 0.3333333333333333, 0.1],
  [3400.0, 0.1, 0.07142857142857142],
  [300.0, 0.07142857142857142, 0.2857142857142857],
  [12100.0, 0.2857142857142857, 0.35714285714285715],
  [11600.0, 0.35714285714285715, 0.5],
  [15200.0, 0.5, 0.5],
  [9800.0, 0.5, 0.5],
  [3300.0, 0.5, 0.07142857142857142],
  [300.0, 0.07142857142857142, 0.3],
  [29400.0, 0.3, 0.4],
  [7000.0, 0.4, 0.07142857142857142],
  [29000.0, 0.07142857142857142, 0.2857142857142857],
  [1000.0, 0.2857142857142857, 0.5],
  [300.0, 0.5, 0.3],
  [5600.0, 0.3, 0.4],
  [300.0, 0.4, 0.21428571428571427],
  [27500.0, 0.21428571428571427, 0.2857142857142857],
  [300.0, 0.2857142857142857, 0.3],
  [9900.0, 0.3, 0.4],
  [4400.0, 0.4, 0.07142857142857142],
  [300.0, 0.07142857142857142, 0.3],
  [4100.0, 0.3, 0.4],
  [10100.0, 0.4, 0.07142857142857142],
  [17600.0, 0.07142857142857142, 0.125],
  [8500.0, 0.125, 0.125],
  [2400.0, 0.125, 0.045454545454545456],
  [62200.0, 0.045454545454545456, 0.36363636363636365],
  [9900.0, 0.36363636363636365, 0.08333333333333333],
  [1400.0, 0.08333333333333333, 0.3],
  [12400.0, 0.3, 0.0625],
  [300.0, 0.0625, 0.35714285714285715],
  [6600.0, 0.35714285714285715, 0.42857142857142855],
  [300.0, 0.42857142857142855, 0.3],
  [11400.0, 0.3, 0.4],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
0.19 => p.pan;
1600.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
