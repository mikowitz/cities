[
  [34200.0, 0.0, 0.0],
  [109800.0, 0.0, 0.012987012987012986],
  [44400.0, 0.012987012987012986, 0.09090909090909091],
  [26400.0, 0.09090909090909091, 0.06818181818181818],
  [19500.0, 0.06818181818181818, 0.06818181818181818],
  [115600.0, 0.06818181818181818, 0.05454545454545454],
  [147300.0, 0.05454545454545454, 0.045454545454545456],
  [182800.0, 0.045454545454545456, 0.06493506493506494],
  [54500.0, 0.06493506493506494, 0.0606060606060606],
  [58500.0, 0.0606060606060606, 0.022727272727272728],
  [28600.0, 0.022727272727272728, 0.09090909090909091],
  [25500.0, 0.09090909090909091, 0.06818181818181818],
  [42500.0, 0.06818181818181818, 0.012987012987012986],
  [10300.0, 0.012987012987012986, 0.06493506493506494],
  [29400.0, 0.06493506493506494, 0.0606060606060606],
  [67200.0, 0.0606060606060606, 0.06818181818181818],
  [43800.0, 0.06818181818181818, 0.06493506493506494],
  [75200.0, 0.06493506493506494, 0.018181818181818184],
  [6100.0, 0.018181818181818184, 0.0808080808080808],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.19 => p.pan;
1100.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
