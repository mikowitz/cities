[
  [0.0, 0.0, 0.0],
  [4200.0, 0.0, 0.08333333333333333],
  [47300.0, 0.08333333333333333, 0.13333333333333333],
  [1800.0, 0.13333333333333333, 0.3333333333333333],
  [5600.0, 0.3333333333333333, 0.03333333333333333],
  [40300.0, 0.03333333333333333, 0.3333333333333333],
  [18500.0, 0.3333333333333333, 0.08333333333333333],
  [17100.0, 0.08333333333333333, 0.3333333333333333],
  [4500.0, 0.3333333333333333, 0.3333333333333333],
  [12200.0, 0.3333333333333333, 0.13333333333333333],
  [6700.0, 0.13333333333333333, 0.3333333333333333],
  [6000.0, 0.3333333333333333, 0.06666666666666667],
  [32200.0, 0.06666666666666667, 0.06666666666666667],
  [5000.0, 0.06666666666666667, 0.041666666666666664],
  [15300.0, 0.041666666666666664, 0.3333333333333333],
  [17200.0, 0.3333333333333333, 0.037037037037037035],
  [200.0, 0.037037037037037035, 0.0909090909090909],
  [3000.0, 0.0909090909090909, 0.12121212121212122],
  [20200.0, 0.12121212121212122, 0.08333333333333333],
  [10900.0, 0.08333333333333333, 0.3333333333333333],
  [13400.0, 0.3333333333333333, 0.1111111111111111],
  [46000.0, 0.1111111111111111, 0.3333333333333333],
  [9200.0, 0.3333333333333333, 0.1111111111111111],
  [9600.0, 0.1111111111111111, 0.037037037037037035],
  [21900.0, 0.037037037037037035, 0.08333333333333333],
  [11500.0, 0.08333333333333333, 0.3333333333333333],
  [5600.0, 0.3333333333333333, 0.08333333333333333],
  [13100.0, 0.08333333333333333, 0.3333333333333333],
  [16000.0, 0.3333333333333333, 0.3333333333333333],
  [27400.0, 0.3333333333333333, 0.3333333333333333],
  [2400.0, 0.3333333333333333, 0.3333333333333333],
  [31800.0, 0.3333333333333333, 0.06666666666666667],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.56 => p.pan;
600.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
