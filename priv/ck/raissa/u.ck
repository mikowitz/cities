[
  [27400.0, 0.0, 0.0],
  [45500.0, 0.0, 0.05714285714285715],
  [25400.0, 0.05714285714285715, 0.14285714285714285],
  [2900.0, 0.14285714285714285, 0.14285714285714285],
  [23300.0, 0.14285714285714285, 0.10714285714285714],
  [4200.0, 0.10714285714285714, 0.08163265306122448],
  [30300.0, 0.08163265306122448, 0.08163265306122448],
  [28200.0, 0.08163265306122448, 0.05357142857142857],
  [7200.0, 0.05357142857142857, 0.07142857142857142],
  [13900.0, 0.07142857142857142, 0.14285714285714285],
  [8000.0, 0.14285714285714285, 0.047619047619047616],
  [3900.0, 0.047619047619047616, 0.10204081632653061],
  [31300.0, 0.10204081632653061, 0.03571428571428571],
  [8900.0, 0.03571428571428571, 0.07142857142857142],
  [21300.0, 0.07142857142857142, 0.047619047619047616],
  [21100.0, 0.047619047619047616, 0.08163265306122448],
  [9700.0, 0.08163265306122448, 0.08571428571428572],
  [5500.0, 0.08571428571428572, 0.07142857142857142],
  [1200.0, 0.07142857142857142, 0.11904761904761905],
  [13000.0, 0.11904761904761905, 0.028571428571428574],
  [12600.0, 0.028571428571428574, 0.01098901098901099],
  [2100.0, 0.01098901098901099, 0.028571428571428574],
  [12000.0, 0.028571428571428574, 0.1285714285714286],
  [32000.0, 0.1285714285714286, 0.07142857142857142],
  [75700.0, 0.07142857142857142, 0.07142857142857142],
  [11100.0, 0.07142857142857142, 0.047619047619047616],
  [22500.0, 0.047619047619047616, 0.09523809523809523],
  [29400.0, 0.09523809523809523, 0.07142857142857142],
  [38500.0, 0.07142857142857142, 0.017857142857142856],
  [11600.0, 0.017857142857142856, 0.02040816326530612],
  [9200.0, 0.02040816326530612, 0.02040816326530612],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
0.56 => p.pan;
2100.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
