[
  [1900.0, 0.0, 0.0],
  [58300.0, 0.0, 0.125],
  [5000.0, 0.125, 0.05555555555555555],
  [9100.0, 0.05555555555555555, 0.26666666666666666],
  [31900.0, 0.26666666666666666, 0.2222222222222222],
  [2600.0, 0.2222222222222222, 0.14285714285714285],
  [2800.0, 0.14285714285714285, 0.08333333333333333],
  [3600.0, 0.08333333333333333, 0.030303030303030304],
  [11600.0, 0.030303030303030304, 0.24242424242424243],
  [19100.0, 0.24242424242424243, 0.2222222222222222],
  [18900.0, 0.2222222222222222, 0.041666666666666664],
  [20300.0, 0.041666666666666664, 0.14285714285714285],
  [10200.0, 0.14285714285714285, 0.041666666666666664],
  [26500.0, 0.041666666666666664, 0.21212121212121213],
  [4200.0, 0.21212121212121213, 0.25],
  [5200.0, 0.25, 0.09523809523809523],
  [2000.0, 0.09523809523809523, 0.25],
  [13500.0, 0.25, 0.1111111111111111],
  [4500.0, 0.1111111111111111, 0.26666666666666666],
  [22000.0, 0.26666666666666666, 0.19047619047619047],
  [200.0, 0.19047619047619047, 0.09999999999999999],
  [10900.0, 0.09999999999999999, 0.13333333333333333],
  [1600.0, 0.13333333333333333, 0.05555555555555555],
  [67500.0, 0.05555555555555555, 0.2777777777777778],
  [4600.0, 0.2777777777777778, 0.26666666666666666],
  [3200.0, 0.26666666666666666, 0.25],
  [28900.0, 0.25, 0.047619047619047616],
  [3700.0, 0.047619047619047616, 0.25],
  [17400.0, 0.25, 0.03333333333333333],
  [19300.0, 0.03333333333333333, 0.03333333333333333],
  [17900.0, 0.03333333333333333, 0.08333333333333333],
  [38500.0, 0.08333333333333333, 0.1111111111111111],
  [10000.0, 0.1111111111111111, 0.26666666666666666],
  [7300.0, 0.26666666666666666, 0.05555555555555555],
  [22200.0, 0.05555555555555555, 0.14285714285714285],
  [2600.0, 0.14285714285714285, 0.27272727272727276],
  [17500.0, 0.27272727272727276, 0.25],
  [21100.0, 0.25, 0.25],
  [10100.0, 0.25, 0.25],
  [10200.0, 0.25, 0.24242424242424243],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.78 => p.pan;
300.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
