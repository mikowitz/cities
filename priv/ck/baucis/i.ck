[
  [17200.0, 0.0, 0.0],
  [6700.0, 0.0, 0.08333333333333333],
  [5200.0, 0.08333333333333333, 0.2777777777777778],
  [7300.0, 0.2777777777777778, 0.16666666666666666],
  [5700.0, 0.16666666666666666, 0.19047619047619047],
  [4400.0, 0.19047619047619047, 0.16666666666666666],
  [11000.0, 0.16666666666666666, 0.16666666666666666],
  [20800.0, 0.16666666666666666, 0.08333333333333333],
  [3000.0, 0.08333333333333333, 0.16666666666666666],
  [3200.0, 0.16666666666666666, 0.19999999999999998],
  [10400.0, 0.19999999999999998, 0.16666666666666666],
  [2600.0, 0.16666666666666666, 0.030303030303030304],
  [10200.0, 0.030303030303030304, 0.1818181818181818],
  [6900.0, 0.1818181818181818, 0.2222222222222222],
  [17300.0, 0.2222222222222222, 0.26666666666666666],
  [3700.0, 0.26666666666666666, 0.2380952380952381],
  [12500.0, 0.2380952380952381, 0.16666666666666666],
  [5000.0, 0.16666666666666666, 0.20833333333333334],
  [1600.0, 0.20833333333333334, 0.19999999999999998],
  [12600.0, 0.19999999999999998, 0.16666666666666666],
  [12800.0, 0.16666666666666666, 0.09523809523809523],
  [13200.0, 0.09523809523809523, 0.19047619047619047],
  [2600.0, 0.19047619047619047, 0.030303030303030304],
  [4700.0, 0.030303030303030304, 0.1818181818181818],
  [13600.0, 0.1818181818181818, 0.2777777777777778],
  [5200.0, 0.2777777777777778, 0.16666666666666666],
  [7100.0, 0.16666666666666666, 0.26666666666666666],
  [1800.0, 0.26666666666666666, 0.16666666666666666],
  [5400.0, 0.16666666666666666, 0.16666666666666666],
  [3200.0, 0.16666666666666666, 0.14285714285714285],
  [8000.0, 0.14285714285714285, 0.16666666666666666],
  [8200.0, 0.16666666666666666, 0.13333333333333333],
  [3300.0, 0.13333333333333333, 0.16666666666666666],
  [1600.0, 0.16666666666666666, 0.1851851851851852],
  [2200.0, 0.1851851851851852, 0.25925925925925924],
  [13000.0, 0.25925925925925924, 0.16666666666666666],
  [2400.0, 0.16666666666666666, 0.28205128205128205],
  [2700.0, 0.28205128205128205, 0.16666666666666666],
  [2200.0, 0.16666666666666666, 0.15151515151515152],
  [2700.0, 0.15151515151515152, 0.27272727272727276],
  [4900.0, 0.27272727272727276, 0.26666666666666666],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.33 => p.pan;
900.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
