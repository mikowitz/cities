[
  [300.0, 0.0, 0.0],
  [7100.0, 0.0, 0.03571428571428571],
  [4100.0, 0.03571428571428571, 0.05714285714285715],
  [50600.0, 0.05714285714285715, 0.04285714285714286],
  [2100.0, 0.04285714285714286, 0.06349206349206349],
  [17600.0, 0.06349206349206349, 0.12698412698412698],
  [16300.0, 0.12698412698412698, 0.09523809523809523],
  [15700.0, 0.09523809523809523, 0.07142857142857142],
  [16600.0, 0.07142857142857142, 0.07142857142857142],
  [9800.0, 0.07142857142857142, 0.08571428571428572],
  [26300.0, 0.08571428571428572, 0.07936507936507937],
  [1800.0, 0.07936507936507937, 0.09523809523809523],
  [7500.0, 0.09523809523809523, 0.09523809523809523],
  [13800.0, 0.09523809523809523, 0.08571428571428572],
  [11800.0, 0.08571428571428572, 0.07142857142857142],
  [4900.0, 0.07142857142857142, 0.028571428571428574],
  [14700.0, 0.028571428571428574, 0.08571428571428572],
  [11100.0, 0.08571428571428572, 0.08163265306122448],
  [22800.0, 0.08163265306122448, 0.08571428571428572],
  [15600.0, 0.08571428571428572, 0.05952380952380953],
  [4100.0, 0.05952380952380953, 0.09090909090909091],
  [4600.0, 0.09090909090909091, 0.12244897959183673],
  [62600.0, 0.12244897959183673, 0.07142857142857142],
  [3600.0, 0.07142857142857142, 0.07142857142857142],
  [1900.0, 0.07142857142857142, 0.14285714285714285],
  [9200.0, 0.14285714285714285, 0.07936507936507937],
  [9500.0, 0.07936507936507937, 0.028571428571428574],
  [8500.0, 0.028571428571428574, 0.09523809523809523],
  [1600.0, 0.09523809523809523, 0.03571428571428571],
  [52900.0, 0.03571428571428571, 0.08928571428571429],
  [8100.0, 0.08928571428571429, 0.11111111111111112],
  [9500.0, 0.11111111111111112, 0.07142857142857142],
  [13600.0, 0.07142857142857142, 0.05952380952380953],
  [3700.0, 0.05952380952380953, 0.08163265306122448],
  [12500.0, 0.08163265306122448, 0.023809523809523808],
  [24200.0, 0.023809523809523808, 0.07142857142857142],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
0.56 => p.pan;
2100.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
