[
  [5700.0, 0.0, 0.0],
  [21900.0, 0.0, 0.26666666666666666],
  [10100.0, 0.26666666666666666, 0.05555555555555555],
  [1800.0, 0.05555555555555555, 0.26666666666666666],
  [4200.0, 0.26666666666666666, 0.1111111111111111],
  [31400.0, 0.1111111111111111, 0.06666666666666667],
  [9700.0, 0.06666666666666667, 0.05555555555555555],
  [18800.0, 0.05555555555555555, 0.27272727272727276],
  [2200.0, 0.27272727272727276, 0.041666666666666664],
  [16400.0, 0.041666666666666664, 0.16666666666666666],
  [13300.0, 0.16666666666666666, 0.047619047619047616],
  [21200.0, 0.047619047619047616, 0.1111111111111111],
  [4700.0, 0.1111111111111111, 0.037037037037037035],
  [800.0, 0.037037037037037035, 0.16666666666666666],
  [2700.0, 0.16666666666666666, 0.037037037037037035],
  [2300.0, 0.037037037037037035, 0.25925925925925924],
  [1400.0, 0.25925925925925924, 0.25],
  [2900.0, 0.25, 0.26666666666666666],
  [2300.0, 0.26666666666666666, 0.05555555555555555],
  [5900.0, 0.05555555555555555, 0.030303030303030304],
  [2900.0, 0.030303030303030304, 0.26666666666666666],
  [7800.0, 0.26666666666666666, 0.08333333333333333],
  [6100.0, 0.08333333333333333, 0.037037037037037035],
  [4700.0, 0.037037037037037035, 0.08333333333333333],
  [11500.0, 0.08333333333333333, 0.125],
  [200.0, 0.125, 0.07407407407407407],
  [17000.0, 0.07407407407407407, 0.1111111111111111],
  [1100.0, 0.1111111111111111, 0.26666666666666666],
  [6800.0, 0.26666666666666666, 0.14285714285714285],
  [17100.0, 0.14285714285714285, 0.2333333333333333],
  [13600.0, 0.2333333333333333, 0.037037037037037035],
  [17700.0, 0.037037037037037035, 0.2962962962962963],
  [4000.0, 0.2962962962962963, 0.09999999999999999],
  [7800.0, 0.09999999999999999, 0.21212121212121213],
  [15200.0, 0.21212121212121213, 0.05555555555555555],
  [1700.0, 0.05555555555555555, 0.26666666666666666],
  [17200.0, 0.26666666666666666, 0.08333333333333333],
  [900.0, 0.08333333333333333, 0.27272727272727276],
  [4000.0, 0.27272727272727276, 0.1111111111111111],
  [26100.0, 0.1111111111111111, 0.25],
  [1000.0, 0.25, 0.030303030303030304],
  [8000.0, 0.030303030303030304, 0.12121212121212122],
  [4600.0, 0.12121212121212122, 0.05555555555555555],
  [13500.0, 0.05555555555555555, 0.1111111111111111],
  [16200.0, 0.1111111111111111, 0.047619047619047616],
  [14700.0, 0.047619047619047616, 0.26666666666666666],
  [23800.0, 0.26666666666666666, 0.1111111111111111],
  [3700.0, 0.1111111111111111, 0.041666666666666664],
  [16700.0, 0.041666666666666664, 0.047619047619047616],
  [11000.0, 0.047619047619047616, 0.08333333333333333],
  [700.0, 0.08333333333333333, 0.25],
  [3100.0, 0.25, 0.1111111111111111],
  [1000.0, 0.1111111111111111, 0.037037037037037035],
  [24600.0, 0.037037037037037035, 0.14814814814814814],
  [17200.0, 0.14814814814814814, 0.2222222222222222],
  [8200.0, 0.2222222222222222, 0.2380952380952381],
  [4400.0, 0.2380952380952381, 0.05555555555555555],
  [5500.0, 0.05555555555555555, 0.08333333333333333],
  [4100.0, 0.08333333333333333, 0.2380952380952381],
  [24600.0, 0.2380952380952381, 0.2222222222222222],
  [16800.0, 0.2222222222222222, 0.26666666666666666],
  [7900.0, 0.26666666666666666, 0.19999999999999998],
  [19500.0, 0.19999999999999998, 0.041666666666666664],
  [21500.0, 0.041666666666666664, 0.047619047619047616],
  [17200.0, 0.047619047619047616, 0.2222222222222222],
  [7000.0, 0.2222222222222222, 0.030303030303030304],
  [5900.0, 0.030303030303030304, 0.06666666666666667],
  [4800.0, 0.06666666666666667, 0.08333333333333333],
  [1000.0, 0.08333333333333333, 0.03333333333333333],
  [16600.0, 0.03333333333333333, 0.13333333333333333],
  [22100.0, 0.13333333333333333, 0.08333333333333333],
  [8300.0, 0.08333333333333333, 0.047619047619047616],
  [10800.0, 0.047619047619047616, 0.047619047619047616],
  [6700.0, 0.047619047619047616, 0.05555555555555555],
  [8000.0, 0.05555555555555555, 0.09523809523809523],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.78 => p.pan;
300.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
