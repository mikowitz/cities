[
  [45400.0, 0.0, 0.0],
  [4300.0, 0.0, 0.07142857142857142],
  [11300.0, 0.07142857142857142, 0.125],
  [18600.0, 0.125, 0.07142857142857142],
  [30700.0, 0.07142857142857142, 0.16666666666666666],
  [4700.0, 0.16666666666666666, 0.4375],
  [23300.0, 0.4375, 0.16666666666666666],
  [500.0, 0.16666666666666666, 0.25],
  [14400.0, 0.25, 0.125],
  [7800.0, 0.125, 0.22727272727272727],
  [34200.0, 0.22727272727272727, 0.07142857142857142],
  [19000.0, 0.07142857142857142, 0.16666666666666666],
  [1800.0, 0.16666666666666666, 0.25],
  [11100.0, 0.25, 0.07142857142857142],
  [25500.0, 0.07142857142857142, 0.2222222222222222],
  [66500.0, 0.2222222222222222, 0.25],
  [47900.0, 0.25, 0.21428571428571427],
  [14600.0, 0.21428571428571427, 0.07142857142857142],
  [2600.0, 0.07142857142857142, 0.3125],
  [16500.0, 0.3125, 0.1],
  [43100.0, 0.1, 0.08333333333333333],
  [600.0, 0.08333333333333333, 0.3333333333333333],
  [27500.0, 0.3333333333333333, 0.07142857142857142],
  [21600.0, 0.07142857142857142, 0.35],
  [88700.0, 0.35, 0.25],
  [2400.0, 0.25, 0.3888888888888889],
  [62100.0, 0.3888888888888889, 0.2777777777777778],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.85 => p.pan;
200.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
