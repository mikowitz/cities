[
  [20000.0, 0.0, 0.0],
  [21000.0, 0.0, 0.05555555555555555],
  [80100.0, 0.05555555555555555, 0.05555555555555555],
  [47900.0, 0.05555555555555555, 0.14814814814814814],
  [39900.0, 0.14814814814814814, 0.14814814814814814],
  [5100.0, 0.14814814814814814, 0.2222222222222222],
  [10700.0, 0.2222222222222222, 0.25],
  [3700.0, 0.25, 0.1851851851851852],
  [24400.0, 0.1851851851851852, 0.03333333333333333],
  [25200.0, 0.03333333333333333, 0.16666666666666666],
  [17100.0, 0.16666666666666666, 0.2222222222222222],
  [24700.0, 0.2222222222222222, 0.047619047619047616],
  [10400.0, 0.047619047619047616, 0.2916666666666667],
  [47500.0, 0.2916666666666667, 0.047619047619047616],
  [17700.0, 0.047619047619047616, 0.05555555555555555],
  [19300.0, 0.05555555555555555, 0.041666666666666664],
  [8400.0, 0.041666666666666664, 0.26666666666666666],
  [32600.0, 0.26666666666666666, 0.13333333333333333],
  [46200.0, 0.13333333333333333, 0.2333333333333333],
  [38300.0, 0.2333333333333333, 0.1851851851851852],
  [17300.0, 0.1851851851851852, 0.0909090909090909],
  [5400.0, 0.0909090909090909, 0.19047619047619047],
  [5200.0, 0.19047619047619047, 0.037037037037037035],
  [3500.0, 0.037037037037037035, 0.1111111111111111],
  [33500.0, 0.1111111111111111, 0.06666666666666667],
  [2000.0, 0.06666666666666667, 0.26666666666666666],
  [6900.0, 0.26666666666666666, 0.037037037037037035],
  [8700.0, 0.037037037037037035, 0.2916666666666667],
  [9100.0, 0.2916666666666667, 0.19047619047619047],
  [2400.0, 0.19047619047619047, 0.2222222222222222],
  [13300.0, 0.2222222222222222, 0.125],
  [200.0, 0.125, 0.09999999999999999],
  [10200.0, 0.09999999999999999, 0.13333333333333333],
  [1300.0, 0.13333333333333333, 0.2222222222222222],
  [4700.0, 0.2222222222222222, 0.2222222222222222],
  [27900.0, 0.2222222222222222, 0.047619047619047616],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.78 => p.pan;
300.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
