[
  [19200.0, 0.0, 0.0],
  [12800.0, 0.0, 0.08333333333333333],
  [15200.0, 0.08333333333333333, 0.06666666666666667],
  [10100.0, 0.06666666666666667, 0.25925925925925924],
  [12700.0, 0.25925925925925924, 0.26666666666666666],
  [19200.0, 0.26666666666666666, 0.26666666666666666],
  [7200.0, 0.26666666666666666, 0.26666666666666666],
  [30000.0, 0.26666666666666666, 0.14285714285714285],
  [1700.0, 0.14285714285714285, 0.20833333333333334],
  [18200.0, 0.20833333333333334, 0.08333333333333333],
  [3300.0, 0.08333333333333333, 0.047619047619047616],
  [9900.0, 0.047619047619047616, 0.047619047619047616],
  [23900.0, 0.047619047619047616, 0.047619047619047616],
  [1000.0, 0.047619047619047616, 0.2222222222222222],
  [17600.0, 0.2222222222222222, 0.3055555555555555],
  [7800.0, 0.3055555555555555, 0.041666666666666664],
  [6200.0, 0.041666666666666664, 0.2333333333333333],
  [2300.0, 0.2333333333333333, 0.05555555555555555],
  [4400.0, 0.05555555555555555, 0.03333333333333333],
  [6500.0, 0.03333333333333333, 0.047619047619047616],
  [1900.0, 0.047619047619047616, 0.26666666666666666],
  [2900.0, 0.26666666666666666, 0.26666666666666666],
  [3500.0, 0.26666666666666666, 0.1111111111111111],
  [8400.0, 0.1111111111111111, 0.1818181818181818],
  [12600.0, 0.1818181818181818, 0.06666666666666667],
  [20800.0, 0.06666666666666667, 0.2333333333333333],
  [20800.0, 0.2333333333333333, 0.16666666666666666],
  [6300.0, 0.16666666666666666, 0.1111111111111111],
  [10900.0, 0.1111111111111111, 0.08333333333333333],
  [11800.0, 0.08333333333333333, 0.19999999999999998],
  [1700.0, 0.19999999999999998, 0.16666666666666666],
  [2200.0, 0.16666666666666666, 0.1111111111111111],
  [25400.0, 0.1111111111111111, 0.25],
  [39600.0, 0.25, 0.05555555555555555],
  [3500.0, 0.05555555555555555, 0.025641025641025644],
  [30800.0, 0.025641025641025644, 0.20512820512820515],
  [800.0, 0.20512820512820515, 0.2222222222222222],
  [200.0, 0.2222222222222222, 0.1111111111111111],
  [11200.0, 0.1111111111111111, 0.16666666666666666],
  [13000.0, 0.16666666666666666, 0.19999999999999998],
  [21800.0, 0.19999999999999998, 0.2222222222222222],
  [25400.0, 0.2222222222222222, 0.26666666666666666],
  [4500.0, 0.26666666666666666, 0.26666666666666666],
  [1800.0, 0.26666666666666666, 0.03333333333333333],
  [10600.0, 0.03333333333333333, 0.19999999999999998],
  [5000.0, 0.19999999999999998, 0.06666666666666667],
  [13400.0, 0.06666666666666667, 0.2777777777777778],
  [3300.0, 0.2777777777777778, 0.08333333333333333],
  [1200.0, 0.08333333333333333, 0.26666666666666666],
  [1600.0, 0.26666666666666666, 0.05555555555555555],
  [1000.0, 0.05555555555555555, 0.2777777777777778],
  [10200.0, 0.2777777777777778, 0.05555555555555555],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.78 => p.pan;
300.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
