[
  [4300.0, 0.0, 0.0],
  [47000.0, 0.0, 0.045454545454545456],
  [5300.0, 0.045454545454545456, 0.1],
  [300.0, 0.1, 0.125],
  [46500.0, 0.125, 0.1875],
  [22700.0, 0.1875, 0.125],
  [21500.0, 0.125, 0.2857142857142857],
  [34200.0, 0.2857142857142857, 0.07142857142857142],
  [56700.0, 0.07142857142857142, 0.045454545454545456],
  [1000.0, 0.045454545454545456, 0.4166666666666667],
  [4100.0, 0.4166666666666667, 0.045454545454545456],
  [10000.0, 0.045454545454545456, 0.14285714285714285],
  [7600.0, 0.14285714285714285, 0.4],
  [2300.0, 0.4, 0.1],
  [15600.0, 0.1, 0.125],
  [92200.0, 0.125, 0.1],
  [12200.0, 0.1, 0.16666666666666666],
  [32700.0, 0.16666666666666666, 0.4444444444444444],
  [5600.0, 0.4444444444444444, 0.4],
  [2600.0, 0.4, 0.07142857142857142],
  [11500.0, 0.07142857142857142, 0.21428571428571427],
  [500.0, 0.21428571428571427, 0.08333333333333333],
  [5900.0, 0.08333333333333333, 0.3333333333333333],
  [34900.0, 0.3333333333333333, 0.045454545454545456],
  [300.0, 0.045454545454545456, 0.125],
  [48200.0, 0.125, 0.1875],
  [6500.0, 0.1875, 0.5],
  [500.0, 0.5, 0.08333333333333333],
  [32900.0, 0.08333333333333333, 0.3333333333333333],
  [1600.0, 0.3333333333333333, 0.16666666666666666],
  [22300.0, 0.16666666666666666, 0.045454545454545456],
  [5000.0, 0.045454545454545456, 0.14285714285714285],
  [7000.0, 0.14285714285714285, 0.16666666666666666],
  [30300.0, 0.16666666666666666, 0.125],
  [20800.0, 0.125, 0.07142857142857142],
  [15000.0, 0.07142857142857142, 0.045454545454545456],
  [19800.0, 0.045454545454545456, 0.125],
  [24300.0, 0.125, 0.041666666666666664],
  [10500.0, 0.041666666666666664, 0.14285714285714285],
  [25900.0, 0.14285714285714285, 0.5],
  [14500.0, 0.5, 0.22727272727272727],
  [22500.0, 0.22727272727272727, 0.045454545454545456],
  [41200.0, 0.045454545454545456, 0.045454545454545456],
  [27100.0, 0.045454545454545456, 0.045454545454545456],
  [18200.0, 0.045454545454545456, 0.125],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
0.19 => p.pan;
1600.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
