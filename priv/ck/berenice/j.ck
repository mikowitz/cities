[
  [12500.0, 0.0, 0.0],
  [111500.0, 0.0, 0.1],
  [85700.0, 0.1, 0.05],
  [56700.0, 0.05, 0.06666666666666667],
  [59900.0, 0.06666666666666667, 0.1],
  [17400.0, 0.1, 0.05],
  [208700.0, 0.05, 0.02],
  [41500.0, 0.02, 0.05],
  [13500.0, 0.05, 0.05],
  [4700.0, 0.05, 0.05],
  [36600.0, 0.05, 0.05],
  [25800.0, 0.05, 0.1],
  [36900.0, 0.1, 0.1],
  [3000.0, 0.1, 0.1],
  [54000.0, 0.1, 0.05],
  [19100.0, 0.05, 0.1],
  [33800.0, 0.1, 0.05],
  [6400.0, 0.05, 0.02857142857142857],
  [17000.0, 0.02857142857142857, 0.08888888888888888],
  [14100.0, 0.08888888888888888, 0.05],
  [18000.0, 0.05, 0.06666666666666667],
  [34100.0, 0.06666666666666667, 0.02857142857142857],
  [9900.0, 0.02857142857142857, 0.05],
  [62200.0, 0.05, 0.1],
  [4500.0, 0.1, 0.05],
  [62700.0, 0.05, 0.1],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.26 => p.pan;
1000.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
