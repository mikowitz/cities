[
  [121300.0, 0.0, 0.0],
  [25100.0, 0.0, 0.09523809523809523],
  [18400.0, 0.09523809523809523, 0.1142857142857143],
  [1700.0, 0.1142857142857143, 0.017857142857142856],
  [45500.0, 0.017857142857142856, 0.07142857142857142],
  [34900.0, 0.07142857142857142, 0.023809523809523808],
  [64300.0, 0.023809523809523808, 0.05194805194805195],
  [16600.0, 0.05194805194805195, 0.05714285714285715],
  [25000.0, 0.05714285714285715, 0.09523809523809523],
  [64400.0, 0.09523809523809523, 0.08571428571428572],
  [77900.0, 0.08571428571428572, 0.07142857142857142],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
0.56 => p.pan;
2100.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
