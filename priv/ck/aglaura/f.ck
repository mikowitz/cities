[
  [37300.0, 0.0, 0.0],
  [8400.0, 0.0, 0.3333333333333333],
  [6500.0, 0.3333333333333333, 0.3333333333333333],
  [2300.0, 0.3333333333333333, 0.05555555555555555],
  [16800.0, 0.05555555555555555, 0.1111111111111111],
  [26500.0, 0.1111111111111111, 0.1111111111111111],
  [20600.0, 0.1111111111111111, 0.25],
  [14800.0, 0.25, 0.3333333333333333],
  [6300.0, 0.3333333333333333, 0.3333333333333333],
  [71800.0, 0.3333333333333333, 0.3333333333333333],
  [14500.0, 0.3333333333333333, 0.05555555555555555],
  [5000.0, 0.05555555555555555, 0.3333333333333333],
  [3200.0, 0.3333333333333333, 0.05555555555555555],
  [200.0, 0.05555555555555555, 0.0909090909090909],
  [19400.0, 0.0909090909090909, 0.12121212121212122],
  [22400.0, 0.12121212121212122, 0.3333333333333333],
  [20100.0, 0.3333333333333333, 0.3333333333333333],
  [2800.0, 0.3333333333333333, 0.125],
  [26300.0, 0.125, 0.08333333333333333],
  [3200.0, 0.08333333333333333, 0.3333333333333333],
  [23900.0, 0.3333333333333333, 0.3333333333333333],
  [94100.0, 0.3333333333333333, 0.3333333333333333],
  [6200.0, 0.3333333333333333, 0.16666666666666666],
  [17000.0, 0.16666666666666666, 0.3333333333333333],
  [23500.0, 0.3333333333333333, 0.1818181818181818],
  [28100.0, 0.1818181818181818, 0.3333333333333333],
  [77600.0, 0.3333333333333333, 0.2222222222222222],
  [9500.0, 0.2222222222222222, 0.3333333333333333],
  [6900.0, 0.3333333333333333, 0.3333333333333333],
  [2600.0, 0.3333333333333333, 0.3333333333333333],
  [5800.0, 0.3333333333333333, 0.1111111111111111],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.56 => p.pan;
600.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
