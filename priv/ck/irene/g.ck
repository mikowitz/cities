[
  [17800.0, 0.0, 0.0],
  [11900.0, 0.0, 0.10714285714285714],
  [60100.0, 0.10714285714285714, 0.07142857142857142],
  [11100.0, 0.07142857142857142, 0.061224489795918366],
  [14800.0, 0.061224489795918366, 0.02040816326530612],
  [10100.0, 0.02040816326530612, 0.07142857142857142],
  [5300.0, 0.07142857142857142, 0.14285714285714285],
  [7300.0, 0.14285714285714285, 0.03571428571428571],
  [4400.0, 0.03571428571428571, 0.11904761904761905],
  [17300.0, 0.11904761904761905, 0.02040816326530612],
  [12300.0, 0.02040816326530612, 0.14285714285714285],
  [9100.0, 0.14285714285714285, 0.14285714285714285],
  [4500.0, 0.14285714285714285, 0.015873015873015872],
  [600.0, 0.015873015873015872, 0.14285714285714285],
  [19400.0, 0.14285714285714285, 0.023809523809523808],
  [15000.0, 0.023809523809523808, 0.11904761904761905],
  [10300.0, 0.11904761904761905, 0.14285714285714285],
  [13900.0, 0.14285714285714285, 0.03571428571428571],
  [9400.0, 0.03571428571428571, 0.03571428571428571],
  [25000.0, 0.03571428571428571, 0.05357142857142857],
  [13900.0, 0.05357142857142857, 0.08163265306122448],
  [29800.0, 0.08163265306122448, 0.14285714285714285],
  [11700.0, 0.14285714285714285, 0.14285714285714285],
  [2300.0, 0.14285714285714285, 0.028571428571428574],
  [12800.0, 0.028571428571428574, 0.14285714285714285],
  [12800.0, 0.14285714285714285, 0.14285714285714285],
  [7800.0, 0.14285714285714285, 0.07142857142857142],
  [78400.0, 0.07142857142857142, 0.08928571428571429],
  [13500.0, 0.08928571428571429, 0.09523809523809523],
  [38700.0, 0.09523809523809523, 0.14285714285714285],
  [14300.0, 0.14285714285714285, 0.10204081632653061],
  [7900.0, 0.10204081632653061, 0.14285714285714285],
  [97900.0, 0.14285714285714285, 0.14285714285714285],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.48 => p.pan;
700.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
