[
  [35400.0, 0.0, 0.0],
  [34000.0, 0.0, 0.06666666666666667],
  [8300.0, 0.06666666666666667, 0.037037037037037035],
  [4700.0, 0.037037037037037035, 0.05555555555555555],
  [17000.0, 0.05555555555555555, 0.16666666666666666],
  [10400.0, 0.16666666666666666, 0.08333333333333333],
  [7300.0, 0.08333333333333333, 0.19999999999999998],
  [24400.0, 0.19999999999999998, 0.2222222222222222],
  [46900.0, 0.2222222222222222, 0.25],
  [2600.0, 0.25, 0.037037037037037035],
  [3100.0, 0.037037037037037035, 0.08333333333333333],
  [200.0, 0.08333333333333333, 0.06666666666666667],
  [16300.0, 0.06666666666666667, 0.09999999999999999],
  [4200.0, 0.09999999999999999, 0.2916666666666667],
  [6000.0, 0.2916666666666667, 0.125],
  [2800.0, 0.125, 0.037037037037037035],
  [32500.0, 0.037037037037037035, 0.037037037037037035],
  [1200.0, 0.037037037037037035, 0.09999999999999999],
  [23900.0, 0.09999999999999999, 0.26666666666666666],
  [3000.0, 0.26666666666666666, 0.041666666666666664],
  [20100.0, 0.041666666666666664, 0.08333333333333333],
  [9000.0, 0.08333333333333333, 0.30303030303030304],
  [16300.0, 0.30303030303030304, 0.26666666666666666],
  [15800.0, 0.26666666666666666, 0.08333333333333333],
  [11200.0, 0.08333333333333333, 0.05555555555555555],
  [30300.0, 0.05555555555555555, 0.1111111111111111],
  [9100.0, 0.1111111111111111, 0.2962962962962963],
  [4400.0, 0.2962962962962963, 0.26666666666666666],
  [27300.0, 0.26666666666666666, 0.26666666666666666],
  [2500.0, 0.26666666666666666, 0.26666666666666666],
  [28100.0, 0.26666666666666666, 0.26666666666666666],
  [2200.0, 0.26666666666666666, 0.1111111111111111],
  [9900.0, 0.1111111111111111, 0.2222222222222222],
  [600.0, 0.2222222222222222, 0.19999999999999998],
  [41900.0, 0.19999999999999998, 0.08333333333333333],
  [3100.0, 0.08333333333333333, 0.08333333333333333],
  [200.0, 0.08333333333333333, 0.06060606060606061],
  [6300.0, 0.06060606060606061, 0.0909090909090909],
  [5900.0, 0.0909090909090909, 0.1818181818181818],
  [11100.0, 0.1818181818181818, 0.037037037037037035],
  [13100.0, 0.037037037037037035, 0.041666666666666664],
  [3700.0, 0.041666666666666664, 0.030303030303030304],
  [20500.0, 0.030303030303030304, 0.30303030303030304],
  [14900.0, 0.30303030303030304, 0.08333333333333333],
  [2100.0, 0.08333333333333333, 0.09999999999999999],
  [23400.0, 0.09999999999999999, 0.26666666666666666],
  [1900.0, 0.26666666666666666, 0.2777777777777778],
  [9700.0, 0.2777777777777778, 0.1111111111111111],
  [4800.0, 0.1111111111111111, 0.12121212121212122],
  [36300.0, 0.12121212121212122, 0.16666666666666666],
  [4500.0, 0.16666666666666666, 0.05555555555555555],
  [29300.0, 0.05555555555555555, 0.19999999999999998],
  [24000.0, 0.19999999999999998, 0.08333333333333333],
  [2000.0, 0.08333333333333333, 0.14285714285714285],
  [27800.0, 0.14285714285714285, 0.20833333333333334],
  [11300.0, 0.20833333333333334, 0.037037037037037035],
  [4000.0, 0.037037037037037035, 0.06666666666666667],
  [1900.0, 0.06666666666666667, 0.16666666666666666],
  [8200.0, 0.16666666666666666, 0.125],
  [22000.0, 0.125, 0.047619047619047616],
  [700.0, 0.047619047619047616, 0.19999999999999998],
  [12400.0, 0.19999999999999998, 0.06666666666666667],
  [6800.0, 0.06666666666666667, 0.14285714285714285],
  [7300.0, 0.14285714285714285, 0.20370370370370372],
  [9500.0, 0.20370370370370372, 0.041666666666666664],
  [2600.0, 0.041666666666666664, 0.037037037037037035],
  [11400.0, 0.037037037037037035, 0.1111111111111111],
  [10800.0, 0.1111111111111111, 0.05555555555555555],
  [8600.0, 0.05555555555555555, 0.26666666666666666],
  [3600.0, 0.26666666666666666, 0.1111111111111111],
  [7200.0, 0.1111111111111111, 0.041666666666666664],
  [3300.0, 0.041666666666666664, 0.08333333333333333],
  [12700.0, 0.08333333333333333, 0.26666666666666666],
  [600.0, 0.26666666666666666, 0.030303030303030304],
  [6300.0, 0.030303030303030304, 0.12121212121212122],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.78 => p.pan;
300.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
