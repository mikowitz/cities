[
  [8700.0, 0.0, 0.0],
  [22100.0, 0.0, 0.047619047619047616],
  [2400.0, 0.047619047619047616, 0.08571428571428572],
  [5400.0, 0.08571428571428572, 0.14285714285714285],
  [22600.0, 0.14285714285714285, 0.07142857142857142],
  [15100.0, 0.07142857142857142, 0.047619047619047616],
  [7900.0, 0.047619047619047616, 0.09523809523809523],
  [7500.0, 0.09523809523809523, 0.08571428571428572],
  [14900.0, 0.08571428571428572, 0.14285714285714285],
  [11400.0, 0.14285714285714285, 0.09523809523809523],
  [30200.0, 0.09523809523809523, 0.05952380952380953],
  [4500.0, 0.05952380952380953, 0.09523809523809523],
  [1100.0, 0.09523809523809523, 0.017857142857142856],
  [12300.0, 0.017857142857142856, 0.05357142857142857],
  [25200.0, 0.05357142857142857, 0.09523809523809523],
  [3800.0, 0.09523809523809523, 0.07142857142857142],
  [2700.0, 0.07142857142857142, 0.047619047619047616],
  [21900.0, 0.047619047619047616, 0.04081632653061224],
  [15500.0, 0.04081632653061224, 0.047619047619047616],
  [33100.0, 0.047619047619047616, 0.031746031746031744],
  [6100.0, 0.031746031746031744, 0.04081632653061224],
  [17300.0, 0.04081632653061224, 0.03571428571428571],
  [38500.0, 0.03571428571428571, 0.031746031746031744],
  [10800.0, 0.031746031746031744, 0.031746031746031744],
  [3800.0, 0.031746031746031744, 0.04081632653061224],
  [1100.0, 0.04081632653061224, 0.02040816326530612],
  [7700.0, 0.02040816326530612, 0.061224489795918366],
  [40500.0, 0.061224489795918366, 0.047619047619047616],
  [21200.0, 0.047619047619047616, 0.07142857142857142],
  [19900.0, 0.07142857142857142, 0.09523809523809523],
  [70200.0, 0.09523809523809523, 0.09523809523809523],
  [15900.0, 0.09523809523809523, 0.07142857142857142],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
0.56 => p.pan;
2100.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
