[
  [56200.0, 0.0, 0.0],
  [1600.0, 0.0, 0.25],
  [17000.0, 0.25, 0.25],
  [13200.0, 0.25, 0.08333333333333333],
  [2000.0, 0.08333333333333333, 0.07142857142857142],
  [4200.0, 0.07142857142857142, 0.35714285714285715],
  [1100.0, 0.35714285714285715, 0.041666666666666664],
  [22200.0, 0.041666666666666664, 0.25],
  [22500.0, 0.25, 0.125],
  [149800.0, 0.125, 0.25],
  [37100.0, 0.25, 0.08333333333333333],
  [500.0, 0.08333333333333333, 0.25],
  [1100.0, 0.25, 0.041666666666666664],
  [8800.0, 0.041666666666666664, 0.25],
  [17300.0, 0.25, 0.08333333333333333],
  [46300.0, 0.08333333333333333, 0.07142857142857142],
  [2000.0, 0.07142857142857142, 0.07142857142857142],
  [4800.0, 0.07142857142857142, 0.35714285714285715],
  [5800.0, 0.35714285714285715, 0.25],
  [21900.0, 0.25, 0.07142857142857142],
  [43700.0, 0.07142857142857142, 0.25],
  [16300.0, 0.25, 0.125],
  [15000.0, 0.125, 0.08333333333333333],
  [8000.0, 0.08333333333333333, 0.16666666666666666],
  [9000.0, 0.16666666666666666, 0.08333333333333333],
  [168600.0, 0.08333333333333333, 0.3],
  [32800.0, 0.3, 0.5],
  [14100.0, 0.5, 0.25],
  [8500.0, 0.25, 0.16666666666666666],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.85 => p.pan;
200.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
