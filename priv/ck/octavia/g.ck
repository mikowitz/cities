[
  [6300.0, 0.0, 0.0],
  [84400.0, 0.0, 0.03571428571428571],
  [15000.0, 0.03571428571428571, 0.14285714285714285],
  [14500.0, 0.14285714285714285, 0.14285714285714285],
  [10200.0, 0.14285714285714285, 0.028571428571428574],
  [25400.0, 0.028571428571428574, 0.02040816326530612],
  [16100.0, 0.02040816326530612, 0.12244897959183673],
  [4900.0, 0.12244897959183673, 0.14285714285714285],
  [16500.0, 0.14285714285714285, 0.14285714285714285],
  [7000.0, 0.14285714285714285, 0.08163265306122448],
  [7100.0, 0.08163265306122448, 0.017857142857142856],
  [10500.0, 0.017857142857142856, 0.047619047619047616],
  [14900.0, 0.047619047619047616, 0.12244897959183673],
  [6500.0, 0.12244897959183673, 0.1142857142857143],
  [16400.0, 0.1142857142857143, 0.028571428571428574],
  [45400.0, 0.028571428571428574, 0.14285714285714285],
  [600.0, 0.14285714285714285, 0.14285714285714285],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.48 => p.pan;
700.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
