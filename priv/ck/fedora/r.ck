[
  [4100.0, 0.0, 0.0],
  [2000.0, 0.0, 0.3333333333333333],
  [3400.0, 0.3333333333333333, 0.2777777777777778],
  [4000.0, 0.2777777777777778, 0.16666666666666666],
  [13600.0, 0.16666666666666666, 0.13333333333333333],
  [5600.0, 0.13333333333333333, 0.09523809523809523],
  [1300.0, 0.09523809523809523, 0.26666666666666666],
  [17700.0, 0.26666666666666666, 0.08333333333333333],
  [2900.0, 0.08333333333333333, 0.2222222222222222],
  [2900.0, 0.2222222222222222, 0.2777777777777778],
  [2500.0, 0.2777777777777778, 0.2222222222222222],
  [9900.0, 0.2222222222222222, 0.19999999999999998],
  [2000.0, 0.19999999999999998, 0.3333333333333333],
  [2600.0, 0.3333333333333333, 0.05555555555555555],
  [3100.0, 0.05555555555555555, 0.3333333333333333],
  [10800.0, 0.3333333333333333, 0.3333333333333333],
  [8000.0, 0.3333333333333333, 0.26666666666666666],
  [23200.0, 0.26666666666666666, 0.2777777777777778],
  [8800.0, 0.2777777777777778, 0.1818181818181818],
  [2800.0, 0.1818181818181818, 0.2962962962962963],
  [2400.0, 0.2962962962962963, 0.2777777777777778],
  [4300.0, 0.2777777777777778, 0.14285714285714285],
  [4300.0, 0.14285714285714285, 0.3333333333333333],
  [9800.0, 0.3333333333333333, 0.2777777777777778],
  [6600.0, 0.2777777777777778, 0.2222222222222222],
  [23100.0, 0.2222222222222222, 0.2777777777777778],
  [4700.0, 0.2777777777777778, 0.2380952380952381],
  [16800.0, 0.2380952380952381, 0.26666666666666666],
  [1100.0, 0.26666666666666666, 0.0909090909090909],
  [6800.0, 0.0909090909090909, 0.12121212121212122],
  [13800.0, 0.12121212121212122, 0.2380952380952381],
  [17400.0, 0.2380952380952381, 0.03333333333333333],
  [10100.0, 0.03333333333333333, 0.2777777777777778],
  [5900.0, 0.2777777777777778, 0.13333333333333333],
  [13200.0, 0.13333333333333333, 0.16666666666666666],
  [1600.0, 0.16666666666666666, 0.041666666666666664],
  [1800.0, 0.041666666666666664, 0.20833333333333334],
  [8300.0, 0.20833333333333334, 0.3333333333333333],
  [14800.0, 0.3333333333333333, 0.16666666666666666],
  [8100.0, 0.16666666666666666, 0.2222222222222222],
  [4900.0, 0.2222222222222222, 0.2380952380952381],
  [5300.0, 0.2380952380952381, 0.3333333333333333],
  [4400.0, 0.3333333333333333, 0.16666666666666666],
  [6500.0, 0.16666666666666666, 0.08333333333333333],
  [2800.0, 0.08333333333333333, 0.3333333333333333],
  [1900.0, 0.3333333333333333, 0.2777777777777778],
  [4400.0, 0.2777777777777778, 0.13333333333333333],
  [3500.0, 0.13333333333333333, 0.26666666666666666],
  [3600.0, 0.26666666666666666, 0.06666666666666667],
  [6100.0, 0.06666666666666667, 0.3333333333333333],
  [6200.0, 0.3333333333333333, 0.2777777777777778],
  [11000.0, 0.2777777777777778, 0.2380952380952381],
  [3700.0, 0.2380952380952381, 0.2222222222222222],
  [5900.0, 0.2222222222222222, 0.08333333333333333],
  [19100.0, 0.08333333333333333, 0.2222222222222222],
  [9700.0, 0.2222222222222222, 0.2962962962962963],
  [15200.0, 0.2962962962962963, 0.2777777777777778],
  [7300.0, 0.2777777777777778, 0.3333333333333333],
  [1100.0, 0.3333333333333333, 0.3333333333333333],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
0.33 => p.pan;
1800.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
