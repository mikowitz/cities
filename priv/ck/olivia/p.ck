[
  [67700.0, 0.0, 0.0],
  [6100.0, 0.0, 0.0625],
  [10500.0, 0.0625, 0.07142857142857142],
  [1800.0, 0.07142857142857142, 0.05],
  [5000.0, 0.05, 0.25],
  [7400.0, 0.25, 0.125],
  [27500.0, 0.125, 0.07142857142857142],
  [2200.0, 0.07142857142857142, 0.1],
  [13800.0, 0.1, 0.125],
  [1600.0, 0.125, 0.07142857142857142],
  [64500.0, 0.07142857142857142, 0.14285714285714285],
  [14200.0, 0.14285714285714285, 0.045454545454545456],
  [15000.0, 0.045454545454545456, 0.2],
  [5600.0, 0.2, 0.2],
  [34700.0, 0.2, 0.4],
  [43200.0, 0.4, 0.07142857142857142],
  [15000.0, 0.07142857142857142, 0.1875],
  [13200.0, 0.1875, 0.125],
  [7700.0, 0.125, 0.21428571428571427],
  [87500.0, 0.21428571428571427, 0.16666666666666666],
  [37800.0, 0.16666666666666666, 0.20833333333333334],
  [2200.0, 0.20833333333333334, 0.07142857142857142],
  [38400.0, 0.07142857142857142, 0.42857142857142855],
  [44700.0, 0.42857142857142855, 0.0625],
  [11400.0, 0.0625, 0.2777777777777778],
  [23000.0, 0.2777777777777778, 0.1875],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
0.19 => p.pan;
1600.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
