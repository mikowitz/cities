[
  [1300.0, 0.0, 0.0],
  [9500.0, 0.0, 0.015384615384615385],
  [23400.0, 0.015384615384615385, 0.07692307692307693],
  [12600.0, 0.07692307692307693, 0.023076923076923075],
  [61400.0, 0.023076923076923075, 0.06153846153846154],
  [11900.0, 0.06153846153846154, 0.019230769230769232],
  [16300.0, 0.019230769230769232, 0.07692307692307693],
  [25000.0, 0.07692307692307693, 0.028846153846153848],
  [16000.0, 0.028846153846153848, 0.02564102564102564],
  [13600.0, 0.02564102564102564, 0.07692307692307693],
  [13600.0, 0.07692307692307693, 0.057692307692307696],
  [25100.0, 0.057692307692307696, 0.07692307692307693],
  [1800.0, 0.07692307692307693, 0.02564102564102564],
  [5100.0, 0.02564102564102564, 0.05982905982905983],
  [400.0, 0.05982905982905983, 0.07692307692307693],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.04 => p.pan;
1300.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
