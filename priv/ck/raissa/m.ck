[
  [64200.0, 0.0, 0.0],
  [3900.0, 0.0, 0.03296703296703297],
  [7700.0, 0.03296703296703297, 0.010989010989010988],
  [3600.0, 0.010989010989010988, 0.07692307692307693],
  [16500.0, 0.07692307692307693, 0.07692307692307693],
  [500.0, 0.07692307692307693, 0.01282051282051282],
  [13200.0, 0.01282051282051282, 0.038461538461538464],
  [400.0, 0.038461538461538464, 0.038461538461538464],
  [15300.0, 0.038461538461538464, 0.05128205128205128],
  [13500.0, 0.05128205128205128, 0.054945054945054944],
  [12800.0, 0.054945054945054944, 0.008547008547008546],
  [29400.0, 0.008547008547008546, 0.03076923076923077],
  [28100.0, 0.03076923076923077, 0.07692307692307693],
  [400.0, 0.07692307692307693, 0.038461538461538464],
  [29000.0, 0.038461538461538464, 0.05128205128205128],
  [500.0, 0.05128205128205128, 0.01282051282051282],
  [22200.0, 0.01282051282051282, 0.038461538461538464],
  [16100.0, 0.038461538461538464, 0.038461538461538464],
  [7300.0, 0.038461538461538464, 0.04615384615384615],
  [11900.0, 0.04615384615384615, 0.07692307692307693],
  [12200.0, 0.07692307692307693, 0.038461538461538464],
  [24300.0, 0.038461538461538464, 0.055944055944055944],
  [2500.0, 0.055944055944055944, 0.01183431952662722],
  [45800.0, 0.01183431952662722, 0.05325443786982249],
  [10400.0, 0.05325443786982249, 0.02564102564102564],
  [2200.0, 0.02564102564102564, 0.057692307692307696],
  [39300.0, 0.057692307692307696, 0.02564102564102564],
  [34200.0, 0.02564102564102564, 0.07692307692307693],
  [11100.0, 0.07692307692307693, 0.032051282051282055],
  [47300.0, 0.032051282051282055, 0.06410256410256411],
  [500.0, 0.06410256410256411, 0.01282051282051282],
  [17500.0, 0.01282051282051282, 0.038461538461538464],
  [45100.0, 0.038461538461538464, 0.01282051282051282],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.04 => p.pan;
1300.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
