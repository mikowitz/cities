[
  [30000.0, 0.0, 0.0],
  [60100.0, 0.0, 0.12698412698412698],
  [18000.0, 0.12698412698412698, 0.047619047619047616],
  [9400.0, 0.047619047619047616, 0.10714285714285714],
  [21500.0, 0.10714285714285714, 0.14285714285714285],
  [12400.0, 0.14285714285714285, 0.07142857142857142],
  [8400.0, 0.07142857142857142, 0.11904761904761905],
  [2200.0, 0.11904761904761905, 0.12087912087912088],
  [53600.0, 0.12087912087912088, 0.04285714285714286],
  [45800.0, 0.04285714285714286, 0.14285714285714285],
  [10200.0, 0.14285714285714285, 0.14285714285714285],
  [2200.0, 0.14285714285714285, 0.09999999999999999],
  [2600.0, 0.09999999999999999, 0.14285714285714285],
  [16900.0, 0.14285714285714285, 0.10714285714285714],
  [3900.0, 0.10714285714285714, 0.06349206349206349],
  [60400.0, 0.06349206349206349, 0.11904761904761905],
  [20100.0, 0.11904761904761905, 0.14285714285714285],
  [48500.0, 0.14285714285714285, 0.028571428571428574],
  [15000.0, 0.028571428571428574, 0.09523809523809523],
  [15100.0, 0.09523809523809523, 0.06493506493506493],
  [600.0, 0.06493506493506493, 0.08928571428571429],
  [50100.0, 0.08928571428571429, 0.10714285714285714],
  [12200.0, 0.10714285714285714, 0.11904761904761905],
  [14300.0, 0.11904761904761905, 0.14285714285714285],
  [40200.0, 0.14285714285714285, 0.11904761904761905],
  [6600.0, 0.11904761904761905, 0.11904761904761905],
  [13400.0, 0.11904761904761905, 0.11904761904761905],
  [10500.0, 0.11904761904761905, 0.14285714285714285],
  [10600.0, 0.14285714285714285, 0.11904761904761905],
  [7800.0, 0.11904761904761905, 0.10204081632653061],
  [46200.0, 0.10204081632653061, 0.14285714285714285],
  [38500.0, 0.14285714285714285, 0.14285714285714285],
  [15700.0, 0.14285714285714285, 0.14285714285714285],
  [16300.0, 0.14285714285714285, 0.1142857142857143],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.48 => p.pan;
700.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
