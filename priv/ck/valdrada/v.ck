[
  [7100.0, 0.0, 0.0],
  [12500.0, 0.0, 0.011363636363636364],
  [4400.0, 0.011363636363636364, 0.011363636363636364],
  [18500.0, 0.011363636363636364, 0.07272727272727274],
  [9000.0, 0.07272727272727274, 0.045454545454545456],
  [4900.0, 0.045454545454545456, 0.045454545454545456],
  [10000.0, 0.045454545454545456, 0.056818181818181816],
  [25800.0, 0.056818181818181816, 0.07272727272727274],
  [7100.0, 0.07272727272727274, 0.011363636363636364],
  [20000.0, 0.011363636363636364, 0.011363636363636364],
  [18400.0, 0.011363636363636364, 0.03636363636363637],
  [32600.0, 0.03636363636363637, 0.011363636363636364],
  [26500.0, 0.011363636363636364, 0.07272727272727274],
  [13800.0, 0.07272727272727274, 0.08264462809917356],
  [56700.0, 0.08264462809917356, 0.0101010101010101],
  [25200.0, 0.0101010101010101, 0.045454545454545456],
  [2700.0, 0.045454545454545456, 0.045454545454545456],
  [29700.0, 0.045454545454545456, 0.045454545454545456],
  [11300.0, 0.045454545454545456, 0.06818181818181818],
  [17600.0, 0.06818181818181818, 0.045454545454545456],
  [100500.0, 0.045454545454545456, 0.018181818181818184],
  [9000.0, 0.018181818181818184, 0.018181818181818184],
  [7300.0, 0.018181818181818184, 0.018181818181818184],
  [2700.0, 0.018181818181818184, 0.011363636363636364],
  [45300.0, 0.011363636363636364, 0.07272727272727274],
  [8500.0, 0.07272727272727274, 0.011363636363636364],
  [25800.0, 0.011363636363636364, 0.03636363636363637],
  [9000.0, 0.03636363636363637, 0.03409090909090909],
  [3800.0, 0.03409090909090909, 0.0101010101010101],
  [18700.0, 0.0101010101010101, 0.06818181818181818],
  [3500.0, 0.06818181818181818, 0.06818181818181818],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
0.63 => p.pan;
2200.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
