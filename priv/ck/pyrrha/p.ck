[
  [5000.0, 0.0, 0.0],
  [13500.0, 0.0, 0.08333333333333333],
  [25700.0, 0.08333333333333333, 0.3333333333333333],
  [41700.0, 0.3333333333333333, 0.5],
  [8200.0, 0.5, 0.5],
  [12200.0, 0.5, 0.16666666666666666],
  [5900.0, 0.16666666666666666, 0.08333333333333333],
  [35900.0, 0.08333333333333333, 0.1],
  [25200.0, 0.1, 0.08333333333333333],
  [8000.0, 0.08333333333333333, 0.08333333333333333],
  [62300.0, 0.08333333333333333, 0.08333333333333333],
  [13000.0, 0.08333333333333333, 0.35714285714285715],
  [3100.0, 0.35714285714285715, 0.16666666666666666],
  [27900.0, 0.16666666666666666, 0.25],
  [1500.0, 0.25, 0.1],
  [9200.0, 0.1, 0.4],
  [127000.0, 0.4, 0.08333333333333333],
  [74800.0, 0.08333333333333333, 0.16666666666666666],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
0.19 => p.pan;
1600.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
