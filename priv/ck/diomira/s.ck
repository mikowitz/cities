[
  [14600.0, 0.0, 0.0],
  [3800.0, 0.0, 0.05263157894736842],
  [11600.0, 0.05263157894736842, 0.039473684210526314],
  [2000.0, 0.039473684210526314, 0.010526315789473684],
  [3500.0, 0.010526315789473684, 0.008771929824561403],
  [2800.0, 0.008771929824561403, 0.05263157894736842],
  [2200.0, 0.05263157894736842, 0.007518796992481203],
  [3100.0, 0.007518796992481203, 0.05263157894736842],
  [300.0, 0.05263157894736842, 0.05263157894736842],
  [2400.0, 0.05263157894736842, 0.007518796992481203],
  [5600.0, 0.007518796992481203, 0.05263157894736842],
  [9800.0, 0.05263157894736842, 0.03007518796992481],
  [10300.0, 0.03007518796992481, 0.05263157894736842],
  [3200.0, 0.05263157894736842, 0.042105263157894736],
  [11000.0, 0.042105263157894736, 0.05263157894736842],
  [4300.0, 0.05263157894736842, 0.022556390977443608],
  [300.0, 0.022556390977443608, 0.05263157894736842],
  [3000.0, 0.05263157894736842, 0.013157894736842105],
  [6700.0, 0.013157894736842105, 0.039473684210526314],
  [2800.0, 0.039473684210526314, 0.05263157894736842],
  [7200.0, 0.05263157894736842, 0.007518796992481203],
  [10000.0, 0.007518796992481203, 0.05263157894736842],
  [3500.0, 0.05263157894736842, 0.05263157894736842],
  [9400.0, 0.05263157894736842, 0.005847953216374269],
  [5900.0, 0.005847953216374269, 0.05263157894736842],
  [11500.0, 0.05263157894736842, 0.007518796992481203],
  [10000.0, 0.007518796992481203, 0.05263157894736842],
  [2200.0, 0.05263157894736842, 0.05263157894736842],
  [1300.0, 0.05263157894736842, 0.008771929824561403],
  [8400.0, 0.008771929824561403, 0.05263157894736842],
  [4000.0, 0.05263157894736842, 0.05263157894736842],
  [1900.0, 0.05263157894736842, 0.05263157894736842],
  [3000.0, 0.05263157894736842, 0.05263157894736842],
  [4600.0, 0.05263157894736842, 0.05263157894736842],
  [20800.0, 0.05263157894736842, 0.042105263157894736],
  [12400.0, 0.042105263157894736, 0.05263157894736842],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
0.41 => p.pan;
1900.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
