[
  [5700.0, 0.0, 0.0],
  [20900.0, 0.0, 0.20833333333333334],
  [7300.0, 0.20833333333333334, 0.2222222222222222],
  [6600.0, 0.2222222222222222, 0.26666666666666666],
  [2500.0, 0.26666666666666666, 0.2857142857142857],
  [200.0, 0.2857142857142857, 0.25],
  [4900.0, 0.25, 0.3333333333333333],
  [4000.0, 0.3333333333333333, 0.19999999999999998],
  [200.0, 0.19999999999999998, 0.19999999999999998],
  [700.0, 0.19999999999999998, 0.26666666666666666],
  [14700.0, 0.26666666666666666, 0.08333333333333333],
  [600.0, 0.08333333333333333, 0.25],
  [13000.0, 0.25, 0.13333333333333333],
  [5700.0, 0.13333333333333333, 0.26666666666666666],
  [9700.0, 0.26666666666666666, 0.19999999999999998],
  [200.0, 0.19999999999999998, 0.25],
  [1200.0, 0.25, 0.3333333333333333],
  [14900.0, 0.3333333333333333, 0.25],
  [5800.0, 0.25, 0.2857142857142857],
  [37700.0, 0.2857142857142857, 0.2222222222222222],
  [16200.0, 0.2222222222222222, 0.2857142857142857],
  [4900.0, 0.2857142857142857, 0.06666666666666667],
  [200.0, 0.06666666666666667, 0.1111111111111111],
  [28300.0, 0.1111111111111111, 0.14814814814814814],
  [200.0, 0.14814814814814814, 0.08333333333333333],
  [14900.0, 0.08333333333333333, 0.125],
  [200.0, 0.125, 0.19999999999999998],
  [8000.0, 0.19999999999999998, 0.26666666666666666],
  [14600.0, 0.26666666666666666, 0.06666666666666667],
  [10900.0, 0.06666666666666667, 0.13333333333333333],
  [9400.0, 0.13333333333333333, 0.05555555555555555],
  [12000.0, 0.05555555555555555, 0.1388888888888889],
  [14600.0, 0.1388888888888889, 0.3],
  [24100.0, 0.3, 0.14285714285714285],
  [200.0, 0.14285714285714285, 0.14285714285714285],
  [8700.0, 0.14285714285714285, 0.19047619047619047],
  [200.0, 0.19047619047619047, 0.19999999999999998],
  [500.0, 0.19999999999999998, 0.26666666666666666],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.11 => p.pan;
1200.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
