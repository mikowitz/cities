[
  [20700.0, 0.0, 0.0],
  [25400.0, 0.0, 0.125],
  [17000.0, 0.125, 0.2727272727272727],
  [300.0, 0.2727272727272727, 0.15],
  [4100.0, 0.15, 0.2],
  [10800.0, 0.2, 0.05555555555555555],
  [41500.0, 0.05555555555555555, 0.2],
  [62700.0, 0.2, 0.4166666666666667],
  [11700.0, 0.4166666666666667, 0.21428571428571427],
  [9600.0, 0.21428571428571427, 0.08333333333333333],
  [1800.0, 0.08333333333333333, 0.16666666666666666],
  [1200.0, 0.16666666666666666, 0.1],
  [4700.0, 0.1, 0.3],
  [27500.0, 0.3, 0.1],
  [18700.0, 0.1, 0.3],
  [15600.0, 0.3, 0.125],
  [1800.0, 0.125, 0.045454545454545456],
  [4800.0, 0.045454545454545456, 0.22727272727272727],
  [5700.0, 0.22727272727272727, 0.2727272727272727],
  [31400.0, 0.2727272727272727, 0.16666666666666666],
  [500.0, 0.16666666666666666, 0.1],
  [20800.0, 0.1, 0.3],
  [8800.0, 0.3, 0.16666666666666666],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
0.19 => p.pan;
1600.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
