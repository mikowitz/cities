[
  [7400.0, 0.0, 0.0],
  [1800.0, 0.0, 0.125],
  [11700.0, 0.125, 0.5],
  [6900.0, 0.5, 0.42857142857142855],
  [9500.0, 0.42857142857142855, 0.5],
  [17800.0, 0.5, 0.5],
  [11500.0, 0.5, 0.25],
  [2000.0, 0.25, 0.5],
  [2900.0, 0.5, 0.1111111111111111],
  [32000.0, 0.1111111111111111, 0.1],
  [7400.0, 0.1, 0.5],
  [3000.0, 0.5, 0.5],
  [1400.0, 0.5, 0.5],
  [2100.0, 0.5, 0.07142857142857142],
  [11700.0, 0.07142857142857142, 0.5],
  [1100.0, 0.5, 0.5],
  [3300.0, 0.5, 0.5],
  [8600.0, 0.5, 0.5],
  [17900.0, 0.5, 0.1],
  [6000.0, 0.1, 0.5],
  [5400.0, 0.5, 0.5],
  [1400.0, 0.5, 0.07142857142857142],
  [300.0, 0.07142857142857142, 0.35714285714285715],
  [2900.0, 0.35714285714285715, 0.5],
  [8000.0, 0.5, 0.5],
  [13500.0, 0.5, 0.1],
  [17000.0, 0.1, 0.5],
  [14500.0, 0.5, 0.5],
  [2500.0, 0.5, 0.5],
  [1300.0, 0.5, 0.5],
  [7100.0, 0.5, 0.045454545454545456],
  [4600.0, 0.045454545454545456, 0.1],
  [14600.0, 0.1, 0.5],
  [5000.0, 0.5, 0.42857142857142855],
  [11600.0, 0.42857142857142855, 0.5],
  [36300.0, 0.5, 0.5],
  [9700.0, 0.5, 0.16666666666666666],
  [2100.0, 0.16666666666666666, 0.07142857142857142],
  [10000.0, 0.07142857142857142, 0.5],
  [12400.0, 0.5, 0.5],
  [5300.0, 0.5, 0.5],
  [4200.0, 0.5, 0.4],
  [400.0, 0.4, 0.5],
  [7600.0, 0.5, 0.1],
  [6400.0, 0.1, 0.5],
  [5500.0, 0.5, 0.42857142857142855],
  [11000.0, 0.42857142857142855, 0.5],
  [2900.0, 0.5, 0.1],
  [3700.0, 0.1, 0.5],
  [7200.0, 0.5, 0.5],
  [1500.0, 0.5, 0.35714285714285715],
  [17200.0, 0.35714285714285715, 0.5],
  [2700.0, 0.5, 0.5],
  [6900.0, 0.5, 0.5],
  [3000.0, 0.5, 0.5],
  [3700.0, 0.5, 0.5],
  [17100.0, 0.5, 0.5],
  [2900.0, 0.5, 0.5],
  [3000.0, 0.5, 0.15],
  [1500.0, 0.15, 0.5],
  [6200.0, 0.5, 0.125],
  [10000.0, 0.125, 0.42857142857142855],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.7 => p.pan;
400.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
