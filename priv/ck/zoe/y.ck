[
  [11600.0, 0.0, 0.0],
  [4400.0, 0.0, 0.06666666666666667],
  [38900.0, 0.06666666666666667, 0.2],
  [1700.0, 0.2, 0.2],
  [5800.0, 0.2, 0.2],
  [39600.0, 0.2, 0.2],
  [3100.0, 0.2, 0.2],
  [17000.0, 0.2, 0.13333333333333333],
  [22900.0, 0.13333333333333333, 0.08571428571428572],
  [40600.0, 0.08571428571428572, 0.2],
  [6400.0, 0.2, 0.2],
  [16100.0, 0.2, 0.04],
  [2100.0, 0.04, 0.2],
  [6300.0, 0.2, 0.2],
  [38200.0, 0.2, 0.2],
  [6500.0, 0.2, 0.2],
  [200.0, 0.2, 0.2],
  [28800.0, 0.2, 0.06666666666666667],
  [3300.0, 0.06666666666666667, 0.2],
  [59000.0, 0.2, 0.05714285714285714],
  [54300.0, 0.05714285714285714, 0.2],
  [5100.0, 0.2, 0.2],
  [29000.0, 0.2, 0.2],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
0.85 => p.pan;
2500.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
