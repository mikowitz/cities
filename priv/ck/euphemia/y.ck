[
  [6800.0, 0.0, 0.0],
  [11000.0, 0.0, 0.2],
  [5700.0, 0.2, 0.06666666666666667],
  [20500.0, 0.06666666666666667, 0.2],
  [46800.0, 0.2, 0.2],
  [26400.0, 0.2, 0.2],
  [27500.0, 0.2, 0.2],
  [25600.0, 0.2, 0.2],
  [8300.0, 0.2, 0.2],
  [6000.0, 0.2, 0.06666666666666667],
  [27700.0, 0.06666666666666667, 0.1],
  [5800.0, 0.1, 0.05],
  [29000.0, 0.05, 0.03333333333333333],
  [11400.0, 0.03333333333333333, 0.08],
  [8200.0, 0.08, 0.06666666666666667],
  [1800.0, 0.06666666666666667, 0.2],
  [10400.0, 0.2, 0.2],
  [37400.0, 0.2, 0.2],
  [45900.0, 0.2, 0.15],
  [11200.0, 0.15, 0.06666666666666667],
  [1700.0, 0.06666666666666667, 0.2],
  [11100.0, 0.2, 0.06666666666666667],
  [10800.0, 0.06666666666666667, 0.11428571428571428],
  [9500.0, 0.11428571428571428, 0.06666666666666667],
  [6800.0, 0.06666666666666667, 0.05],
  [1100.0, 0.05, 0.2],
  [10300.0, 0.2, 0.05],
  [12500.0, 0.05, 0.05],
  [8700.0, 0.05, 0.05],
  [14000.0, 0.05, 0.05],
  [4300.0, 0.05, 0.2],
  [5600.0, 0.2, 0.2],
  [5800.0, 0.2, 0.2],
  [3200.0, 0.2, 0.2],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
0.85 => p.pan;
2500.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
