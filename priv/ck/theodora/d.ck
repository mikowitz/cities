[
  [11600.0, 0.0, 0.0],
  [4300.0, 0.0, 0.5],
  [23000.0, 0.5, 0.3125],
  [7600.0, 0.3125, 0.5],
  [5200.0, 0.5, 0.5],
  [3800.0, 0.5, 0.5],
  [17500.0, 0.5, 0.5],
  [1500.0, 0.5, 0.5],
  [3600.0, 0.5, 0.2857142857142857],
  [13400.0, 0.2857142857142857, 0.5],
  [8900.0, 0.5, 0.2857142857142857],
  [31400.0, 0.2857142857142857, 0.5],
  [16400.0, 0.5, 0.2222222222222222],
  [4600.0, 0.2222222222222222, 0.5],
  [7200.0, 0.5, 0.5],
  [700.0, 0.5, 0.5],
  [10300.0, 0.5, 0.125],
  [10600.0, 0.125, 0.5],
  [7300.0, 0.5, 0.5],
  [15800.0, 0.5, 0.3125],
  [38900.0, 0.3125, 0.038461538461538464],
  [31100.0, 0.038461538461538464, 0.5],
  [7500.0, 0.5, 0.21428571428571427],
  [32300.0, 0.21428571428571427, 0.5],
  [18200.0, 0.5, 0.5],
  [6700.0, 0.5, 0.3125],
  [3900.0, 0.3125, 0.5],
  [2900.0, 0.5, 0.3333333333333333],
  [17500.0, 0.3333333333333333, 0.3333333333333333],
  [14700.0, 0.3333333333333333, 0.2222222222222222],
  [200.0, 0.2222222222222222, 0.5],
  [1300.0, 0.5, 0.0625],
  [25800.0, 0.0625, 0.5],
  [2300.0, 0.5, 0.35714285714285715],
  [10400.0, 0.35714285714285715, 0.5],
  [10600.0, 0.5, 0.5],
  [8800.0, 0.5, 0.5],
  [7300.0, 0.5, 0.5],
  [2400.0, 0.5, 0.5],
  [4300.0, 0.5, 0.3],
  [3800.0, 0.3, 0.5],
  [15300.0, 0.5, 0.5],
  [2900.0, 0.5, 0.5],
  [6600.0, 0.5, 0.08333333333333333],
  [4600.0, 0.08333333333333333, 0.5],
  [7200.0, 0.5, 0.2777777777777778],
  [13900.0, 0.2777777777777778, 0.5],
  [11000.0, 0.5, 0.5],
  [9200.0, 0.5, 0.2777777777777778],
  [33100.0, 0.2777777777777778, 0.5],
  [9000.0, 0.5, 0.5],
  [9300.0, 0.5, 0.25],
  [1400.0, 0.25, 0.5],
  [1100.0, 0.5, 0.07142857142857142],
  [56000.0, 0.07142857142857142, 0.5],
  [200.0, 0.5, 0.5],
  [13900.0, 0.5, 0.05],
  [1400.0, 0.05, 0.21428571428571427],
  [11400.0, 0.21428571428571427, 0.42857142857142855],
  [12500.0, 0.42857142857142855, 0.07142857142857142],
  [25000.0, 0.07142857142857142, 0.25],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.7 => p.pan;
400.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
