[
  [42900.0, 0.0, 0.0],
  [14800.0, 0.0, 0.2],
  [16300.0, 0.2, 0.07142857142857142],
  [2000.0, 0.07142857142857142, 0.1],
  [68100.0, 0.1, 0.16666666666666666],
  [16500.0, 0.16666666666666666, 0.1],
  [10700.0, 0.1, 0.07142857142857142],
  [87000.0, 0.07142857142857142, 0.2777777777777778],
  [24600.0, 0.2777777777777778, 0.16666666666666666],
  [24700.0, 0.16666666666666666, 0.1],
  [42400.0, 0.1, 0.4166666666666667],
  [7800.0, 0.4166666666666667, 0.07142857142857142],
  [11600.0, 0.07142857142857142, 0.08333333333333333],
  [67600.0, 0.08333333333333333, 0.125],
  [23100.0, 0.125, 0.16666666666666666],
  [17700.0, 0.16666666666666666, 0.1],
  [7700.0, 0.1, 0.08333333333333333],
  [39900.0, 0.08333333333333333, 0.1],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.85 => p.pan;
200.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
