[
  [10400.0, 0.0, 0.0],
  [25500.0, 0.0, 0.05357142857142857],
  [3200.0, 0.05357142857142857, 0.09523809523809523],
  [13700.0, 0.09523809523809523, 0.10204081632653061],
  [1500.0, 0.10204081632653061, 0.02040816326530612],
  [1100.0, 0.02040816326530612, 0.061224489795918366],
  [5300.0, 0.061224489795918366, 0.10204081632653061],
  [10300.0, 0.10204081632653061, 0.10714285714285714],
  [10500.0, 0.10714285714285714, 0.04081632653061224],
  [13000.0, 0.04081632653061224, 0.10714285714285714],
  [7500.0, 0.10714285714285714, 0.028571428571428574],
  [17100.0, 0.028571428571428574, 0.07142857142857142],
  [2500.0, 0.07142857142857142, 0.07142857142857142],
  [13900.0, 0.07142857142857142, 0.09523809523809523],
  [15600.0, 0.09523809523809523, 0.09523809523809523],
  [4100.0, 0.09523809523809523, 0.10714285714285714],
  [16600.0, 0.10714285714285714, 0.07142857142857142],
  [31500.0, 0.07142857142857142, 0.04081632653061224],
  [54000.0, 0.04081632653061224, 0.023809523809523808],
  [28700.0, 0.023809523809523808, 0.05357142857142857],
  [11000.0, 0.05357142857142857, 0.11904761904761905],
  [30400.0, 0.11904761904761905, 0.04081632653061224],
  [13200.0, 0.04081632653061224, 0.07142857142857142],
  [9900.0, 0.07142857142857142, 0.10714285714285714],
  [17000.0, 0.10714285714285714, 0.07142857142857142],
  [4800.0, 0.07142857142857142, 0.11904761904761905],
  [1900.0, 0.11904761904761905, 0.10204081632653061],
  [89500.0, 0.10204081632653061, 0.04081632653061224],
  [6500.0, 0.04081632653061224, 0.09523809523809523],
  [37600.0, 0.09523809523809523, 0.09523809523809523],
  [22500.0, 0.09523809523809523, 0.07142857142857142],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
0.56 => p.pan;
2100.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
