[
  [26400.0, 0.0, 0.0],
  [3900.0, 0.0, 0.3888888888888889],
  [22000.0, 0.3888888888888889, 0.35714285714285715],
  [24900.0, 0.35714285714285715, 0.05555555555555555],
  [8800.0, 0.05555555555555555, 0.3181818181818182],
  [8000.0, 0.3181818181818182, 0.0625],
  [53800.0, 0.0625, 0.15],
  [19400.0, 0.15, 0.4],
  [1200.0, 0.4, 0.1],
  [1800.0, 0.1, 0.3],
  [3200.0, 0.3, 0.07142857142857142],
  [23200.0, 0.07142857142857142, 0.07142857142857142],
  [30000.0, 0.07142857142857142, 0.1],
  [28100.0, 0.1, 0.05555555555555555],
  [3200.0, 0.05555555555555555, 0.0625],
  [41300.0, 0.0625, 0.1],
  [1500.0, 0.1, 0.045454545454545456],
  [35000.0, 0.045454545454545456, 0.18181818181818182],
  [3500.0, 0.18181818181818182, 0.16666666666666666],
  [26900.0, 0.16666666666666666, 0.25],
  [3400.0, 0.25, 0.125],
  [5300.0, 0.125, 0.15],
  [10100.0, 0.15, 0.038461538461538464],
  [29500.0, 0.038461538461538464, 0.045454545454545456],
  [38100.0, 0.045454545454545456, 0.18181818181818182],
  [17300.0, 0.18181818181818182, 0.5],
  [106000.0, 0.5, 0.0625],
  [88700.0, 0.0625, 0.1],
  [35000.0, 0.1, 0.1],
  [97000.0, 0.1, 0.2],
  [13400.0, 0.2, 0.0625],
  [22600.0, 0.0625, 0.14285714285714285],
  [33100.0, 0.14285714285714285, 0.21428571428571427],
  [2000.0, 0.21428571428571427, 0.125],
  [20700.0, 0.125, 0.3333333333333333],
  [3800.0, 0.3333333333333333, 0.25],
  [15500.0, 0.25, 0.1111111111111111],
  [16200.0, 0.1111111111111111, 0.25],
  [2200.0, 0.25, 0.07142857142857142],
  [13300.0, 0.07142857142857142, 0.42857142857142855],
  [27100.0, 0.42857142857142855, 0.3],
  [52400.0, 0.3, 0.25],
  [11800.0, 0.25, 0.07142857142857142],
  [300.0, 0.07142857142857142, 0.2857142857142857],
  [19300.0, 0.2857142857142857, 0.35714285714285715],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
0.19 => p.pan;
1600.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
