[
  [44500.0, 0.0, 0.0],
  [37700.0, 0.0, 0.2],
  [13700.0, 0.2, 0.2],
  [17000.0, 0.2, 0.2],
  [29600.0, 0.2, 0.2],
  [37000.0, 0.2, 0.2],
  [21500.0, 0.2, 0.06666666666666667],
  [6200.0, 0.06666666666666667, 0.2],
  [10800.0, 0.2, 0.14545454545454545],
  [4100.0, 0.14545454545454545, 0.04444444444444444],
  [56900.0, 0.04444444444444444, 0.05714285714285714],
  [7400.0, 0.05714285714285714, 0.2],
  [2300.0, 0.2, 0.05],
  [5500.0, 0.05, 0.1],
  [4100.0, 0.1, 0.06666666666666667],
  [3700.0, 0.06666666666666667, 0.2],
  [6500.0, 0.2, 0.04],
  [200.0, 0.04, 0.2],
  [53900.0, 0.2, 0.04],
  [106400.0, 0.04, 0.1],
  [25300.0, 0.1, 0.06666666666666667],
  [4100.0, 0.06666666666666667, 0.2],
  [37400.0, 0.2, 0.2],
  [2100.0, 0.2, 0.15],
  [12900.0, 0.15, 0.125],
  [17000.0, 0.125, 0.2],
  [5200.0, 0.2, 0.2],
  [16400.0, 0.2, 0.2],
  [14000.0, 0.2, 0.06666666666666667],
  [3000.0, 0.06666666666666667, 0.2],
  [15000.0, 0.2, 0.2],
  [9100.0, 0.2, 0.06666666666666667],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
0.85 => p.pan;
2500.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
