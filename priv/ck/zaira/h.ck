[
  [5900.0, 0.0, 0.0],
  [5500.0, 0.0, 0.25],
  [12500.0, 0.25, 0.2],
  [2000.0, 0.2, 0.125],
  [8100.0, 0.125, 0.5],
  [6100.0, 0.5, 0.16666666666666666],
  [14500.0, 0.16666666666666666, 0.3333333333333333],
  [3500.0, 0.3333333333333333, 0.3333333333333333],
  [6800.0, 0.3333333333333333, 0.3333333333333333],
  [8700.0, 0.3333333333333333, 0.25],
  [8600.0, 0.25, 0.3333333333333333],
  [4000.0, 0.3333333333333333, 0.25],
  [7500.0, 0.25, 0.3333333333333333],
  [3100.0, 0.3333333333333333, 0.2857142857142857],
  [7800.0, 0.2857142857142857, 0.3333333333333333],
  [7500.0, 0.3333333333333333, 0.25],
  [4300.0, 0.25, 0.38461538461538464],
  [10000.0, 0.38461538461538464, 0.3333333333333333],
  [5800.0, 0.3333333333333333, 0.3333333333333333],
  [600.0, 0.3333333333333333, 0.3333333333333333],
  [2100.0, 0.3333333333333333, 0.08333333333333333],
  [5100.0, 0.08333333333333333, 0.4166666666666667],
  [5800.0, 0.4166666666666667, 0.3333333333333333],
  [4600.0, 0.3333333333333333, 0.3333333333333333],
  [11400.0, 0.3333333333333333, 0.08333333333333333],
  [8600.0, 0.08333333333333333, 0.3333333333333333],
  [3700.0, 0.3333333333333333, 0.3333333333333333],
  [9200.0, 0.3333333333333333, 0.3333333333333333],
  [3200.0, 0.3333333333333333, 0.3333333333333333],
  [3900.0, 0.3333333333333333, 0.25],
  [3900.0, 0.25, 0.3333333333333333],
  [10800.0, 0.3333333333333333, 0.3333333333333333],
  [600.0, 0.3333333333333333, 0.3333333333333333],
  [2100.0, 0.3333333333333333, 0.08333333333333333],
  [1600.0, 0.08333333333333333, 0.4166666666666667],
  [7200.0, 0.4166666666666667, 0.25],
  [2100.0, 0.25, 0.3333333333333333],
  [5000.0, 0.3333333333333333, 0.3333333333333333],
  [7900.0, 0.3333333333333333, 0.3333333333333333],
  [18500.0, 0.3333333333333333, 0.3333333333333333],
  [5100.0, 0.3333333333333333, 0.25],
  [4300.0, 0.25, 0.3333333333333333],
  [11500.0, 0.3333333333333333, 0.3333333333333333],
  [1600.0, 0.3333333333333333, 0.2],
  [500.0, 0.2, 0.5],
  [8200.0, 0.5, 0.16666666666666666],
  [2900.0, 0.16666666666666666, 0.3333333333333333],
  [2100.0, 0.3333333333333333, 0.3333333333333333],
  [4200.0, 0.3333333333333333, 0.25],
  [6600.0, 0.25, 0.3333333333333333],
  [5200.0, 0.3333333333333333, 0.3333333333333333],
  [2000.0, 0.3333333333333333, 0.3333333333333333],
  [3200.0, 0.3333333333333333, 0.5],
  [1000.0, 0.5, 0.3333333333333333],
  [6000.0, 0.3333333333333333, 0.2],
  [11100.0, 0.2, 0.3333333333333333],
  [3500.0, 0.3333333333333333, 0.3],
  [600.0, 0.3, 0.3333333333333333],
  [4000.0, 0.3333333333333333, 0.05555555555555555],
  [2700.0, 0.05555555555555555, 0.5],
  [3400.0, 0.5, 0.3333333333333333],
  [4400.0, 0.3333333333333333, 0.3333333333333333],
  [5300.0, 0.3333333333333333, 0.3333333333333333],
  [3300.0, 0.3333333333333333, 0.3333333333333333],
  [13500.0, 0.3333333333333333, 0.3333333333333333],
  [6100.0, 0.3333333333333333, 0.16666666666666666],
  [1300.0, 0.16666666666666666, 0.35714285714285715],
  [3000.0, 0.35714285714285715, 0.2],
  [2200.0, 0.2, 0.3333333333333333],
  [10500.0, 0.3333333333333333, 0.25],
  [25300.0, 0.25, 0.3333333333333333],
  [10100.0, 0.3333333333333333, 0.16666666666666666],
  [2300.0, 0.16666666666666666, 0.3333333333333333],
  [15900.0, 0.3333333333333333, 0.07142857142857142],
  [3300.0, 0.07142857142857142, 0.3333333333333333],
  [7400.0, 0.3333333333333333, 0.125],
  [4900.0, 0.125, 0.3333333333333333],
  [3700.0, 0.3333333333333333, 0.3333333333333333],
  [6100.0, 0.3333333333333333, 0.3333333333333333],
  [3600.0, 0.3333333333333333, 0.3333333333333333],
  [5600.0, 0.3333333333333333, 0.3333333333333333],
  [2400.0, 0.3333333333333333, 0.3333333333333333],
  [4400.0, 0.3333333333333333, 0.3333333333333333],
  [2300.0, 0.3333333333333333, 0.3333333333333333],
  [5900.0, 0.3333333333333333, 0.2222222222222222],
  [2300.0, 0.2222222222222222, 0.3333333333333333],
  [14600.0, 0.3333333333333333, 0.3333333333333333],
  [2900.0, 0.3333333333333333, 0.5],
  [8900.0, 0.5, 0.3888888888888889],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.41 => p.pan;
800.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
