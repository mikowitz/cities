[
  [60000.0, 0.0, 0.0],
  [4100.0, 0.0, 0.3076923076923077],
  [15800.0, 0.3076923076923077, 0.3333333333333333],
  [2200.0, 0.3333333333333333, 0.5],
  [43100.0, 0.5, 0.4],
  [3400.0, 0.4, 0.05],
  [7600.0, 0.05, 0.5],
  [17600.0, 0.5, 0.5],
  [11200.0, 0.5, 0.4583333333333333],
  [1000.0, 0.4583333333333333, 0.5],
  [21800.0, 0.5, 0.4],
  [22300.0, 0.4, 0.5],
  [11300.0, 0.5, 0.5],
  [25300.0, 0.5, 0.5],
  [6600.0, 0.5, 0.5],
  [19700.0, 0.5, 0.5],
  [3200.0, 0.5, 0.35714285714285715],
  [4500.0, 0.35714285714285715, 0.5],
  [42800.0, 0.5, 0.5],
  [1100.0, 0.5, 0.2777777777777778],
  [10700.0, 0.2777777777777778, 0.5],
  [9700.0, 0.5, 0.25],
  [500.0, 0.25, 0.125],
  [5300.0, 0.125, 0.5],
  [4400.0, 0.5, 0.5],
  [18400.0, 0.5, 0.2],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.7 => p.pan;
400.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
