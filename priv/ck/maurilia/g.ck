[
  [76600.0, 0.0, 0.0],
  [65700.0, 0.0, 0.14285714285714285],
  [13400.0, 0.14285714285714285, 0.11904761904761905],
  [5400.0, 0.11904761904761905, 0.07142857142857142],
  [15300.0, 0.07142857142857142, 0.10204081632653061],
  [3700.0, 0.10204081632653061, 0.14285714285714285],
  [47200.0, 0.14285714285714285, 0.03571428571428571],
  [49500.0, 0.03571428571428571, 0.028571428571428574],
  [600.0, 0.028571428571428574, 0.14285714285714285],
  [24300.0, 0.14285714285714285, 0.017857142857142856],
  [22300.0, 0.017857142857142856, 0.11111111111111112],
  [13300.0, 0.11111111111111112, 0.12244897959183673],
  [10200.0, 0.12244897959183673, 0.11111111111111112],
  [35900.0, 0.11111111111111112, 0.14285714285714285],
  [6700.0, 0.14285714285714285, 0.14285714285714285],
  [15300.0, 0.14285714285714285, 0.14285714285714285],
  [42200.0, 0.14285714285714285, 0.14285714285714285],
  [11400.0, 0.14285714285714285, 0.03571428571428571],
  [98300.0, 0.03571428571428571, 0.03571428571428571],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.48 => p.pan;
700.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
