[
  [1400.0, 0.0, 0.0],
  [6100.0, 0.0, 0.5],
  [102400.0, 0.5, 0.5],
  [500.0, 0.5, 0.5],
  [2700.0, 0.5, 0.1],
  [2000.0, 0.1, 0.5],
  [69400.0, 0.5, 0.2857142857142857],
  [1400.0, 0.2857142857142857, 0.5],
  [2400.0, 0.5, 0.05555555555555555],
  [11800.0, 0.05555555555555555, 0.5],
  [26800.0, 0.5, 0.375],
  [6900.0, 0.375, 0.5],
  [17000.0, 0.5, 0.3],
  [29500.0, 0.3, 0.5],
  [12200.0, 0.5, 0.2857142857142857],
  [20200.0, 0.2857142857142857, 0.5],
  [16900.0, 0.5, 0.4],
  [5000.0, 0.4, 0.5],
  [45600.0, 0.5, 0.5],
  [9800.0, 0.5, 0.5],
  [16100.0, 0.5, 0.1],
  [1400.0, 0.1, 0.25],
  [24700.0, 0.25, 0.5],
  [7200.0, 0.5, 0.5],
  [2900.0, 0.5, 0.2777777777777778],
  [6000.0, 0.2777777777777778, 0.5],
  [4100.0, 0.5, 0.4166666666666667],
  [9200.0, 0.4166666666666667, 0.5],
  [17300.0, 0.5, 0.5],
  [8500.0, 0.5, 0.5],
  [6300.0, 0.5, 0.5],
  [9600.0, 0.5, 0.3],
  [7100.0, 0.3, 0.5],
  [200.0, 0.5, 0.5],
  [5900.0, 0.5, 0.038461538461538464],
  [200.0, 0.038461538461538464, 0.5],
  [3700.0, 0.5, 0.045454545454545456],
  [9900.0, 0.045454545454545456, 0.5],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.7 => p.pan;
400.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
