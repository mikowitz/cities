[
  [2400.0, 0.0, 0.0],
  [9200.0, 0.0, 0.16666666666666666],
  [3300.0, 0.16666666666666666, 0.16666666666666666],
  [8300.0, 0.16666666666666666, 0.3333333333333333],
  [16000.0, 0.3333333333333333, 0.2],
  [5300.0, 0.2, 0.3333333333333333],
  [4900.0, 0.3333333333333333, 0.3333333333333333],
  [5200.0, 0.3333333333333333, 0.3333333333333333],
  [3700.0, 0.3333333333333333, 0.5],
  [8700.0, 0.5, 0.16666666666666666],
  [16200.0, 0.16666666666666666, 0.3333333333333333],
  [9000.0, 0.3333333333333333, 0.3333333333333333],
  [600.0, 0.3333333333333333, 0.3333333333333333],
  [6600.0, 0.3333333333333333, 0.08333333333333333],
  [4200.0, 0.08333333333333333, 0.2],
  [4100.0, 0.2, 0.2857142857142857],
  [5000.0, 0.2857142857142857, 0.0625],
  [12600.0, 0.0625, 0.0625],
  [8300.0, 0.0625, 0.35714285714285715],
  [800.0, 0.35714285714285715, 0.3333333333333333],
  [2700.0, 0.3333333333333333, 0.16666666666666666],
  [3300.0, 0.16666666666666666, 0.25],
  [5600.0, 0.25, 0.3333333333333333],
  [3900.0, 0.3333333333333333, 0.3333333333333333],
  [1600.0, 0.3333333333333333, 0.2],
  [10900.0, 0.2, 0.5],
  [12400.0, 0.5, 0.3333333333333333],
  [7400.0, 0.3333333333333333, 0.125],
  [2300.0, 0.125, 0.0625],
  [6500.0, 0.0625, 0.08333333333333333],
  [900.0, 0.08333333333333333, 0.35714285714285715],
  [32100.0, 0.35714285714285715, 0.07142857142857142],
  [11300.0, 0.07142857142857142, 0.14285714285714285],
  [8600.0, 0.14285714285714285, 0.1111111111111111],
  [6900.0, 0.1111111111111111, 0.09090909090909091],
  [12400.0, 0.09090909090909091, 0.5],
  [2300.0, 0.5, 0.3333333333333333],
  [6300.0, 0.3333333333333333, 0.3333333333333333],
  [11500.0, 0.3333333333333333, 0.13636363636363635],
  [3500.0, 0.13636363636363635, 0.25],
  [4900.0, 0.25, 0.3],
  [2400.0, 0.3, 0.25],
  [7600.0, 0.25, 0.3333333333333333],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.41 => p.pan;
800.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
