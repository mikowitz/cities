[
  [23400.0, 0.0, 0.0],
  [9500.0, 0.0, 0.2],
  [3200.0, 0.2, 0.06666666666666667],
  [16500.0, 0.06666666666666667, 0.2],
  [27800.0, 0.2, 0.17777777777777776],
  [11000.0, 0.17777777777777776, 0.2],
  [7500.0, 0.2, 0.06666666666666667],
  [59300.0, 0.06666666666666667, 0.2],
  [118400.0, 0.2, 0.11428571428571428],
  [3100.0, 0.11428571428571428, 0.2],
  [9900.0, 0.2, 0.1],
  [49300.0, 0.1, 0.175],
  [12600.0, 0.175, 0.2],
  [40000.0, 0.2, 0.2],
  [22700.0, 0.2, 0.2],
  [12700.0, 0.2, 0.2],
  [71500.0, 0.2, 0.2],
  [22900.0, 0.2, 0.2],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
0.85 => p.pan;
2500.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
