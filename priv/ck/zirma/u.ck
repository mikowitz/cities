[
  [5200.0, 0.0, 0.0],
  [27600.0, 0.0, 0.06349206349206349],
  [8200.0, 0.06349206349206349, 0.07142857142857142],
  [24700.0, 0.07142857142857142, 0.04081632653061224],
  [4500.0, 0.04081632653061224, 0.07142857142857142],
  [40500.0, 0.07142857142857142, 0.07142857142857142],
  [5700.0, 0.07142857142857142, 0.03571428571428571],
  [11100.0, 0.03571428571428571, 0.08571428571428572],
  [19100.0, 0.08571428571428572, 0.07142857142857142],
  [26800.0, 0.07142857142857142, 0.06349206349206349],
  [14300.0, 0.06349206349206349, 0.06349206349206349],
  [38600.0, 0.06349206349206349, 0.08928571428571429],
  [4700.0, 0.08928571428571429, 0.012987012987012988],
  [12600.0, 0.012987012987012988, 0.1168831168831169],
  [7900.0, 0.1168831168831169, 0.031746031746031744],
  [94600.0, 0.031746031746031744, 0.03571428571428571],
  [20300.0, 0.03571428571428571, 0.06349206349206349],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
0.56 => p.pan;
2100.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
