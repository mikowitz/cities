[
  [2200.0, 0.0, 0.0],
  [37500.0, 0.0, 0.05357142857142857],
  [8600.0, 0.05357142857142857, 0.03571428571428571],
  [10900.0, 0.03571428571428571, 0.07142857142857142],
  [15900.0, 0.07142857142857142, 0.09523809523809523],
  [16100.0, 0.09523809523809523, 0.08571428571428572],
  [28700.0, 0.08571428571428572, 0.031746031746031744],
  [21600.0, 0.031746031746031744, 0.07142857142857142],
  [2900.0, 0.07142857142857142, 0.09523809523809523],
  [3700.0, 0.09523809523809523, 0.07142857142857142],
  [48300.0, 0.07142857142857142, 0.12244897959183673],
  [15500.0, 0.12244897959183673, 0.05357142857142857],
  [48700.0, 0.05357142857142857, 0.05357142857142857],
  [11200.0, 0.05357142857142857, 0.05357142857142857],
  [8000.0, 0.05357142857142857, 0.08571428571428572],
  [2400.0, 0.08571428571428572, 0.125],
  [7700.0, 0.125, 0.08571428571428572],
  [8700.0, 0.08571428571428572, 0.05357142857142857],
  [24600.0, 0.05357142857142857, 0.015873015873015872],
  [48600.0, 0.015873015873015872, 0.10204081632653061],
  [14300.0, 0.10204081632653061, 0.028571428571428574],
  [10700.0, 0.028571428571428574, 0.12244897959183673],
  [2300.0, 0.12244897959183673, 0.12244897959183673],
  [39400.0, 0.12244897959183673, 0.05494505494505495],
  [6900.0, 0.05494505494505495, 0.08928571428571429],
  [17700.0, 0.08928571428571429, 0.09523809523809523],
  [4200.0, 0.09523809523809523, 0.12244897959183673],
  [49700.0, 0.12244897959183673, 0.031746031746031744],
  [10800.0, 0.031746031746031744, 0.07142857142857142],
  [6900.0, 0.07142857142857142, 0.05357142857142857],
  [14100.0, 0.05357142857142857, 0.09523809523809523],
  [8500.0, 0.09523809523809523, 0.05357142857142857],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
0.56 => p.pan;
2100.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
