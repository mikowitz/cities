[
  [19700.0, 0.0, 0.0],
  [8700.0, 0.0, 0.09090909090909091],
  [44400.0, 0.09090909090909091, 0.09090909090909091],
  [8000.0, 0.09090909090909091, 0.0606060606060606],
  [42100.0, 0.0606060606060606, 0.0606060606060606],
  [1600.0, 0.0606060606060606, 0.0606060606060606],
  [47400.0, 0.0606060606060606, 0.06818181818181818],
  [24600.0, 0.06818181818181818, 0.06493506493506494],
  [18400.0, 0.06493506493506494, 0.06818181818181818],
  [65500.0, 0.06818181818181818, 0.09090909090909091],
  [72800.0, 0.09090909090909091, 0.051948051948051945],
  [39900.0, 0.051948051948051945, 0.0606060606060606],
  [42800.0, 0.0606060606060606, 0.01515151515151515],
  [61800.0, 0.01515151515151515, 0.018181818181818184],
  [33500.0, 0.018181818181818184, 0.09090909090909091],
  [40500.0, 0.09090909090909091, 0.0404040404040404],
  [131400.0, 0.0404040404040404, 0.06818181818181818],
  [6800.0, 0.06818181818181818, 0.007575757575757575],
  [37000.0, 0.007575757575757575, 0.056818181818181816],
  [24500.0, 0.056818181818181816, 0.018181818181818184],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.19 => p.pan;
1100.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
