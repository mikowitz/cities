[
  [40900.0, 0.0, 0.0],
  [72100.0, 0.0, 0.06818181818181818],
  [58600.0, 0.06818181818181818, 0.05454545454545454],
  [23200.0, 0.05454545454545454, 0.03636363636363637],
  [40600.0, 0.03636363636363637, 0.05454545454545454],
  [6700.0, 0.05454545454545454, 0.012987012987012986],
  [6800.0, 0.012987012987012986, 0.045454545454545456],
  [9300.0, 0.045454545454545456, 0.05454545454545454],
  [26200.0, 0.05454545454545454, 0.03636363636363637],
  [21200.0, 0.03636363636363637, 0.05454545454545454],
  [5500.0, 0.05454545454545454, 0.024793388429752063],
  [26100.0, 0.024793388429752063, 0.05454545454545454],
  [4500.0, 0.05454545454545454, 0.06493506493506494],
  [195700.0, 0.06493506493506494, 0.045454545454545456],
  [31100.0, 0.045454545454545456, 0.025974025974025972],
  [11500.0, 0.025974025974025972, 0.045454545454545456],
  [48100.0, 0.045454545454545456, 0.0303030303030303],
  [18600.0, 0.0303030303030303, 0.03636363636363637],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
0.63 => p.pan;
2200.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
