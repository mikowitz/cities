[
  [3200.0, 0.0, 0.0],
  [2700.0, 0.0, 0.5],
  [11300.0, 0.5, 0.375],
  [19800.0, 0.375, 0.42857142857142855],
  [13400.0, 0.42857142857142855, 0.5],
  [26700.0, 0.5, 0.3333333333333333],
  [4700.0, 0.3333333333333333, 0.5],
  [10000.0, 0.5, 0.16666666666666666],
  [6500.0, 0.16666666666666666, 0.4],
  [5300.0, 0.4, 0.5],
  [50700.0, 0.5, 0.5],
  [22700.0, 0.5, 0.42857142857142855],
  [5100.0, 0.42857142857142855, 0.42857142857142855],
  [9600.0, 0.42857142857142855, 0.16666666666666666],
  [2000.0, 0.16666666666666666, 0.5],
  [17000.0, 0.5, 0.2857142857142857],
  [6200.0, 0.2857142857142857, 0.16666666666666666],
  [15500.0, 0.16666666666666666, 0.5],
  [10200.0, 0.5, 0.16666666666666666],
  [4000.0, 0.16666666666666666, 0.125],
  [5900.0, 0.125, 0.05],
  [5200.0, 0.05, 0.5],
  [28000.0, 0.5, 0.08333333333333333],
  [14400.0, 0.08333333333333333, 0.5],
  [7000.0, 0.5, 0.375],
  [12700.0, 0.375, 0.07142857142857142],
  [4800.0, 0.07142857142857142, 0.22727272727272727],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.7 => p.pan;
400.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
