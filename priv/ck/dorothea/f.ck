[
  [5300.0, 0.0, 0.0],
  [8300.0, 0.0, 0.3333333333333333],
  [7300.0, 0.3333333333333333, 0.3333333333333333],
  [11200.0, 0.3333333333333333, 0.08333333333333333],
  [4500.0, 0.08333333333333333, 0.08333333333333333],
  [28500.0, 0.08333333333333333, 0.041666666666666664],
  [900.0, 0.041666666666666664, 0.06666666666666667],
  [65800.0, 0.06666666666666667, 0.08333333333333333],
  [10500.0, 0.08333333333333333, 0.3333333333333333],
  [20900.0, 0.3333333333333333, 0.3333333333333333],
  [28800.0, 0.3333333333333333, 0.05555555555555555],
  [3200.0, 0.05555555555555555, 0.08333333333333333],
  [27100.0, 0.08333333333333333, 0.06666666666666667],
  [28100.0, 0.06666666666666667, 0.05555555555555555],
  [34800.0, 0.05555555555555555, 0.06666666666666667],
  [21400.0, 0.06666666666666667, 0.08333333333333333],
  [23500.0, 0.08333333333333333, 0.20833333333333334],
  [8500.0, 0.20833333333333334, 0.037037037037037035],
  [24900.0, 0.037037037037037035, 0.16666666666666666],
  [34900.0, 0.16666666666666666, 0.041666666666666664],
  [6100.0, 0.041666666666666664, 0.3333333333333333],
  [13100.0, 0.3333333333333333, 0.16666666666666666],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.56 => p.pan;
600.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
