[
  [37600.0, 0.0, 0.0],
  [1800.0, 0.0, 0.0625],
  [36600.0, 0.0625, 0.3125],
  [11000.0, 0.3125, 0.16666666666666666],
  [300.0, 0.16666666666666666, 0.21428571428571427],
  [17500.0, 0.21428571428571427, 0.2857142857142857],
  [16000.0, 0.2857142857142857, 0.25],
  [72300.0, 0.25, 0.1],
  [1800.0, 0.1, 0.045454545454545456],
  [52500.0, 0.045454545454545456, 0.22727272727272727],
  [3400.0, 0.22727272727272727, 0.05555555555555555],
  [15000.0, 0.05555555555555555, 0.14285714285714285],
  [50900.0, 0.14285714285714285, 0.0625],
  [11500.0, 0.0625, 0.0625],
  [15600.0, 0.0625, 0.0625],
  [20200.0, 0.0625, 0.08333333333333333],
  [7800.0, 0.08333333333333333, 0.1],
  [7000.0, 0.1, 0.1],
  [15300.0, 0.1, 0.4],
  [17400.0, 0.4, 0.15],
  [16500.0, 0.15, 0.15],
  [87300.0, 0.15, 0.3333333333333333],
  [300.0, 0.3333333333333333, 0.21428571428571427],
  [39300.0, 0.21428571428571427, 0.2857142857142857],
  [2900.0, 0.2857142857142857, 0.1],
  [30100.0, 0.1, 0.1],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
0.19 => p.pan;
1600.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
