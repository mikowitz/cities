[
  [39500.0, 0.0, 0.0],
  [1600.0, 0.0, 0.14285714285714285],
  [7600.0, 0.14285714285714285, 0.14285714285714285],
  [11500.0, 0.14285714285714285, 0.023809523809523808],
  [18000.0, 0.023809523809523808, 0.14285714285714285],
  [40300.0, 0.14285714285714285, 0.028571428571428574],
  [8600.0, 0.028571428571428574, 0.14285714285714285],
  [9900.0, 0.14285714285714285, 0.10714285714285714],
  [21800.0, 0.10714285714285714, 0.14285714285714285],
  [12300.0, 0.14285714285714285, 0.08928571428571429],
  [4800.0, 0.08928571428571429, 0.03571428571428571],
  [19500.0, 0.03571428571428571, 0.14285714285714285],
  [9900.0, 0.14285714285714285, 0.07792207792207792],
  [4600.0, 0.07792207792207792, 0.14285714285714285],
  [23900.0, 0.14285714285714285, 0.03571428571428571],
  [9300.0, 0.03571428571428571, 0.10714285714285714],
  [43400.0, 0.10714285714285714, 0.14285714285714285],
  [16000.0, 0.14285714285714285, 0.12698412698412698],
  [50100.0, 0.12698412698412698, 0.14285714285714285],
  [27600.0, 0.14285714285714285, 0.08928571428571429],
  [15600.0, 0.08928571428571429, 0.13095238095238096],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.48 => p.pan;
700.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
