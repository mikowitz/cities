[
  [5100.0, 0.0, 0.0],
  [10800.0, 0.0, 0.06666666666666667],
  [10300.0, 0.06666666666666667, 0.2],
  [33100.0, 0.2, 0.13333333333333333],
  [26200.0, 0.13333333333333333, 0.2],
  [26000.0, 0.2, 0.17777777777777776],
  [11000.0, 0.17777777777777776, 0.06666666666666667],
  [18500.0, 0.06666666666666667, 0.2],
  [30800.0, 0.2, 0.2],
  [37700.0, 0.2, 0.17142857142857143],
  [34000.0, 0.17142857142857143, 0.2],
  [9100.0, 0.2, 0.2],
  [52200.0, 0.2, 0.06666666666666667],
  [300.0, 0.06666666666666667, 0.2],
  [17600.0, 0.2, 0.13333333333333333],
  [700.0, 0.13333333333333333, 0.2],
  [5600.0, 0.2, 0.06666666666666667],
  [7000.0, 0.06666666666666667, 0.16666666666666669],
  [2700.0, 0.16666666666666669, 0.1],
  [23000.0, 0.1, 0.04],
  [3600.0, 0.04, 0.2],
  [6300.0, 0.2, 0.2],
  [60200.0, 0.2, 0.2],
  [19300.0, 0.2, 0.2],
  [42000.0, 0.2, 0.2],
  [13900.0, 0.2, 0.06666666666666667],
  [12400.0, 0.06666666666666667, 0.2],
  [5300.0, 0.2, 0.2],
  [200.0, 0.2, 0.2],
  [18100.0, 0.2, 0.06666666666666667],
  [700.0, 0.06666666666666667, 0.2],
  [7200.0, 0.2, 0.06666666666666667],
  [23600.0, 0.06666666666666667, 0.2],
  [24400.0, 0.2, 0.2],
  [31000.0, 0.2, 0.2],
  [24200.0, 0.2, 0.2],
  [400.0, 0.2, 0.2],
  [14900.0, 0.2, 0.025],
  [8500.0, 0.025, 0.2],
  [53200.0, 0.2, 0.2],
  [2300.0, 0.2, 0.05],
  [13600.0, 0.05, 0.1],
  [16300.0, 0.1, 0.05],
  [8500.0, 0.05, 0.2],
  [9200.0, 0.2, 0.2],
  [9900.0, 0.2, 0.2],
  [34700.0, 0.2, 0.2],
  [15200.0, 0.2, 0.06666666666666667],
  [23700.0, 0.06666666666666667, 0.2],
  [15400.0, 0.2, 0.06666666666666667],
  [7900.0, 0.06666666666666667, 0.06666666666666667],
  [17800.0, 0.06666666666666667, 0.2],
  [37700.0, 0.2, 0.2],
  [2100.0, 0.2, 0.2],
  [37400.0, 0.2, 0.06666666666666667],
  [14800.0, 0.06666666666666667, 0.2],
  [21000.0, 0.2, 0.06666666666666667],
  [31600.0, 0.06666666666666667, 0.2],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
0.85 => p.pan;
2500.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
