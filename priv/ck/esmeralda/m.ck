[
  [2000.0, 0.0, 0.0],
  [31200.0, 0.0, 0.02564102564102564],
  [35100.0, 0.02564102564102564, 0.07692307692307693],
  [18500.0, 0.07692307692307693, 0.02564102564102564],
  [29700.0, 0.02564102564102564, 0.028846153846153848],
  [31700.0, 0.028846153846153848, 0.019230769230769232],
  [14700.0, 0.019230769230769232, 0.023076923076923075],
  [5400.0, 0.023076923076923075, 0.07692307692307693],
  [45500.0, 0.07692307692307693, 0.057692307692307696],
  [12900.0, 0.057692307692307696, 0.028846153846153848],
  [5500.0, 0.028846153846153848, 0.02564102564102564],
  [43400.0, 0.02564102564102564, 0.038461538461538464],
  [2800.0, 0.038461538461538464, 0.057692307692307696],
  [4500.0, 0.057692307692307696, 0.019230769230769232],
  [4000.0, 0.019230769230769232, 0.07692307692307693],
  [44600.0, 0.07692307692307693, 0.02564102564102564],
  [11800.0, 0.02564102564102564, 0.023076923076923075],
  [20100.0, 0.023076923076923075, 0.019230769230769232],
  [56100.0, 0.019230769230769232, 0.07692307692307693],
  [7700.0, 0.07692307692307693, 0.017094017094017092],
  [18500.0, 0.017094017094017092, 0.009615384615384616],
  [5800.0, 0.009615384615384616, 0.06593406593406594],
  [36200.0, 0.06593406593406594, 0.07692307692307693],
  [17800.0, 0.07692307692307693, 0.020979020979020976],
  [1600.0, 0.020979020979020976, 0.02564102564102564],
  [7600.0, 0.02564102564102564, 0.02564102564102564],
  [31300.0, 0.02564102564102564, 0.01282051282051282],
  [9300.0, 0.01282051282051282, 0.019230769230769232],
  [46800.0, 0.019230769230769232, 0.02564102564102564],
  [19300.0, 0.02564102564102564, 0.009615384615384616],
  [6200.0, 0.009615384615384616, 0.023076923076923075],
  [19100.0, 0.023076923076923075, 0.07692307692307693],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.04 => p.pan;
1300.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
