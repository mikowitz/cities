[
  [1400.0, 0.0, 0.0],
  [12600.0, 0.0, 0.06666666666666667],
  [13000.0, 0.06666666666666667, 0.2],
  [200.0, 0.2, 0.2],
  [23900.0, 0.2, 0.06666666666666667],
  [3000.0, 0.06666666666666667, 0.2],
  [2100.0, 0.2, 0.06666666666666667],
  [8900.0, 0.06666666666666667, 0.2],
  [8100.0, 0.2, 0.2],
  [9000.0, 0.2, 0.2],
  [7800.0, 0.2, 0.05],
  [5700.0, 0.05, 0.06666666666666667],
  [6600.0, 0.06666666666666667, 0.06666666666666667],
  [7800.0, 0.06666666666666667, 0.06666666666666667],
  [1300.0, 0.06666666666666667, 0.2],
  [3100.0, 0.2, 0.06666666666666667],
  [9100.0, 0.06666666666666667, 0.025],
  [12600.0, 0.025, 0.2],
  [20600.0, 0.2, 0.06666666666666667],
  [2200.0, 0.06666666666666667, 0.06666666666666667],
  [14700.0, 0.06666666666666667, 0.06666666666666667],
  [2900.0, 0.06666666666666667, 0.06666666666666667],
  [14100.0, 0.06666666666666667, 0.06666666666666667],
  [14100.0, 0.06666666666666667, 0.06666666666666667],
  [4000.0, 0.06666666666666667, 0.06666666666666667],
  [4500.0, 0.06666666666666667, 0.06666666666666667],
  [4300.0, 0.06666666666666667, 0.2],
  [36300.0, 0.2, 0.16],
  [1700.0, 0.16, 0.2],
  [19400.0, 0.2, 0.2],
  [18800.0, 0.2, 0.2],
  [26800.0, 0.2, 0.2],
  [3700.0, 0.2, 0.2],
  [21100.0, 0.2, 0.2],
  [9600.0, 0.2, 0.16],
  [6100.0, 0.16, 0.06666666666666667],
  [15800.0, 0.06666666666666667, 0.06666666666666667],
  [14600.0, 0.06666666666666667, 0.2],
  [13300.0, 0.2, 0.2],
  [10300.0, 0.2, 0.06666666666666667],
  [15200.0, 0.06666666666666667, 0.2],
  [2800.0, 0.2, 0.12727272727272726],
  [3900.0, 0.12727272727272726, 0.06666666666666667],
  [10100.0, 0.06666666666666667, 0.06666666666666667],
  [9500.0, 0.06666666666666667, 0.2],
  [14600.0, 0.2, 0.2],
  [17800.0, 0.2, 0.06666666666666667],
  [200.0, 0.06666666666666667, 0.2],
  [6700.0, 0.2, 0.06666666666666667],
  [4500.0, 0.06666666666666667, 0.2],
  [16400.0, 0.2, 0.2],
  [13200.0, 0.2, 0.2],
  [4600.0, 0.2, 0.2],
  [7300.0, 0.2, 0.06666666666666667],
  [1200.0, 0.06666666666666667, 0.2],
  [700.0, 0.2, 0.2],
  [12600.0, 0.2, 0.2],
  [11400.0, 0.2, 0.2],
  [19300.0, 0.2, 0.07272727272727272],
  [28700.0, 0.07272727272727272, 0.06666666666666667],
  [11000.0, 0.06666666666666667, 0.2],
  [29600.0, 0.2, 0.06666666666666667],
  [9900.0, 0.06666666666666667, 0.06666666666666667],
  [200.0, 0.06666666666666667, 0.2],
  [50500.0, 0.2, 0.06666666666666667],
  [7000.0, 0.06666666666666667, 0.06666666666666667],
  [67100.0, 0.06666666666666667, 0.1],
  [20800.0, 0.1, 0.2],
  [31400.0, 0.2, 0.05],
  [6100.0, 0.05, 0.06666666666666667],
  [1700.0, 0.06666666666666667, 0.2],
  [2100.0, 0.2, 0.06666666666666667],
  [18400.0, 0.06666666666666667, 0.2],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
0.85 => p.pan;
2500.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
