[
  [7500.0, 0.0, 0.0],
  [3100.0, 0.0, 0.06],
  [4700.0, 0.06, 0.13333333333333333],
  [4000.0, 0.13333333333333333, 0.06666666666666667],
  [4100.0, 0.06666666666666667, 0.13333333333333333],
  [11500.0, 0.13333333333333333, 0.08571428571428572],
  [2300.0, 0.08571428571428572, 0.08],
  [3600.0, 0.08, 0.1],
  [2500.0, 0.1, 0.1],
  [13300.0, 0.1, 0.1],
  [1500.0, 0.1, 0.06666666666666667],
  [3300.0, 0.06666666666666667, 0.1],
  [2000.0, 0.1, 0.12],
  [4100.0, 0.12, 0.05714285714285714],
  [1400.0, 0.05714285714285714, 0.1],
  [15200.0, 0.1, 0.08],
  [3700.0, 0.08, 0.2],
  [1900.0, 0.2, 0.17142857142857143],
  [4400.0, 0.17142857142857143, 0.2],
  [1700.0, 0.2, 0.2],
  [12600.0, 0.2, 0.04],
  [4300.0, 0.04, 0.1],
  [4200.0, 0.1, 0.13333333333333333],
  [6100.0, 0.13333333333333333, 0.2],
  [13800.0, 0.2, 0.1],
  [3300.0, 0.1, 0.08571428571428572],
  [7800.0, 0.08571428571428572, 0.08571428571428572],
  [300.0, 0.08571428571428572, 0.11666666666666667],
  [8400.0, 0.11666666666666667, 0.15],
  [2900.0, 0.15, 0.05],
  [100.0, 0.05, 0.08],
  [1500.0, 0.08, 0.12],
  [1500.0, 0.12, 0.1],
  [100.0, 0.1, 0.1],
  [4300.0, 0.1, 0.15],
  [4300.0, 0.15, 0.15],
  [1800.0, 0.15, 0.06666666666666667],
  [3900.0, 0.06666666666666667, 0.08],
  [100.0, 0.08, 0.06666666666666667],
  [6300.0, 0.06666666666666667, 0.13333333333333333],
  [2700.0, 0.13333333333333333, 0.06666666666666667],
  [1200.0, 0.06666666666666667, 0.12],
  [800.0, 0.12, 0.2],
  [4200.0, 0.2, 0.13333333333333333],
  [1700.0, 0.13333333333333333, 0.05],
  [11100.0, 0.05, 0.13333333333333333],
  [4000.0, 0.13333333333333333, 0.2],
  [10300.0, 0.2, 0.2],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
0.11 => p.pan;
1500.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
