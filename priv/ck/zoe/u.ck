[
  [26800.0, 0.0, 0.0],
  [36100.0, 0.0, 0.08571428571428572],
  [19900.0, 0.08571428571428572, 0.03571428571428571],
  [14300.0, 0.03571428571428571, 0.09523809523809523],
  [39000.0, 0.09523809523809523, 0.02040816326530612],
  [13100.0, 0.02040816326530612, 0.04081632653061224],
  [30900.0, 0.04081632653061224, 0.08791208791208792],
  [38700.0, 0.08791208791208792, 0.10714285714285714],
  [2900.0, 0.10714285714285714, 0.12244897959183673],
  [5500.0, 0.12244897959183673, 0.08163265306122448],
  [9000.0, 0.08163265306122448, 0.12244897959183673],
  [6800.0, 0.12244897959183673, 0.1142857142857143],
  [7100.0, 0.1142857142857143, 0.07142857142857142],
  [11600.0, 0.07142857142857142, 0.10714285714285714],
  [3900.0, 0.10714285714285714, 0.14285714285714285],
  [6800.0, 0.14285714285714285, 0.07142857142857142],
  [1200.0, 0.07142857142857142, 0.05714285714285715],
  [10200.0, 0.05714285714285715, 0.08571428571428572],
  [14800.0, 0.08571428571428572, 0.03571428571428571],
  [8100.0, 0.03571428571428571, 0.08571428571428572],
  [5100.0, 0.08571428571428572, 0.12987012987012986],
  [11300.0, 0.12987012987012986, 0.1142857142857143],
  [8000.0, 0.1142857142857143, 0.09523809523809523],
  [1500.0, 0.09523809523809523, 0.09523809523809523],
  [3600.0, 0.09523809523809523, 0.07142857142857142],
  [6800.0, 0.07142857142857142, 0.023809523809523808],
  [4400.0, 0.023809523809523808, 0.1038961038961039],
  [7200.0, 0.1038961038961039, 0.08928571428571429],
  [50300.0, 0.08928571428571429, 0.08928571428571429],
  [22600.0, 0.08928571428571429, 0.09523809523809523],
  [4800.0, 0.09523809523809523, 0.04081632653061224],
  [8600.0, 0.04081632653061224, 0.047619047619047616],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
0.56 => p.pan;
2100.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
