[
  [2600.0, 0.0, 0.0],
  [2100.0, 0.0, 0.2777777777777778],
  [200.0, 0.2777777777777778, 0.25],
  [21100.0, 0.25, 0.3333333333333333],
  [26700.0, 0.3333333333333333, 0.1851851851851852],
  [17900.0, 0.1851851851851852, 0.1111111111111111],
  [6900.0, 0.1111111111111111, 0.0909090909090909],
  [12300.0, 0.0909090909090909, 0.24242424242424243],
  [20400.0, 0.24242424242424243, 0.3333333333333333],
  [900.0, 0.3333333333333333, 0.2777777777777778],
  [200.0, 0.2777777777777778, 0.25],
  [16200.0, 0.25, 0.3333333333333333],
  [8900.0, 0.3333333333333333, 0.20833333333333334],
  [19600.0, 0.20833333333333334, 0.2962962962962963],
  [15300.0, 0.2962962962962963, 0.047619047619047616],
  [200.0, 0.047619047619047616, 0.14285714285714285],
  [16600.0, 0.14285714285714285, 0.19047619047619047],
  [2700.0, 0.19047619047619047, 0.15151515151515152],
  [1800.0, 0.15151515151515152, 0.08333333333333333],
  [4300.0, 0.08333333333333333, 0.08333333333333333],
  [9600.0, 0.08333333333333333, 0.13333333333333333],
  [51900.0, 0.13333333333333333, 0.2777777777777778],
  [15100.0, 0.2777777777777778, 0.26666666666666666],
  [17900.0, 0.26666666666666666, 0.19047619047619047],
  [18500.0, 0.19047619047619047, 0.07407407407407407],
  [6500.0, 0.07407407407407407, 0.13333333333333333],
  [5400.0, 0.13333333333333333, 0.13333333333333333],
  [6600.0, 0.13333333333333333, 0.2777777777777778],
  [42800.0, 0.2777777777777778, 0.1111111111111111],
  [200.0, 0.1111111111111111, 0.26666666666666666],
  [43300.0, 0.26666666666666666, 0.3],
  [29200.0, 0.3, 0.15151515151515152],
  [5800.0, 0.15151515151515152, 0.16666666666666666],
  [4400.0, 0.16666666666666666, 0.16666666666666666],
  [7100.0, 0.16666666666666666, 0.2222222222222222],
  [10800.0, 0.2222222222222222, 0.09523809523809523],
  [17100.0, 0.09523809523809523, 0.2916666666666667],
  [200.0, 0.2916666666666667, 0.25],
  [5100.0, 0.25, 0.3333333333333333],
  [36600.0, 0.3333333333333333, 0.1111111111111111],
  [24100.0, 0.1111111111111111, 0.25],
  [47700.0, 0.25, 0.1111111111111111],
  [200.0, 0.1111111111111111, 0.25],
  [2000.0, 0.25, 0.3333333333333333],
  [23600.0, 0.3333333333333333, 0.2333333333333333],
  [11300.0, 0.2333333333333333, 0.2380952380952381],
  [12200.0, 0.2380952380952381, 0.3333333333333333],
  [12700.0, 0.3333333333333333, 0.14285714285714285],
  [41500.0, 0.14285714285714285, 0.13333333333333333],
  [55500.0, 0.13333333333333333, 0.2777777777777778],
  [19000.0, 0.2777777777777778, 0.19047619047619047],
  [17900.0, 0.19047619047619047, 0.2916666666666667],
  [18700.0, 0.2916666666666667, 0.2916666666666667],
  [2000.0, 0.2916666666666667, 0.06666666666666667],
  [12100.0, 0.06666666666666667, 0.08333333333333333],
  [1800.0, 0.08333333333333333, 0.19999999999999998],
  [3400.0, 0.19999999999999998, 0.2857142857142857],
  [5900.0, 0.2857142857142857, 0.25],
  [200.0, 0.25, 0.26666666666666666],
  [13900.0, 0.26666666666666666, 0.3333333333333333],
  [39500.0, 0.3333333333333333, 0.3333333333333333],
  [43500.0, 0.3333333333333333, 0.08333333333333333],
  [7900.0, 0.08333333333333333, 0.26666666666666666],
  [200.0, 0.26666666666666666, 0.25],
  [5700.0, 0.25, 0.3333333333333333],
  [6900.0, 0.3333333333333333, 0.16666666666666666],
  [7700.0, 0.16666666666666666, 0.3333333333333333],
  [11300.0, 0.3333333333333333, 0.3333333333333333],
  [3200.0, 0.3333333333333333, 0.06060606060606061],
  [23200.0, 0.06060606060606061, 0.30303030303030304],
  [800.0, 0.30303030303030304, 0.16666666666666666],
  [200.0, 0.16666666666666666, 0.2222222222222222],
  [10000.0, 0.2222222222222222, 0.3333333333333333],
  [33100.0, 0.3333333333333333, 0.09523809523809523],
  [300.0, 0.09523809523809523, 0.3055555555555555],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.11 => p.pan;
1200.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
