[
  [6800.0, 0.0, 0.0],
  [5300.0, 0.0, 0.14285714285714285],
  [3800.0, 0.14285714285714285, 0.12244897959183673],
  [28500.0, 0.12244897959183673, 0.061224489795918366],
  [38400.0, 0.061224489795918366, 0.12698412698412698],
  [6900.0, 0.12698412698412698, 0.09523809523809523],
  [17600.0, 0.09523809523809523, 0.14285714285714285],
  [2100.0, 0.14285714285714285, 0.09999999999999999],
  [10200.0, 0.09999999999999999, 0.04285714285714286],
  [9900.0, 0.04285714285714286, 0.14285714285714285],
  [5400.0, 0.14285714285714285, 0.14285714285714285],
  [43200.0, 0.14285714285714285, 0.11904761904761905],
  [14600.0, 0.11904761904761905, 0.14285714285714285],
  [22900.0, 0.14285714285714285, 0.09523809523809523],
  [600.0, 0.09523809523809523, 0.14285714285714285],
  [20900.0, 0.14285714285714285, 0.07142857142857142],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.48 => p.pan;
700.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
