[
  [7600.0, 0.0, 0.0],
  [14000.0, 0.0, 0.13333333333333333],
  [4700.0, 0.13333333333333333, 0.26666666666666666],
  [24100.0, 0.26666666666666666, 0.08333333333333333],
  [7500.0, 0.08333333333333333, 0.047619047619047616],
  [300.0, 0.047619047619047616, 0.08333333333333333],
  [1900.0, 0.08333333333333333, 0.25],
  [2200.0, 0.25, 0.06666666666666667],
  [35700.0, 0.06666666666666667, 0.25],
  [6000.0, 0.25, 0.05555555555555555],
  [6800.0, 0.05555555555555555, 0.19047619047619047],
  [36900.0, 0.19047619047619047, 0.08333333333333333],
  [9700.0, 0.08333333333333333, 0.16666666666666666],
  [13200.0, 0.16666666666666666, 0.25],
  [3500.0, 0.25, 0.2857142857142857],
  [300.0, 0.2857142857142857, 0.26666666666666666],
  [18700.0, 0.26666666666666666, 0.06666666666666667],
  [11000.0, 0.06666666666666667, 0.25],
  [15300.0, 0.25, 0.25925925925925924],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.78 => p.pan;
300.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
