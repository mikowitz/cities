[
  [5600.0, 0.0, 0.0],
  [5100.0, 0.0, 0.14285714285714285],
  [8600.0, 0.14285714285714285, 0.14285714285714285],
  [5000.0, 0.14285714285714285, 0.08571428571428572],
  [9900.0, 0.08571428571428572, 0.14285714285714285],
  [6700.0, 0.14285714285714285, 0.07142857142857142],
  [3300.0, 0.07142857142857142, 0.14285714285714285],
  [7200.0, 0.14285714285714285, 0.10714285714285714],
  [14400.0, 0.10714285714285714, 0.14285714285714285],
  [3400.0, 0.14285714285714285, 0.07142857142857142],
  [37500.0, 0.07142857142857142, 0.12244897959183673],
  [34000.0, 0.12244897959183673, 0.09523809523809523],
  [8700.0, 0.09523809523809523, 0.14285714285714285],
  [7100.0, 0.14285714285714285, 0.04285714285714286],
  [10800.0, 0.04285714285714286, 0.14285714285714285],
  [3900.0, 0.14285714285714285, 0.11904761904761905],
  [3800.0, 0.11904761904761905, 0.09523809523809523],
  [8500.0, 0.09523809523809523, 0.11904761904761905],
  [32300.0, 0.11904761904761905, 0.11904761904761905],
  [23000.0, 0.11904761904761905, 0.02040816326530612],
  [6200.0, 0.02040816326530612, 0.10714285714285714],
  [10100.0, 0.10714285714285714, 0.14285714285714285],
  [17400.0, 0.14285714285714285, 0.10714285714285714],
  [12600.0, 0.10714285714285714, 0.061224489795918366],
  [10600.0, 0.061224489795918366, 0.028571428571428574],
  [24400.0, 0.028571428571428574, 0.07142857142857142],
  [9100.0, 0.07142857142857142, 0.11904761904761905],
  [5300.0, 0.11904761904761905, 0.14285714285714285],
  [5900.0, 0.14285714285714285, 0.14285714285714285],
  [15100.0, 0.14285714285714285, 0.14285714285714285],
  [29500.0, 0.14285714285714285, 0.03571428571428571],
  [15500.0, 0.03571428571428571, 0.07936507936507937],
  [21300.0, 0.07936507936507937, 0.07936507936507937],
  [3600.0, 0.07936507936507937, 0.14285714285714285],
  [5100.0, 0.14285714285714285, 0.047619047619047616],
  [49500.0, 0.047619047619047616, 0.07142857142857142],
  [37000.0, 0.07142857142857142, 0.07792207792207792],
  [6600.0, 0.07792207792207792, 0.08571428571428572],
  [12800.0, 0.08571428571428572, 0.11904761904761905],
  [2800.0, 0.11904761904761905, 0.07142857142857142],
  [18500.0, 0.07142857142857142, 0.023809523809523808],
  [13100.0, 0.023809523809523808, 0.14285714285714285],
  [15100.0, 0.14285714285714285, 0.03571428571428571],
  [8800.0, 0.03571428571428571, 0.08571428571428572],
  [30200.0, 0.08571428571428572, 0.14285714285714285],
  [11200.0, 0.14285714285714285, 0.14285714285714285],
  [36400.0, 0.14285714285714285, 0.14285714285714285],
  [2100.0, 0.14285714285714285, 0.14285714285714285],
  [48400.0, 0.14285714285714285, 0.08571428571428572],
  [12900.0, 0.08571428571428572, 0.14285714285714285],
  [14700.0, 0.14285714285714285, 0.03571428571428571],
  [4000.0, 0.03571428571428571, 0.06493506493506493],
  [1700.0, 0.06493506493506493, 0.14285714285714285],
  [6300.0, 0.14285714285714285, 0.061224489795918366],
  [7800.0, 0.061224489795918366, 0.14285714285714285],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.48 => p.pan;
700.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
