[
  [37100.0, 0.0, 0.0],
  [23200.0, 0.0, 0.21428571428571427],
  [115400.0, 0.21428571428571427, 0.21428571428571427],
  [1500.0, 0.21428571428571427, 0.0625],
  [3100.0, 0.0625, 0.25],
  [1900.0, 0.25, 0.4],
  [62300.0, 0.4, 0.08333333333333333],
  [10400.0, 0.08333333333333333, 0.5],
  [15900.0, 0.5, 0.16666666666666666],
  [2400.0, 0.16666666666666666, 0.041666666666666664],
  [21000.0, 0.041666666666666664, 0.3333333333333333],
  [16700.0, 0.3333333333333333, 0.3],
  [9600.0, 0.3, 0.125],
  [2900.0, 0.125, 0.16666666666666666],
  [16700.0, 0.16666666666666666, 0.5],
  [500.0, 0.5, 0.07142857142857142],
  [16700.0, 0.07142857142857142, 0.21428571428571427],
  [300.0, 0.21428571428571427, 0.125],
  [9500.0, 0.125, 0.1875],
  [4000.0, 0.1875, 0.375],
  [2400.0, 0.375, 0.2],
  [1200.0, 0.2, 0.125],
  [9000.0, 0.125, 0.375],
  [22900.0, 0.375, 0.07142857142857142],
  [5800.0, 0.07142857142857142, 0.3125],
  [1300.0, 0.3125, 0.5],
  [2400.0, 0.5, 0.045454545454545456],
  [47500.0, 0.045454545454545456, 0.36363636363636365],
  [35900.0, 0.36363636363636365, 0.125],
  [25200.0, 0.125, 0.21428571428571427],
  [11600.0, 0.21428571428571427, 0.4],
  [6000.0, 0.4, 0.18181818181818182],
  [53400.0, 0.18181818181818182, 0.21428571428571427],
  [300.0, 0.21428571428571427, 0.1],
  [10200.0, 0.1, 0.15],
  [7700.0, 0.15, 0.1],
  [9300.0, 0.1, 0.1],
  [300.0, 0.1, 0.21428571428571427],
  [9500.0, 0.21428571428571427, 0.2857142857142857],
  [59900.0, 0.2857142857142857, 0.16666666666666666],
  [14800.0, 0.16666666666666666, 0.5],
  [39100.0, 0.5, 0.21428571428571427],
  [9400.0, 0.21428571428571427, 0.0625],
  [2800.0, 0.0625, 0.5],
  [22200.0, 0.5, 0.5],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
0.19 => p.pan;
1600.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
