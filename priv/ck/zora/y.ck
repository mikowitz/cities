[
  [400.0, 0.0, 0.0],
  [22700.0, 0.0, 0.1],
  [37300.0, 0.1, 0.2],
  [13100.0, 0.2, 0.05],
  [7700.0, 0.05, 0.2],
  [4300.0, 0.2, 0.05],
  [2900.0, 0.05, 0.2],
  [48300.0, 0.2, 0.2],
  [5100.0, 0.2, 0.2],
  [8800.0, 0.2, 0.2],
  [200.0, 0.2, 0.2],
  [42600.0, 0.2, 0.05],
  [42100.0, 0.05, 0.2],
  [75000.0, 0.2, 0.2],
  [11100.0, 0.2, 0.2],
  [22600.0, 0.2, 0.2],
  [73600.0, 0.2, 0.11111111111111112],
  [4600.0, 0.11111111111111112, 0.2],
  [22700.0, 0.2, 0.2],
  [31900.0, 0.2, 0.2],
  [11400.0, 0.2, 0.2],
  [11000.0, 0.2, 0.16666666666666669],
  [30900.0, 0.16666666666666669, 0.2],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
0.85 => p.pan;
2500.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
