[
  [77800.0, 0.0, 0.0],
  [11500.0, 0.0, 0.0606060606060606],
  [146800.0, 0.0606060606060606, 0.0101010101010101],
  [59400.0, 0.0101010101010101, 0.03896103896103896],
  [10000.0, 0.03896103896103896, 0.07272727272727274],
  [27300.0, 0.07272727272727274, 0.06818181818181818],
  [46700.0, 0.06818181818181818, 0.06818181818181818],
  [1900.0, 0.06818181818181818, 0.06818181818181818],
  [21700.0, 0.06818181818181818, 0.045454545454545456],
  [12800.0, 0.045454545454545456, 0.07272727272727274],
  [14600.0, 0.07272727272727274, 0.07792207792207792],
  [20100.0, 0.07792207792207792, 0.04958677685950413],
  [11200.0, 0.04958677685950413, 0.0202020202020202],
  [41400.0, 0.0202020202020202, 0.06818181818181818],
  [5900.0, 0.06818181818181818, 0.011363636363636364],
  [134100.0, 0.011363636363636364, 0.018181818181818184],
  [50000.0, 0.018181818181818184, 0.018181818181818184],
  [40900.0, 0.018181818181818184, 0.07954545454545454],
  [83100.0, 0.07954545454545454, 0.045454545454545456],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
0.63 => p.pan;
2200.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
