[
  [14500.0, 0.0, 0.0],
  [600.0, 0.0, 0.2],
  [40800.0, 0.2, 0.1],
  [11600.0, 0.1, 0.2],
  [2500.0, 0.2, 0.06666666666666667],
  [55500.0, 0.06666666666666667, 0.2],
  [23500.0, 0.2, 0.2],
  [15500.0, 0.2, 0.2],
  [800.0, 0.2, 0.2],
  [11700.0, 0.2, 0.2],
  [3300.0, 0.2, 0.2],
  [7600.0, 0.2, 0.2],
  [2700.0, 0.2, 0.2],
  [17500.0, 0.2, 0.2],
  [49500.0, 0.2, 0.13333333333333333],
  [17600.0, 0.13333333333333333, 0.05],
  [15600.0, 0.05, 0.2],
  [5800.0, 0.2, 0.2],
  [16200.0, 0.2, 0.06666666666666667],
  [8500.0, 0.06666666666666667, 0.06666666666666667],
  [16800.0, 0.06666666666666667, 0.2],
  [23400.0, 0.2, 0.2],
  [17700.0, 0.2, 0.2],
  [700.0, 0.2, 0.2],
  [200.0, 0.2, 0.2],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
0.85 => p.pan;
2500.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
