[
  [100.0, 0.0, 0.0],
  [4500.0, 0.0, 0.3333333333333333],
  [15300.0, 0.3333333333333333, 0.3333333333333333],
  [16300.0, 0.3333333333333333, 0.08333333333333333],
  [39800.0, 0.08333333333333333, 0.3333333333333333],
  [27300.0, 0.3333333333333333, 0.1111111111111111],
  [11600.0, 0.1111111111111111, 0.25925925925925924],
  [12400.0, 0.25925925925925924, 0.3333333333333333],
  [28400.0, 0.3333333333333333, 0.3333333333333333],
  [12000.0, 0.3333333333333333, 0.08333333333333333],
  [13300.0, 0.08333333333333333, 0.3333333333333333],
  [22800.0, 0.3333333333333333, 0.3333333333333333],
  [33700.0, 0.3333333333333333, 0.037037037037037035],
  [10200.0, 0.037037037037037035, 0.08333333333333333],
  [60500.0, 0.08333333333333333, 0.08333333333333333],
  [8700.0, 0.08333333333333333, 0.041666666666666664],
  [32600.0, 0.041666666666666664, 0.3333333333333333],
  [4000.0, 0.3333333333333333, 0.3333333333333333],
  [34300.0, 0.3333333333333333, 0.3333333333333333],
  [40400.0, 0.3333333333333333, 0.3333333333333333],
  [22300.0, 0.3333333333333333, 0.08333333333333333],
  [2700.0, 0.08333333333333333, 0.08333333333333333],
  [200.0, 0.08333333333333333, 0.3333333333333333],
  [45200.0, 0.3333333333333333, 0.08333333333333333],
  [15400.0, 0.08333333333333333, 0.3333333333333333],
  [8900.0, 0.3333333333333333, 0.3333333333333333],
  [41700.0, 0.3333333333333333, 0.3333333333333333],
  [26000.0, 0.3333333333333333, 0.25925925925925924],
  [9400.0, 0.25925925925925924, 0.037037037037037035],
  [8100.0, 0.037037037037037035, 0.06666666666666667],
  [10900.0, 0.06666666666666667, 0.3333333333333333],
  [60800.0, 0.3333333333333333, 0.08333333333333333],
  [6500.0, 0.08333333333333333, 0.08333333333333333],
  [66600.0, 0.08333333333333333, 0.06666666666666667],
  [28300.0, 0.06666666666666667, 0.1111111111111111],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.56 => p.pan;
600.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
