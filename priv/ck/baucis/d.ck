[
  [3500.0, 0.0, 0.0],
  [7700.0, 0.0, 0.125],
  [1300.0, 0.125, 0.25],
  [4500.0, 0.25, 0.5],
  [3000.0, 0.5, 0.0625],
  [2200.0, 0.0625, 0.5],
  [9300.0, 0.5, 0.5],
  [6000.0, 0.5, 0.5],
  [2500.0, 0.5, 0.5],
  [13900.0, 0.5, 0.35714285714285715],
  [3400.0, 0.35714285714285715, 0.5],
  [9700.0, 0.5, 0.0625],
  [6300.0, 0.0625, 0.5],
  [13400.0, 0.5, 0.4166666666666667],
  [200.0, 0.4166666666666667, 0.21428571428571427],
  [6800.0, 0.21428571428571427, 0.2857142857142857],
  [18000.0, 0.2857142857142857, 0.5],
  [7200.0, 0.5, 0.42857142857142855],
  [10100.0, 0.42857142857142855, 0.5],
  [30100.0, 0.5, 0.125],
  [2700.0, 0.125, 0.5],
  [7900.0, 0.5, 0.125],
  [5000.0, 0.125, 0.5],
  [45600.0, 0.5, 0.3333333333333333],
  [15100.0, 0.3333333333333333, 0.5],
  [1100.0, 0.5, 0.5],
  [5900.0, 0.5, 0.5],
  [3900.0, 0.5, 0.5],
  [200.0, 0.5, 0.5],
  [2700.0, 0.5, 0.0625],
  [38900.0, 0.0625, 0.5],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.7 => p.pan;
400.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
