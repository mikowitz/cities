[
  [12500.0, 0.0, 0.0],
  [12100.0, 0.0, 0.35714285714285715],
  [8700.0, 0.35714285714285715, 0.5],
  [17600.0, 0.5, 0.4166666666666667],
  [13900.0, 0.4166666666666667, 0.375],
  [69900.0, 0.375, 0.2857142857142857],
  [4900.0, 0.2857142857142857, 0.1],
  [10900.0, 0.1, 0.2857142857142857],
  [6300.0, 0.2857142857142857, 0.08333333333333333],
  [6600.0, 0.08333333333333333, 0.05555555555555555],
  [5800.0, 0.05555555555555555, 0.125],
  [7600.0, 0.125, 0.3125],
  [10500.0, 0.3125, 0.045454545454545456],
  [20500.0, 0.045454545454545456, 0.35714285714285715],
  [28000.0, 0.35714285714285715, 0.05555555555555555],
  [300.0, 0.05555555555555555, 0.2857142857142857],
  [4700.0, 0.2857142857142857, 0.35714285714285715],
  [300.0, 0.35714285714285715, 0.5],
  [3000.0, 0.5, 0.08333333333333333],
  [54300.0, 0.08333333333333333, 0.05555555555555555],
  [56900.0, 0.05555555555555555, 0.4166666666666667],
  [15500.0, 0.4166666666666667, 0.3],
  [39200.0, 0.3, 0.3076923076923077],
  [21500.0, 0.3076923076923077, 0.25],
  [25500.0, 0.25, 0.1],
  [61100.0, 0.1, 0.35714285714285715],
  [12300.0, 0.35714285714285715, 0.07142857142857142],
  [24700.0, 0.07142857142857142, 0.35714285714285715],
  [23400.0, 0.35714285714285715, 0.5],
  [33300.0, 0.5, 0.35714285714285715],
  [34100.0, 0.35714285714285715, 0.35714285714285715],
  [17100.0, 0.35714285714285715, 0.07142857142857142],
  [17500.0, 0.07142857142857142, 0.35714285714285715],
  [1100.0, 0.35714285714285715, 0.5],
  [31900.0, 0.5, 0.5],
  [9500.0, 0.5, 0.35714285714285715],
  [11000.0, 0.35714285714285715, 0.21428571428571427],
  [14800.0, 0.21428571428571427, 0.375],
  [300.0, 0.375, 0.25],
  [12400.0, 0.25, 0.3333333333333333],
  [300.0, 0.3333333333333333, 0.2],
  [2900.0, 0.2, 0.3],
  [41900.0, 0.3, 0.35714285714285715],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
0.19 => p.pan;
1600.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
