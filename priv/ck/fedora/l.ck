[
  [15100.0, 0.0, 0.0],
  [4800.0, 0.0, 0.26666666666666666],
  [2200.0, 0.26666666666666666, 0.3333333333333333],
  [7200.0, 0.3333333333333333, 0.16666666666666666],
  [800.0, 0.16666666666666666, 0.3333333333333333],
  [5600.0, 0.3333333333333333, 0.13333333333333333],
  [6500.0, 0.13333333333333333, 0.047619047619047616],
  [2800.0, 0.047619047619047616, 0.13333333333333333],
  [4400.0, 0.13333333333333333, 0.16666666666666666],
  [16200.0, 0.16666666666666666, 0.3333333333333333],
  [26800.0, 0.3333333333333333, 0.26666666666666666],
  [19600.0, 0.26666666666666666, 0.047619047619047616],
  [5000.0, 0.047619047619047616, 0.3333333333333333],
  [13400.0, 0.3333333333333333, 0.26666666666666666],
  [3000.0, 0.26666666666666666, 0.3333333333333333],
  [2800.0, 0.3333333333333333, 0.09523809523809523],
  [14500.0, 0.09523809523809523, 0.05555555555555555],
  [5400.0, 0.05555555555555555, 0.3333333333333333],
  [5800.0, 0.3333333333333333, 0.2916666666666667],
  [3700.0, 0.2916666666666667, 0.25],
  [1600.0, 0.25, 0.13333333333333333],
  [3700.0, 0.13333333333333333, 0.13333333333333333],
  [7000.0, 0.13333333333333333, 0.16666666666666666],
  [36900.0, 0.16666666666666666, 0.1111111111111111],
  [11500.0, 0.1111111111111111, 0.2222222222222222],
  [11100.0, 0.2222222222222222, 0.13333333333333333],
  [1600.0, 0.13333333333333333, 0.26666666666666666],
  [200.0, 0.26666666666666666, 0.1111111111111111],
  [7100.0, 0.1111111111111111, 0.14814814814814814],
  [20600.0, 0.14814814814814814, 0.3333333333333333],
  [9200.0, 0.3333333333333333, 0.13333333333333333],
  [14700.0, 0.13333333333333333, 0.07407407407407407],
  [8500.0, 0.07407407407407407, 0.09523809523809523],
  [16600.0, 0.09523809523809523, 0.3333333333333333],
  [37000.0, 0.3333333333333333, 0.3333333333333333],
  [1900.0, 0.3333333333333333, 0.05555555555555555],
  [4700.0, 0.05555555555555555, 0.2777777777777778],
  [1600.0, 0.2777777777777778, 0.13333333333333333],
  [7000.0, 0.13333333333333333, 0.1111111111111111],
  [200.0, 0.1111111111111111, 0.2222222222222222],
  [1500.0, 0.2222222222222222, 0.3333333333333333],
  [200.0, 0.3333333333333333, 0.2380952380952381],
  [1800.0, 0.2380952380952381, 0.2857142857142857],
  [3900.0, 0.2857142857142857, 0.3333333333333333],
  [200.0, 0.3333333333333333, 0.2222222222222222],
  [2400.0, 0.2222222222222222, 0.3333333333333333],
  [37400.0, 0.3333333333333333, 0.25],
  [3700.0, 0.25, 0.2916666666666667],
  [5400.0, 0.2916666666666667, 0.06666666666666667],
  [1100.0, 0.06666666666666667, 0.2916666666666667],
  [2800.0, 0.2916666666666667, 0.05555555555555555],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.11 => p.pan;
1200.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
