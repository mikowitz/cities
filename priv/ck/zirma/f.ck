[
  [10000.0, 0.0, 0.0],
  [4600.0, 0.0, 0.08333333333333333],
  [58800.0, 0.08333333333333333, 0.3333333333333333],
  [81900.0, 0.3333333333333333, 0.3333333333333333],
  [22900.0, 0.3333333333333333, 0.3333333333333333],
  [16400.0, 0.3333333333333333, 0.08333333333333333],
  [16300.0, 0.08333333333333333, 0.05555555555555555],
  [33500.0, 0.05555555555555555, 0.3333333333333333],
  [200.0, 0.3333333333333333, 0.1111111111111111],
  [3600.0, 0.1111111111111111, 0.14814814814814814],
  [76600.0, 0.14814814814814814, 0.08333333333333333],
  [2400.0, 0.08333333333333333, 0.1111111111111111],
  [6300.0, 0.1111111111111111, 0.047619047619047616],
  [5900.0, 0.047619047619047616, 0.3333333333333333],
  [27000.0, 0.3333333333333333, 0.20833333333333334],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.56 => p.pan;
600.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
