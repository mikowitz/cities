[
  [83000.0, 0.0, 0.0],
  [3700.0, 0.0, 0.4166666666666667],
  [1200.0, 0.4166666666666667, 0.1],
  [17200.0, 0.1, 0.3],
  [18200.0, 0.3, 0.16666666666666666],
  [1200.0, 0.16666666666666666, 0.1],
  [5400.0, 0.1, 0.3],
  [3500.0, 0.3, 0.375],
  [25000.0, 0.375, 0.16666666666666666],
  [27400.0, 0.16666666666666666, 0.05555555555555555],
  [52200.0, 0.05555555555555555, 0.0625],
  [54300.0, 0.0625, 0.4090909090909091],
  [1200.0, 0.4090909090909091, 0.1],
  [7600.0, 0.1, 0.3],
  [50100.0, 0.3, 0.35714285714285715],
  [15000.0, 0.35714285714285715, 0.2222222222222222],
  [52300.0, 0.2222222222222222, 0.05555555555555555],
  [1900.0, 0.05555555555555555, 0.375],
  [3900.0, 0.375, 0.16666666666666666],
  [3200.0, 0.16666666666666666, 0.07142857142857142],
  [9200.0, 0.07142857142857142, 0.14285714285714285],
  [15300.0, 0.14285714285714285, 0.13636363636363635],
  [1200.0, 0.13636363636363635, 0.1],
  [11400.0, 0.1, 0.3],
  [5000.0, 0.3, 0.05],
  [48800.0, 0.05, 0.3333333333333333],
  [71600.0, 0.3333333333333333, 0.375],
  [40500.0, 0.375, 0.3333333333333333],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
0.19 => p.pan;
1600.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
