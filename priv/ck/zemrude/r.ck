[
  [6200.0, 0.0, 0.0],
  [9100.0, 0.0, 0.3333333333333333],
  [4100.0, 0.3333333333333333, 0.19047619047619047],
  [10700.0, 0.19047619047619047, 0.25],
  [16000.0, 0.25, 0.3333333333333333],
  [11100.0, 0.3333333333333333, 0.16666666666666666],
  [18000.0, 0.16666666666666666, 0.125],
  [3200.0, 0.125, 0.3333333333333333],
  [10900.0, 0.3333333333333333, 0.3333333333333333],
  [4100.0, 0.3333333333333333, 0.3333333333333333],
  [7500.0, 0.3333333333333333, 0.3333333333333333],
  [7800.0, 0.3333333333333333, 0.1111111111111111],
  [5100.0, 0.1111111111111111, 0.2857142857142857],
  [7700.0, 0.2857142857142857, 0.2777777777777778],
  [13700.0, 0.2777777777777778, 0.3333333333333333],
  [2000.0, 0.3333333333333333, 0.13333333333333333],
  [5000.0, 0.13333333333333333, 0.3333333333333333],
  [4500.0, 0.3333333333333333, 0.3333333333333333],
  [3900.0, 0.3333333333333333, 0.3333333333333333],
  [1800.0, 0.3333333333333333, 0.3333333333333333],
  [4700.0, 0.3333333333333333, 0.19047619047619047],
  [3800.0, 0.19047619047619047, 0.16666666666666666],
  [2500.0, 0.16666666666666666, 0.041666666666666664],
  [9900.0, 0.041666666666666664, 0.3333333333333333],
  [1800.0, 0.3333333333333333, 0.3333333333333333],
  [5700.0, 0.3333333333333333, 0.19047619047619047],
  [4600.0, 0.19047619047619047, 0.26666666666666666],
  [3700.0, 0.26666666666666666, 0.1111111111111111],
  [11100.0, 0.1111111111111111, 0.16666666666666666],
  [8100.0, 0.16666666666666666, 0.14285714285714285],
  [3700.0, 0.14285714285714285, 0.3333333333333333],
  [2200.0, 0.3333333333333333, 0.2777777777777778],
  [8000.0, 0.2777777777777778, 0.14814814814814814],
  [1400.0, 0.14814814814814814, 0.3333333333333333],
  [3500.0, 0.3333333333333333, 0.16666666666666666],
  [1200.0, 0.16666666666666666, 0.3333333333333333],
  [2000.0, 0.3333333333333333, 0.3333333333333333],
  [5900.0, 0.3333333333333333, 0.3333333333333333],
  [4200.0, 0.3333333333333333, 0.13333333333333333],
  [6400.0, 0.13333333333333333, 0.3333333333333333],
  [9800.0, 0.3333333333333333, 0.06666666666666667],
  [4200.0, 0.06666666666666667, 0.3333333333333333],
  [6700.0, 0.3333333333333333, 0.16666666666666666],
  [1400.0, 0.16666666666666666, 0.047619047619047616],
  [12200.0, 0.047619047619047616, 0.2380952380952381],
  [1200.0, 0.2380952380952381, 0.25],
  [1300.0, 0.25, 0.08333333333333333],
  [10800.0, 0.08333333333333333, 0.25],
  [3800.0, 0.25, 0.14285714285714285],
  [3200.0, 0.14285714285714285, 0.16666666666666666],
  [14200.0, 0.16666666666666666, 0.14285714285714285],
  [9000.0, 0.14285714285714285, 0.2857142857142857],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
0.33 => p.pan;
1800.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
