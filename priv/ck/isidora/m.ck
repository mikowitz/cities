[
  [1700.0, 0.0, 0.0],
  [7000.0, 0.0, 0.02564102564102564],
  [21800.0, 0.02564102564102564, 0.057692307692307696],
  [46000.0, 0.057692307692307696, 0.04615384615384615],
  [16700.0, 0.04615384615384615, 0.019230769230769232],
  [25200.0, 0.019230769230769232, 0.04615384615384615],
  [39200.0, 0.04615384615384615, 0.03076923076923077],
  [10000.0, 0.03076923076923077, 0.06410256410256411],
  [7600.0, 0.06410256410256411, 0.042735042735042736],
  [3500.0, 0.042735042735042736, 0.07692307692307693],
  [28700.0, 0.07692307692307693, 0.02564102564102564],
  [19300.0, 0.02564102564102564, 0.02564102564102564],
  [7000.0, 0.02564102564102564, 0.07692307692307693],
  [500.0, 0.07692307692307693, 0.009615384615384616],
  [2900.0, 0.009615384615384616, 0.028846153846153848],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.04 => p.pan;
1300.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
