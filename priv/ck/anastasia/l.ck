[
  [29600.0, 0.0, 0.0],
  [9200.0, 0.0, 0.2777777777777778],
  [7900.0, 0.2777777777777778, 0.1111111111111111],
  [1400.0, 0.1111111111111111, 0.2777777777777778],
  [10800.0, 0.2777777777777778, 0.08333333333333333],
  [21000.0, 0.08333333333333333, 0.3],
  [4300.0, 0.3, 0.13333333333333333],
  [4500.0, 0.13333333333333333, 0.2777777777777778],
  [3100.0, 0.2777777777777778, 0.13333333333333333],
  [21300.0, 0.13333333333333333, 0.16666666666666666],
  [11000.0, 0.16666666666666666, 0.25925925925925924],
  [200.0, 0.25925925925925924, 0.25],
  [12700.0, 0.25, 0.3333333333333333],
  [41800.0, 0.3333333333333333, 0.3333333333333333],
  [200.0, 0.3333333333333333, 0.2222222222222222],
  [4300.0, 0.2222222222222222, 0.3333333333333333],
  [2500.0, 0.3333333333333333, 0.26666666666666666],
  [200.0, 0.26666666666666666, 0.14285714285714285],
  [13700.0, 0.14285714285714285, 0.19047619047619047],
  [19400.0, 0.19047619047619047, 0.26666666666666666],
  [6000.0, 0.26666666666666666, 0.25],
  [26500.0, 0.25, 0.2777777777777778],
  [200.0, 0.2777777777777778, 0.2222222222222222],
  [17500.0, 0.2222222222222222, 0.3333333333333333],
  [7000.0, 0.3333333333333333, 0.26666666666666666],
  [54800.0, 0.26666666666666666, 0.08333333333333333],
  [200.0, 0.08333333333333333, 0.16666666666666666],
  [1100.0, 0.16666666666666666, 0.2222222222222222],
  [49200.0, 0.2222222222222222, 0.1111111111111111],
  [22900.0, 0.1111111111111111, 0.06666666666666667],
  [11800.0, 0.06666666666666667, 0.14285714285714285],
  [200.0, 0.14285714285714285, 0.2222222222222222],
  [5200.0, 0.2222222222222222, 0.2777777777777778],
  [2300.0, 0.2777777777777778, 0.25],
  [600.0, 0.25, 0.13333333333333333],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.11 => p.pan;
1200.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
