[
  [6300.0, 0.0, 0.0],
  [28100.0, 0.0, 0.3333333333333333],
  [55000.0, 0.3333333333333333, 0.3333333333333333],
  [11900.0, 0.3333333333333333, 0.08333333333333333],
  [11400.0, 0.08333333333333333, 0.3333333333333333],
  [10100.0, 0.3333333333333333, 0.3333333333333333],
  [9700.0, 0.3333333333333333, 0.3333333333333333],
  [30800.0, 0.3333333333333333, 0.2962962962962963],
  [23700.0, 0.2962962962962963, 0.3333333333333333],
  [59600.0, 0.3333333333333333, 0.0909090909090909],
  [9600.0, 0.0909090909090909, 0.3333333333333333],
  [2800.0, 0.3333333333333333, 0.16666666666666666],
  [9400.0, 0.16666666666666666, 0.3333333333333333],
  [41300.0, 0.3333333333333333, 0.3333333333333333],
  [1400.0, 0.3333333333333333, 0.06666666666666667],
  [54500.0, 0.06666666666666667, 0.3333333333333333],
  [16400.0, 0.3333333333333333, 0.3333333333333333],
  [7000.0, 0.3333333333333333, 0.3333333333333333],
  [33300.0, 0.3333333333333333, 0.08333333333333333],
  [33900.0, 0.08333333333333333, 0.08333333333333333],
  [4800.0, 0.08333333333333333, 0.06666666666666667],
  [2200.0, 0.06666666666666667, 0.047619047619047616],
  [14400.0, 0.047619047619047616, 0.08333333333333333],
  [1200.0, 0.08333333333333333, 0.3333333333333333],
  [32200.0, 0.3333333333333333, 0.05555555555555555],
  [37200.0, 0.05555555555555555, 0.0909090909090909],
  [3000.0, 0.0909090909090909, 0.3333333333333333],
  [27300.0, 0.3333333333333333, 0.3333333333333333],
  [10900.0, 0.3333333333333333, 0.3333333333333333],
  [27400.0, 0.3333333333333333, 0.3333333333333333],
  [26100.0, 0.3333333333333333, 0.041666666666666664],
  [3100.0, 0.041666666666666664, 0.3333333333333333],
  [36100.0, 0.3333333333333333, 0.3333333333333333],
  [200.0, 0.3333333333333333, 0.1111111111111111],
  [2600.0, 0.1111111111111111, 0.14814814814814814],
  [2800.0, 0.14814814814814814, 0.08333333333333333],
  [21000.0, 0.08333333333333333, 0.06666666666666667],
  [54900.0, 0.06666666666666667, 0.3333333333333333],
  [41400.0, 0.3333333333333333, 0.3333333333333333],
  [8300.0, 0.3333333333333333, 0.3333333333333333],
  [3700.0, 0.3333333333333333, 0.3333333333333333],
  [2900.0, 0.3333333333333333, 0.3333333333333333],
  [13800.0, 0.3333333333333333, 0.1111111111111111],
  [17100.0, 0.1111111111111111, 0.3333333333333333],
  [6200.0, 0.3333333333333333, 0.16666666666666666],
  [7300.0, 0.16666666666666666, 0.3333333333333333],
  [12300.0, 0.3333333333333333, 0.3333333333333333],
  [56600.0, 0.3333333333333333, 0.3333333333333333],
  [7900.0, 0.3333333333333333, 0.3333333333333333],
  [31200.0, 0.3333333333333333, 0.08333333333333333],
  [1300.0, 0.08333333333333333, 0.3333333333333333],
  [200.0, 0.3333333333333333, 0.1111111111111111],
  [34200.0, 0.1111111111111111, 0.14814814814814814],
  [32200.0, 0.14814814814814814, 0.05555555555555555],
  [10000.0, 0.05555555555555555, 0.16666666666666666],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.56 => p.pan;
600.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
