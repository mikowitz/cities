[
  [25400.0, 0.0, 0.0],
  [6600.0, 0.0, 0.06349206349206349],
  [5300.0, 0.06349206349206349, 0.028571428571428574],
  [5100.0, 0.028571428571428574, 0.05952380952380953],
  [7800.0, 0.05952380952380953, 0.14285714285714285],
  [6000.0, 0.14285714285714285, 0.08928571428571429],
  [73100.0, 0.08928571428571429, 0.14285714285714285],
  [30300.0, 0.14285714285714285, 0.14285714285714285],
  [22500.0, 0.14285714285714285, 0.14285714285714285],
  [13900.0, 0.14285714285714285, 0.11224489795918367],
  [3800.0, 0.11224489795918367, 0.14285714285714285],
  [1600.0, 0.14285714285714285, 0.14285714285714285],
  [2700.0, 0.14285714285714285, 0.028571428571428574],
  [600.0, 0.028571428571428574, 0.07142857142857142],
  [12200.0, 0.07142857142857142, 0.09523809523809523],
  [600.0, 0.09523809523809523, 0.14285714285714285],
  [5800.0, 0.14285714285714285, 0.028571428571428574],
  [12800.0, 0.028571428571428574, 0.14285714285714285],
  [4300.0, 0.14285714285714285, 0.015873015873015872],
  [11100.0, 0.015873015873015872, 0.14285714285714285],
  [32700.0, 0.14285714285714285, 0.14285714285714285],
  [31100.0, 0.14285714285714285, 0.09523809523809523],
  [22500.0, 0.09523809523809523, 0.14285714285714285],
  [17100.0, 0.14285714285714285, 0.14285714285714285],
  [13600.0, 0.14285714285714285, 0.07936507936507937],
  [44600.0, 0.07936507936507937, 0.14285714285714285],
  [30100.0, 0.14285714285714285, 0.14285714285714285],
  [2100.0, 0.14285714285714285, 0.023809523809523808],
  [31500.0, 0.023809523809523808, 0.09523809523809523],
  [15700.0, 0.09523809523809523, 0.1142857142857143],
  [7000.0, 0.1142857142857143, 0.14285714285714285],
  [56700.0, 0.14285714285714285, 0.14285714285714285],
  [24500.0, 0.14285714285714285, 0.07936507936507937],
  [5200.0, 0.07936507936507937, 0.14285714285714285],
  [5700.0, 0.14285714285714285, 0.08571428571428572],
  [53600.0, 0.08571428571428572, 0.14285714285714285],
  [13200.0, 0.14285714285714285, 0.12244897959183673],
  [21500.0, 0.12244897959183673, 0.14285714285714285],
  [13000.0, 0.14285714285714285, 0.11904761904761905],
  [600.0, 0.11904761904761905, 0.061224489795918366],
  [2200.0, 0.061224489795918366, 0.08163265306122448],
  [26800.0, 0.08163265306122448, 0.14285714285714285],
  [18900.0, 0.14285714285714285, 0.14285714285714285],
  [30600.0, 0.14285714285714285, 0.1142857142857143],
  [6000.0, 0.1142857142857143, 0.012987012987012988],
  [24200.0, 0.012987012987012988, 0.14285714285714285],
  [10400.0, 0.14285714285714285, 0.14285714285714285],
  [25900.0, 0.14285714285714285, 0.14285714285714285],
  [35800.0, 0.14285714285714285, 0.14285714285714285],
  [21300.0, 0.14285714285714285, 0.03571428571428571],
  [7000.0, 0.03571428571428571, 0.14285714285714285],
  [13100.0, 0.14285714285714285, 0.14285714285714285],
  [15200.0, 0.14285714285714285, 0.12244897959183673],
  [74200.0, 0.12244897959183673, 0.03571428571428571],
  [45100.0, 0.03571428571428571, 0.14285714285714285],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.48 => p.pan;
700.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
