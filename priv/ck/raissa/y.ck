[
  [9700.0, 0.0, 0.0],
  [11200.0, 0.0, 0.2],
  [11100.0, 0.2, 0.2],
  [40600.0, 0.2, 0.1],
  [23100.0, 0.1, 0.06666666666666667],
  [2300.0, 0.06666666666666667, 0.2],
  [2900.0, 0.2, 0.06666666666666667],
  [32200.0, 0.06666666666666667, 0.05],
  [19600.0, 0.05, 0.2],
  [41400.0, 0.2, 0.2],
  [36900.0, 0.2, 0.06666666666666667],
  [7300.0, 0.06666666666666667, 0.06666666666666667],
  [37000.0, 0.06666666666666667, 0.2],
  [27200.0, 0.2, 0.2],
  [24500.0, 0.2, 0.04],
  [36800.0, 0.04, 0.2],
  [4000.0, 0.2, 0.2],
  [3400.0, 0.2, 0.2],
  [22500.0, 0.2, 0.2],
  [12200.0, 0.2, 0.2],
  [14500.0, 0.2, 0.1],
  [5500.0, 0.1, 0.1],
  [1500.0, 0.1, 0.2],
  [9200.0, 0.2, 0.2],
  [5400.0, 0.2, 0.2],
  [10800.0, 0.2, 0.2],
  [8900.0, 0.2, 0.2],
  [25200.0, 0.2, 0.03333333333333333],
  [7400.0, 0.03333333333333333, 0.15],
  [71000.0, 0.15, 0.2],
  [5600.0, 0.2, 0.2],
  [1700.0, 0.2, 0.2],
  [5200.0, 0.2, 0.2],
  [1700.0, 0.2, 0.2],
  [9400.0, 0.2, 0.2],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
0.85 => p.pan;
2500.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
