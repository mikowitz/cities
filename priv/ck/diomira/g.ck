[
  [2200.0, 0.0, 0.0],
  [7600.0, 0.0, 0.07142857142857142],
  [32900.0, 0.07142857142857142, 0.07142857142857142],
  [13300.0, 0.07142857142857142, 0.017857142857142856],
  [10900.0, 0.017857142857142856, 0.011904761904761904],
  [62800.0, 0.011904761904761904, 0.07142857142857142],
  [5400.0, 0.07142857142857142, 0.07142857142857142],
  [3600.0, 0.07142857142857142, 0.01020408163265306],
  [14900.0, 0.01020408163265306, 0.07142857142857142],
  [46700.0, 0.07142857142857142, 0.030612244897959183],
  [19100.0, 0.030612244897959183, 0.07142857142857142],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.48 => p.pan;
700.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
