[
  [11600.0, 0.0, 0.0],
  [3700.0, 0.0, 0.10204081632653061],
  [7300.0, 0.10204081632653061, 0.014285714285714287],
  [12000.0, 0.014285714285714287, 0.10204081632653061],
  [65100.0, 0.10204081632653061, 0.08571428571428572],
  [2400.0, 0.08571428571428572, 0.07142857142857142],
  [5000.0, 0.07142857142857142, 0.09523809523809523],
  [11900.0, 0.09523809523809523, 0.09523809523809523],
  [14800.0, 0.09523809523809523, 0.09523809523809523],
  [14800.0, 0.09523809523809523, 0.09523809523809523],
  [4400.0, 0.09523809523809523, 0.09523809523809523],
  [12800.0, 0.09523809523809523, 0.12244897959183673],
  [11500.0, 0.12244897959183673, 0.08571428571428572],
  [2500.0, 0.08571428571428572, 0.07142857142857142],
  [1100.0, 0.07142857142857142, 0.14285714285714285],
  [5400.0, 0.14285714285714285, 0.08571428571428572],
  [33400.0, 0.08571428571428572, 0.05357142857142857],
  [7800.0, 0.05357142857142857, 0.09523809523809523],
  [4100.0, 0.09523809523809523, 0.08163265306122448],
  [10700.0, 0.08163265306122448, 0.03571428571428571],
  [37500.0, 0.03571428571428571, 0.09999999999999999],
  [6900.0, 0.09999999999999999, 0.10714285714285714],
  [7800.0, 0.10714285714285714, 0.10714285714285714],
  [7800.0, 0.10714285714285714, 0.14285714285714285],
  [6700.0, 0.14285714285714285, 0.08571428571428572],
  [10100.0, 0.08571428571428572, 0.08571428571428572],
  [2200.0, 0.08571428571428572, 0.10204081632653061],
  [1000.0, 0.10204081632653061, 0.025974025974025976],
  [10000.0, 0.025974025974025976, 0.05194805194805195],
  [11000.0, 0.05194805194805195, 0.10714285714285714],
  [6800.0, 0.10714285714285714, 0.028571428571428574],
  [17800.0, 0.028571428571428574, 0.031746031746031744],
  [26000.0, 0.031746031746031744, 0.07936507936507937],
  [26800.0, 0.07936507936507937, 0.09523809523809523],
  [9200.0, 0.09523809523809523, 0.07142857142857142],
  [45000.0, 0.07142857142857142, 0.07142857142857142],
  [9900.0, 0.07142857142857142, 0.05714285714285715],
  [4700.0, 0.05714285714285715, 0.012987012987012988],
  [5300.0, 0.012987012987012988, 0.1168831168831169],
  [11200.0, 0.1168831168831169, 0.08571428571428572],
  [5300.0, 0.08571428571428572, 0.061224489795918366],
  [4800.0, 0.061224489795918366, 0.05714285714285715],
  [3200.0, 0.05714285714285715, 0.03571428571428571],
  [35800.0, 0.03571428571428571, 0.047619047619047616],
  [2700.0, 0.047619047619047616, 0.09523809523809523],
  [12600.0, 0.09523809523809523, 0.05714285714285715],
  [3300.0, 0.05714285714285715, 0.05714285714285715],
  [22400.0, 0.05714285714285715, 0.047619047619047616],
  [25600.0, 0.047619047619047616, 0.09523809523809523],
  [8800.0, 0.09523809523809523, 0.14285714285714285],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
0.56 => p.pan;
2100.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
