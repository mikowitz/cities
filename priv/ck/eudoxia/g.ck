[
  [20900.0, 0.0, 0.0],
  [33700.0, 0.0, 0.14285714285714285],
  [4800.0, 0.14285714285714285, 0.08571428571428572],
  [12600.0, 0.08571428571428572, 0.14285714285714285],
  [25500.0, 0.14285714285714285, 0.11904761904761905],
  [3500.0, 0.11904761904761905, 0.14285714285714285],
  [40200.0, 0.14285714285714285, 0.10714285714285714],
  [48300.0, 0.10714285714285714, 0.08571428571428572],
  [17500.0, 0.08571428571428572, 0.11904761904761905],
  [4600.0, 0.11904761904761905, 0.11904761904761905],
  [4500.0, 0.11904761904761905, 0.10714285714285714],
  [30000.0, 0.10714285714285714, 0.14285714285714285],
  [4500.0, 0.14285714285714285, 0.12244897959183673],
  [14500.0, 0.12244897959183673, 0.14285714285714285],
  [27900.0, 0.14285714285714285, 0.14285714285714285],
  [35400.0, 0.14285714285714285, 0.028571428571428574],
  [24400.0, 0.028571428571428574, 0.012987012987012988],
  [24200.0, 0.012987012987012988, 0.047619047619047616],
  [10800.0, 0.047619047619047616, 0.07936507936507937],
  [10000.0, 0.07936507936507937, 0.14285714285714285],
  [2500.0, 0.14285714285714285, 0.11904761904761905],
  [13700.0, 0.11904761904761905, 0.061224489795918366],
  [49300.0, 0.061224489795918366, 0.11904761904761905],
  [5500.0, 0.11904761904761905, 0.1142857142857143],
  [14700.0, 0.1142857142857143, 0.061224489795918366],
  [70600.0, 0.061224489795918366, 0.14285714285714285],
  [1200.0, 0.14285714285714285, 0.03571428571428571],
  [48900.0, 0.03571428571428571, 0.03571428571428571],
  [26600.0, 0.03571428571428571, 0.07142857142857142],
  [20400.0, 0.07142857142857142, 0.09523809523809523],
  [92600.0, 0.09523809523809523, 0.14285714285714285],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.48 => p.pan;
700.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
