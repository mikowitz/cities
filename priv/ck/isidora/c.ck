[
  [25300.0, 0.0, 0.0],
  [4900.0, 0.0, 0.08333333333333333],
  [5500.0, 0.08333333333333333, 0.06666666666666667],
  [16400.0, 0.06666666666666667, 0.08333333333333333],
  [1900.0, 0.08333333333333333, 0.19999999999999998],
  [14100.0, 0.19999999999999998, 0.1111111111111111],
  [1700.0, 0.1111111111111111, 0.2857142857142857],
  [26700.0, 0.2857142857142857, 0.19999999999999998],
  [9000.0, 0.19999999999999998, 0.09999999999999999],
  [300.0, 0.09999999999999999, 0.03333333333333333],
  [35200.0, 0.03333333333333333, 0.09999999999999999],
  [11300.0, 0.09999999999999999, 0.08333333333333333],
  [12400.0, 0.08333333333333333, 0.08333333333333333],
  [3900.0, 0.08333333333333333, 0.3],
  [1700.0, 0.3, 0.08333333333333333],
  [41800.0, 0.08333333333333333, 0.037037037037037035],
  [25000.0, 0.037037037037037035, 0.26666666666666666],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.78 => p.pan;
300.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
