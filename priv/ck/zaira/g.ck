[
  [3500.0, 0.0, 0.0],
  [21800.0, 0.0, 0.011904761904761904],
  [22000.0, 0.011904761904761904, 0.10714285714285714],
  [8200.0, 0.10714285714285714, 0.14285714285714285],
  [35300.0, 0.14285714285714285, 0.07142857142857142],
  [5000.0, 0.07142857142857142, 0.14285714285714285],
  [38500.0, 0.14285714285714285, 0.14285714285714285],
  [12100.0, 0.14285714285714285, 0.09523809523809523],
  [5400.0, 0.09523809523809523, 0.023809523809523808],
  [8200.0, 0.023809523809523808, 0.09523809523809523],
  [7600.0, 0.09523809523809523, 0.14285714285714285],
  [11100.0, 0.14285714285714285, 0.14285714285714285],
  [28500.0, 0.14285714285714285, 0.14285714285714285],
  [7300.0, 0.14285714285714285, 0.09523809523809523],
  [20100.0, 0.09523809523809523, 0.14285714285714285],
  [5000.0, 0.14285714285714285, 0.015873015873015872],
  [4500.0, 0.015873015873015872, 0.14285714285714285],
  [3600.0, 0.14285714285714285, 0.07142857142857142],
  [16200.0, 0.07142857142857142, 0.14285714285714285],
  [2600.0, 0.14285714285714285, 0.14285714285714285],
  [1200.0, 0.14285714285714285, 0.1142857142857143],
  [23400.0, 0.1142857142857143, 0.02040816326530612],
  [5000.0, 0.02040816326530612, 0.015873015873015872],
  [22700.0, 0.015873015873015872, 0.14285714285714285],
  [5700.0, 0.14285714285714285, 0.14285714285714285],
  [15900.0, 0.14285714285714285, 0.14285714285714285],
  [16600.0, 0.14285714285714285, 0.02040816326530612],
  [13900.0, 0.02040816326530612, 0.05952380952380953],
  [27300.0, 0.05952380952380953, 0.14285714285714285],
  [64700.0, 0.14285714285714285, 0.11904761904761905],
  [3900.0, 0.11904761904761905, 0.017857142857142856],
  [19300.0, 0.017857142857142856, 0.125],
  [3800.0, 0.125, 0.047619047619047616],
  [6200.0, 0.047619047619047616, 0.14285714285714285],
  [2900.0, 0.14285714285714285, 0.1142857142857143],
  [22300.0, 0.1142857142857143, 0.061224489795918366],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.48 => p.pan;
700.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
