[
  [7000.0, 0.0, 0.0],
  [18800.0, 0.0, 0.015384615384615385],
  [4500.0, 0.015384615384615385, 0.057692307692307696],
  [76800.0, 0.057692307692307696, 0.008547008547008546],
  [11800.0, 0.008547008547008546, 0.04395604395604395],
  [400.0, 0.04395604395604395, 0.038461538461538464],
  [12300.0, 0.038461538461538464, 0.04807692307692308],
  [18800.0, 0.04807692307692308, 0.01282051282051282],
  [14200.0, 0.01282051282051282, 0.038461538461538464],
  [23700.0, 0.038461538461538464, 0.057692307692307696],
  [17600.0, 0.057692307692307696, 0.057692307692307696],
  [11700.0, 0.057692307692307696, 0.02564102564102564],
  [1500.0, 0.02564102564102564, 0.057692307692307696],
  [7000.0, 0.057692307692307696, 0.019230769230769232],
  [9900.0, 0.019230769230769232, 0.057692307692307696],
  [1800.0, 0.057692307692307696, 0.07692307692307693],
  [8600.0, 0.07692307692307693, 0.07692307692307693],
  [15000.0, 0.07692307692307693, 0.057692307692307696],
  [2800.0, 0.057692307692307696, 0.057692307692307696],
  [23200.0, 0.057692307692307696, 0.057692307692307696],
  [27100.0, 0.057692307692307696, 0.01282051282051282],
  [70000.0, 0.01282051282051282, 0.02564102564102564],
  [17100.0, 0.02564102564102564, 0.038461538461538464],
  [400.0, 0.038461538461538464, 0.02564102564102564],
  [6700.0, 0.02564102564102564, 0.034188034188034185],
  [500.0, 0.034188034188034185, 0.009615384615384616],
  [11200.0, 0.009615384615384616, 0.028846153846153848],
  [33300.0, 0.028846153846153848, 0.06410256410256411],
  [2200.0, 0.06410256410256411, 0.07692307692307693],
  [6200.0, 0.07692307692307693, 0.057692307692307696],
  [500.0, 0.057692307692307696, 0.01282051282051282],
  [16200.0, 0.01282051282051282, 0.038461538461538464],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.04 => p.pan;
1300.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
