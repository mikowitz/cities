[
  [14400.0, 0.0, 0.0],
  [21400.0, 0.0, 0.14285714285714285],
  [2300.0, 0.14285714285714285, 0.08571428571428572],
  [15500.0, 0.08571428571428572, 0.1142857142857143],
  [7900.0, 0.1142857142857143, 0.04285714285714286],
  [16800.0, 0.04285714285714286, 0.12244897959183673],
  [10200.0, 0.12244897959183673, 0.04081632653061224],
  [2800.0, 0.04081632653061224, 0.10204081632653061],
  [26900.0, 0.10204081632653061, 0.02040816326530612],
  [2200.0, 0.02040816326530612, 0.03571428571428571],
  [10400.0, 0.03571428571428571, 0.08928571428571429],
  [15400.0, 0.08928571428571429, 0.047619047619047616],
  [12300.0, 0.047619047619047616, 0.09523809523809523],
  [3300.0, 0.09523809523809523, 0.08571428571428572],
  [2700.0, 0.08571428571428572, 0.09523809523809523],
  [9600.0, 0.09523809523809523, 0.08571428571428572],
  [16400.0, 0.08571428571428572, 0.05714285714285715],
  [8500.0, 0.05714285714285715, 0.09523809523809523],
  [4600.0, 0.09523809523809523, 0.07142857142857142],
  [2200.0, 0.07142857142857142, 0.04081632653061224],
  [11100.0, 0.04081632653061224, 0.10204081632653061],
  [26600.0, 0.10204081632653061, 0.031746031746031744],
  [1600.0, 0.031746031746031744, 0.08571428571428572],
  [170900.0, 0.08571428571428572, 0.023809523809523808],
  [2200.0, 0.023809523809523808, 0.04081632653061224],
  [16200.0, 0.04081632653061224, 0.10204081632653061],
  [6500.0, 0.10204081632653061, 0.08571428571428572],
  [10600.0, 0.08571428571428572, 0.11904761904761905],
  [2400.0, 0.11904761904761905, 0.08571428571428572],
  [14600.0, 0.08571428571428572, 0.014285714285714287],
  [7600.0, 0.014285714285714287, 0.03571428571428571],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
0.56 => p.pan;
2100.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
