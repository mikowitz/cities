[
  [5000.0, 0.0, 0.0],
  [9500.0, 0.0, 0.3],
  [6500.0, 0.3, 0.5],
  [12900.0, 0.5, 0.08333333333333333],
  [8700.0, 0.08333333333333333, 0.2857142857142857],
  [14300.0, 0.2857142857142857, 0.2777777777777778],
  [14800.0, 0.2777777777777778, 0.5],
  [5400.0, 0.5, 0.5],
  [26200.0, 0.5, 0.375],
  [5800.0, 0.375, 0.5],
  [6400.0, 0.5, 0.05],
  [22400.0, 0.05, 0.4166666666666667],
  [2700.0, 0.4166666666666667, 0.07142857142857142],
  [4200.0, 0.07142857142857142, 0.5],
  [11200.0, 0.5, 0.2857142857142857],
  [5200.0, 0.2857142857142857, 0.08333333333333333],
  [4800.0, 0.08333333333333333, 0.05],
  [2100.0, 0.05, 0.05555555555555555],
  [5500.0, 0.05555555555555555, 0.3888888888888889],
  [13500.0, 0.3888888888888889, 0.5],
  [5200.0, 0.5, 0.2857142857142857],
  [14900.0, 0.2857142857142857, 0.5],
  [3900.0, 0.5, 0.5],
  [9200.0, 0.5, 0.5],
  [6800.0, 0.5, 0.5],
  [6200.0, 0.5, 0.07142857142857142],
  [3800.0, 0.07142857142857142, 0.42857142857142855],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.7 => p.pan;
400.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
