[
  [12800.0, 0.0, 0.0],
  [900.0, 0.0, 0.5],
  [1800.0, 0.5, 0.0625],
  [35600.0, 0.0625, 0.375],
  [4200.0, 0.375, 0.3181818181818182],
  [35300.0, 0.3181818181818182, 0.4444444444444444],
  [17000.0, 0.4444444444444444, 0.1],
  [13000.0, 0.1, 0.5],
  [3900.0, 0.5, 0.3333333333333333],
  [154700.0, 0.3333333333333333, 0.2857142857142857],
  [26600.0, 0.2857142857142857, 0.07142857142857142],
  [17700.0, 0.07142857142857142, 0.08333333333333333],
  [44600.0, 0.08333333333333333, 0.375],
  [35400.0, 0.375, 0.35714285714285715],
  [29700.0, 0.35714285714285715, 0.1],
  [500.0, 0.1, 0.08333333333333333],
  [10800.0, 0.08333333333333333, 0.3333333333333333],
  [10300.0, 0.3333333333333333, 0.2],
  [37200.0, 0.2, 0.15],
  [85100.0, 0.15, 0.5],
  [56500.0, 0.5, 0.21428571428571427],
  [18200.0, 0.21428571428571427, 0.3125],
  [300.0, 0.3125, 0.22727272727272727],
  [93500.0, 0.22727272727272727, 0.2727272727272727],
  [2000.0, 0.2727272727272727, 0.08333333333333333],
  [500.0, 0.08333333333333333, 0.08333333333333333],
  [3300.0, 0.08333333333333333, 0.3333333333333333],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
0.19 => p.pan;
1600.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
