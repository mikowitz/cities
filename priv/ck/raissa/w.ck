[
  [11000.0, 0.0, 0.0],
  [10100.0, 0.0, 0.008695652173913044],
  [52600.0, 0.008695652173913044, 0.010869565217391304],
  [14800.0, 0.010869565217391304, 0.010869565217391304],
  [3800.0, 0.010869565217391304, 0.003952569169960474],
  [14400.0, 0.003952569169960474, 0.008695652173913044],
  [10100.0, 0.008695652173913044, 0.010869565217391304],
  [15000.0, 0.010869565217391304, 0.010869565217391304],
  [18900.0, 0.010869565217391304, 0.021739130434782608],
  [13000.0, 0.021739130434782608, 0.03260869565217391],
  [27500.0, 0.03260869565217391, 0.004830917874396135],
  [20900.0, 0.004830917874396135, 0.008695652173913044],
  [2100.0, 0.008695652173913044, 0.006211180124223602],
  [3800.0, 0.006211180124223602, 0.037267080745341616],
  [30000.0, 0.037267080745341616, 0.010869565217391304],
  [2100.0, 0.010869565217391304, 0.007246376811594202],
  [200.0, 0.007246376811594202, 0.043478260869565216],
  [28700.0, 0.043478260869565216, 0.014492753623188404],
  [31400.0, 0.014492753623188404, 0.014492753623188404],
  [27100.0, 0.014492753623188404, 0.014492753623188404],
  [15800.0, 0.014492753623188404, 0.014492753623188404],
  [20200.0, 0.014492753623188404, 0.008695652173913044],
  [5700.0, 0.008695652173913044, 0.010869565217391304],
  [78000.0, 0.010869565217391304, 0.014492753623188404],
  [5300.0, 0.014492753623188404, 0.010869565217391304],
  [16500.0, 0.010869565217391304, 0.043478260869565216],
  [63700.0, 0.043478260869565216, 0.008695652173913044],
  [9900.0, 0.008695652173913044, 0.024844720496894408],
  [1300.0, 0.024844720496894408, 0.034782608695652174],
  [27500.0, 0.034782608695652174, 0.043478260869565216],
  [3600.0, 0.043478260869565216, 0.024844720496894408],
  [3900.0, 0.024844720496894408, 0.02898550724637681],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
0.7 => p.pan;
2300.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
