[
  [15700.0, 0.0, 0.0],
  [34800.0, 0.0, 0.2222222222222222],
  [36800.0, 0.2222222222222222, 0.08333333333333333],
  [1500.0, 0.08333333333333333, 0.05],
  [12600.0, 0.05, 0.2],
  [37600.0, 0.2, 0.125],
  [4700.0, 0.125, 0.0625],
  [300.0, 0.0625, 0.14285714285714285],
  [67600.0, 0.14285714285714285, 0.21428571428571427],
  [6500.0, 0.21428571428571427, 0.1111111111111111],
  [3400.0, 0.1111111111111111, 0.5],
  [2800.0, 0.5, 0.2222222222222222],
  [32100.0, 0.2222222222222222, 0.2222222222222222],
  [14600.0, 0.2222222222222222, 0.25],
  [300.0, 0.25, 0.21428571428571427],
  [41300.0, 0.21428571428571427, 0.2857142857142857],
  [39800.0, 0.2857142857142857, 0.1],
  [500.0, 0.1, 0.1],
  [11900.0, 0.1, 0.3],
  [6800.0, 0.3, 0.1111111111111111],
  [27200.0, 0.1111111111111111, 0.125],
  [3800.0, 0.125, 0.1],
  [8700.0, 0.1, 0.1],
  [24800.0, 0.1, 0.05],
  [30900.0, 0.05, 0.1111111111111111],
  [13200.0, 0.1111111111111111, 0.25],
  [36700.0, 0.25, 0.16666666666666666],
  [3600.0, 0.16666666666666666, 0.2727272727272727],
  [47600.0, 0.2727272727272727, 0.045454545454545456],
  [33700.0, 0.045454545454545456, 0.2857142857142857],
  [52900.0, 0.2857142857142857, 0.16666666666666666],
  [1200.0, 0.16666666666666666, 0.1],
  [7700.0, 0.1, 0.3],
  [4400.0, 0.3, 0.08333333333333333],
  [4600.0, 0.08333333333333333, 0.5],
  [25700.0, 0.5, 0.05],
  [41100.0, 0.05, 0.3],
  [48700.0, 0.3, 0.21428571428571427],
  [7300.0, 0.21428571428571427, 0.08333333333333333],
  [1500.0, 0.08333333333333333, 0.08333333333333333],
  [11700.0, 0.08333333333333333, 0.1],
  [300.0, 0.1, 0.2222222222222222],
  [2800.0, 0.2222222222222222, 0.2777777777777778],
  [18500.0, 0.2777777777777778, 0.1],
  [27500.0, 0.1, 0.1],
  [8200.0, 0.1, 0.125],
  [8100.0, 0.125, 0.2],
  [300.0, 0.2, 0.3],
  [34400.0, 0.3, 0.4],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
0.19 => p.pan;
1600.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
