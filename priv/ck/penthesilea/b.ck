[
  [2700.0, 0.0, 0.0],
  [8400.0, 0.0, 0.2],
  [2600.0, 0.2, 0.1],
  [3300.0, 0.1, 0.25],
  [13200.0, 0.25, 0.35],
  [34600.0, 0.35, 0.4],
  [12000.0, 0.4, 0.25],
  [7600.0, 0.25, 0.14285714285714285],
  [20100.0, 0.14285714285714285, 0.07142857142857142],
  [49300.0, 0.07142857142857142, 0.07142857142857142],
  [21000.0, 0.07142857142857142, 0.25],
  [89500.0, 0.25, 0.07142857142857142],
  [4900.0, 0.07142857142857142, 0.05555555555555555],
  [1400.0, 0.05555555555555555, 0.125],
  [61200.0, 0.125, 0.125],
  [21700.0, 0.125, 0.5],
  [24700.0, 0.5, 0.16666666666666666],
  [2200.0, 0.16666666666666666, 0.25],
  [23500.0, 0.25, 0.5],
  [44500.0, 0.5, 0.3125],
  [69700.0, 0.3125, 0.1],
  [7900.0, 0.1, 0.125],
  [13600.0, 0.125, 0.16666666666666666],
  [14100.0, 0.16666666666666666, 0.25],
  [30700.0, 0.25, 0.1111111111111111],
  [96300.0, 0.1111111111111111, 0.08333333333333333],
  [2200.0, 0.08333333333333333, 0.21428571428571427],
  [96600.0, 0.21428571428571427, 0.42857142857142855],
  [26700.0, 0.42857142857142855, 0.375],
  [52500.0, 0.375, 0.08333333333333333],
  [12900.0, 0.08333333333333333, 0.4],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.85 => p.pan;
200.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
