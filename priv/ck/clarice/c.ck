[
  [0.0, 0.0, 0.0],
  [2600.0, 0.0, 0.047619047619047616],
  [5400.0, 0.047619047619047616, 0.2857142857142857],
  [15700.0, 0.2857142857142857, 0.08333333333333333],
  [17300.0, 0.08333333333333333, 0.14285714285714285],
  [2600.0, 0.14285714285714285, 0.047619047619047616],
  [11900.0, 0.047619047619047616, 0.2857142857142857],
  [4700.0, 0.2857142857142857, 0.041666666666666664],
  [1700.0, 0.041666666666666664, 0.26666666666666666],
  [6400.0, 0.26666666666666666, 0.06666666666666667],
  [2300.0, 0.06666666666666667, 0.1111111111111111],
  [17700.0, 0.1111111111111111, 0.06666666666666667],
  [5200.0, 0.06666666666666667, 0.037037037037037035],
  [1400.0, 0.037037037037037035, 0.1111111111111111],
  [12500.0, 0.1111111111111111, 0.2962962962962963],
  [1000.0, 0.2962962962962963, 0.2380952380952381],
  [6100.0, 0.2380952380952381, 0.03333333333333333],
  [3000.0, 0.03333333333333333, 0.041666666666666664],
  [23100.0, 0.041666666666666664, 0.25],
  [3200.0, 0.25, 0.2857142857142857],
  [5000.0, 0.2857142857142857, 0.25],
  [2500.0, 0.25, 0.30303030303030304],
  [3300.0, 0.30303030303030304, 0.08333333333333333],
  [55000.0, 0.08333333333333333, 0.16666666666666666],
  [800.0, 0.16666666666666666, 0.047619047619047616],
  [2600.0, 0.047619047619047616, 0.2857142857142857],
  [18800.0, 0.2857142857142857, 0.26666666666666666],
  [18600.0, 0.26666666666666666, 0.06666666666666667],
  [9300.0, 0.06666666666666667, 0.26666666666666666],
  [700.0, 0.26666666666666666, 0.19047619047619047],
  [55500.0, 0.19047619047619047, 0.041666666666666664],
  [21900.0, 0.041666666666666664, 0.047619047619047616],
  [2600.0, 0.047619047619047616, 0.047619047619047616],
  [5300.0, 0.047619047619047616, 0.2857142857142857],
  [2600.0, 0.2857142857142857, 0.047619047619047616],
  [20100.0, 0.047619047619047616, 0.2857142857142857],
  [10700.0, 0.2857142857142857, 0.06666666666666667],
  [2600.0, 0.06666666666666667, 0.041666666666666664],
  [69800.0, 0.041666666666666664, 0.25],
  [2600.0, 0.25, 0.20833333333333334],
  [8900.0, 0.20833333333333334, 0.3125],
  [3900.0, 0.3125, 0.020833333333333332],
  [2600.0, 0.020833333333333332, 0.20833333333333334],
  [5400.0, 0.20833333333333334, 0.3125],
  [2200.0, 0.3125, 0.2962962962962963],
  [16400.0, 0.2962962962962963, 0.08333333333333333],
  [3500.0, 0.08333333333333333, 0.2380952380952381],
  [15500.0, 0.2380952380952381, 0.19047619047619047],
  [1800.0, 0.19047619047619047, 0.03333333333333333],
  [8300.0, 0.03333333333333333, 0.19999999999999998],
  [2600.0, 0.19999999999999998, 0.047619047619047616],
  [1500.0, 0.047619047619047616, 0.2857142857142857],
  [2600.0, 0.2857142857142857, 0.041666666666666664],
  [6400.0, 0.041666666666666664, 0.25],
  [13300.0, 0.25, 0.08333333333333333],
  [8000.0, 0.08333333333333333, 0.26666666666666666],
  [2600.0, 0.26666666666666666, 0.047619047619047616],
  [48000.0, 0.047619047619047616, 0.2857142857142857],
  [9200.0, 0.2857142857142857, 0.08333333333333333],
  [39700.0, 0.08333333333333333, 0.0909090909090909],
  [23300.0, 0.0909090909090909, 0.19047619047619047],
  [5600.0, 0.19047619047619047, 0.16666666666666666],
  [3700.0, 0.16666666666666666, 0.06666666666666667],
  [6500.0, 0.06666666666666667, 0.041666666666666664],
  [16900.0, 0.041666666666666664, 0.14285714285714285],
  [6200.0, 0.14285714285714285, 0.14285714285714285],
  [3600.0, 0.14285714285714285, 0.0909090909090909],
  [6200.0, 0.0909090909090909, 0.30303030303030304],
  [3600.0, 0.30303030303030304, 0.08333333333333333],
  [10800.0, 0.08333333333333333, 0.26666666666666666],
  [1400.0, 0.26666666666666666, 0.09999999999999999],
  [16300.0, 0.09999999999999999, 0.26666666666666666],
  [2600.0, 0.26666666666666666, 0.047619047619047616],
  [5700.0, 0.047619047619047616, 0.2857142857142857],
  [3400.0, 0.2857142857142857, 0.047619047619047616],
  [14800.0, 0.047619047619047616, 0.047619047619047616],
  [9800.0, 0.047619047619047616, 0.2380952380952381],
  [1700.0, 0.2380952380952381, 0.25],
  [2600.0, 0.25, 0.047619047619047616],
  [300.0, 0.047619047619047616, 0.2857142857142857],
  [1200.0, 0.2857142857142857, 0.047619047619047616],
  [27700.0, 0.047619047619047616, 0.2857142857142857],
  [2300.0, 0.2857142857142857, 0.14285714285714285],
  [2600.0, 0.14285714285714285, 0.041666666666666664],
  [17700.0, 0.041666666666666664, 0.25],
  [5700.0, 0.25, 0.03333333333333333],
  [8700.0, 0.03333333333333333, 0.041666666666666664],
  [13500.0, 0.041666666666666664, 0.047619047619047616],
  [6900.0, 0.047619047619047616, 0.26666666666666666],
  [1600.0, 0.26666666666666666, 0.047619047619047616],
  [34500.0, 0.047619047619047616, 0.19047619047619047],
  [10600.0, 0.19047619047619047, 0.041666666666666664],
  [3900.0, 0.041666666666666664, 0.14814814814814814],
  [800.0, 0.14814814814814814, 0.03333333333333333],
  [10000.0, 0.03333333333333333, 0.19999999999999998],
  [200.0, 0.19999999999999998, 0.09999999999999999],
  [10400.0, 0.09999999999999999, 0.13333333333333333],
  [2600.0, 0.13333333333333333, 0.047619047619047616],
  [23400.0, 0.047619047619047616, 0.2857142857142857],
  [2700.0, 0.2857142857142857, 0.041666666666666664],
  [6200.0, 0.041666666666666664, 0.06666666666666667],
  [1600.0, 0.06666666666666667, 0.047619047619047616],
  [19300.0, 0.047619047619047616, 0.19047619047619047],
  [37500.0, 0.19047619047619047, 0.06666666666666667],
  [11700.0, 0.06666666666666667, 0.2380952380952381],
  [10600.0, 0.2380952380952381, 0.26666666666666666],
  [9400.0, 0.26666666666666666, 0.25],
  [12500.0, 0.25, 0.25],
  [2600.0, 0.25, 0.047619047619047616],
  [5200.0, 0.047619047619047616, 0.2857142857142857],
  [4300.0, 0.2857142857142857, 0.037037037037037035],
  [4400.0, 0.037037037037037035, 0.047619047619047616],
  [1500.0, 0.047619047619047616, 0.14814814814814814],
  [6300.0, 0.14814814814814814, 0.25925925925925924],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.78 => p.pan;
300.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
