[
  [1500.0, 0.0, 0.0],
  [600.0, 0.0, 0.5],
  [3500.0, 0.5, 0.3333333333333333],
  [19500.0, 0.3333333333333333, 0.5],
  [3700.0, 0.5, 0.5],
  [6500.0, 0.5, 0.2857142857142857],
  [200.0, 0.2857142857142857, 0.5],
  [10300.0, 0.5, 0.5],
  [3000.0, 0.5, 0.25],
  [1100.0, 0.25, 0.4166666666666667],
  [2400.0, 0.4166666666666667, 0.15],
  [9400.0, 0.15, 0.35],
  [800.0, 0.35, 0.4166666666666667],
  [8300.0, 0.4166666666666667, 0.16666666666666666],
  [4300.0, 0.16666666666666666, 0.16666666666666666],
  [1800.0, 0.16666666666666666, 0.16666666666666666],
  [10600.0, 0.16666666666666666, 0.25],
  [6900.0, 0.25, 0.3],
  [600.0, 0.3, 0.08333333333333333],
  [5200.0, 0.08333333333333333, 0.3333333333333333],
  [11800.0, 0.3333333333333333, 0.5],
  [5300.0, 0.5, 0.4],
  [900.0, 0.4, 0.25],
  [6500.0, 0.25, 0.1],
  [5700.0, 0.1, 0.3333333333333333],
  [10400.0, 0.3333333333333333, 0.16666666666666666],
  [5400.0, 0.16666666666666666, 0.5],
  [11200.0, 0.5, 0.5],
  [10000.0, 0.5, 0.3333333333333333],
  [4300.0, 0.3333333333333333, 0.2222222222222222],
  [3900.0, 0.2222222222222222, 0.2777777777777778],
  [500.0, 0.2777777777777778, 0.25],
  [3000.0, 0.25, 0.5],
  [1500.0, 0.5, 0.3333333333333333],
  [3800.0, 0.3333333333333333, 0.07142857142857142],
  [4100.0, 0.07142857142857142, 0.25],
  [4000.0, 0.25, 0.5],
  [4800.0, 0.5, 0.16666666666666666],
  [6000.0, 0.16666666666666666, 0.3333333333333333],
  [6900.0, 0.3333333333333333, 0.25],
  [1300.0, 0.25, 0.16666666666666666],
  [8100.0, 0.16666666666666666, 0.2],
  [2500.0, 0.2, 0.25],
  [8000.0, 0.25, 0.5],
  [1400.0, 0.5, 0.16666666666666666],
  [1600.0, 0.16666666666666666, 0.07142857142857142],
  [4000.0, 0.07142857142857142, 0.35714285714285715],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.93 => p.pan;
100.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
