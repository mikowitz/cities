[
  [9200.0, 0.0, 0.0],
  [3700.0, 0.0, 0.047619047619047616],
  [1600.0, 0.047619047619047616, 0.14285714285714285],
  [31400.0, 0.14285714285714285, 0.03571428571428571],
  [14200.0, 0.03571428571428571, 0.09523809523809523],
  [23300.0, 0.09523809523809523, 0.07142857142857142],
  [32600.0, 0.07142857142857142, 0.09523809523809523],
  [59400.0, 0.09523809523809523, 0.07142857142857142],
  [7100.0, 0.07142857142857142, 0.09523809523809523],
  [6200.0, 0.09523809523809523, 0.08571428571428572],
  [5300.0, 0.08571428571428572, 0.14285714285714285],
  [28000.0, 0.14285714285714285, 0.10714285714285714],
  [6600.0, 0.10714285714285714, 0.14285714285714285],
  [16500.0, 0.14285714285714285, 0.14285714285714285],
  [10000.0, 0.14285714285714285, 0.10714285714285714],
  [3100.0, 0.10714285714285714, 0.03571428571428571],
  [2000.0, 0.03571428571428571, 0.10714285714285714],
  [6800.0, 0.10714285714285714, 0.14285714285714285],
  [14300.0, 0.14285714285714285, 0.14285714285714285],
  [15800.0, 0.14285714285714285, 0.14285714285714285],
  [4100.0, 0.14285714285714285, 0.14285714285714285],
  [6400.0, 0.14285714285714285, 0.14285714285714285],
  [14300.0, 0.14285714285714285, 0.09523809523809523],
  [30200.0, 0.09523809523809523, 0.07142857142857142],
  [10500.0, 0.07142857142857142, 0.12987012987012986],
  [3300.0, 0.12987012987012986, 0.08571428571428572],
  [3300.0, 0.08571428571428572, 0.14285714285714285],
  [10500.0, 0.14285714285714285, 0.047619047619047616],
  [23600.0, 0.047619047619047616, 0.10714285714285714],
  [2900.0, 0.10714285714285714, 0.14285714285714285],
  [12500.0, 0.14285714285714285, 0.14285714285714285],
  [5900.0, 0.14285714285714285, 0.14285714285714285],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
0.56 => p.pan;
2100.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
