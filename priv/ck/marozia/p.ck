[
  [33000.0, 0.0, 0.0],
  [25400.0, 0.0, 0.21428571428571427],
  [3700.0, 0.21428571428571427, 0.0625],
  [95000.0, 0.0625, 0.1],
  [61400.0, 0.1, 0.5],
  [19800.0, 0.5, 0.1],
  [500.0, 0.1, 0.08333333333333333],
  [800.0, 0.08333333333333333, 0.3333333333333333],
  [5700.0, 0.3333333333333333, 0.05555555555555555],
  [1500.0, 0.05555555555555555, 0.045454545454545456],
  [18300.0, 0.045454545454545456, 0.18181818181818182],
  [31900.0, 0.18181818181818182, 0.2727272727272727],
  [26700.0, 0.2727272727272727, 0.14285714285714285],
  [1500.0, 0.14285714285714285, 0.0625],
  [39900.0, 0.0625, 0.25],
  [2200.0, 0.25, 0.07142857142857142],
  [22700.0, 0.07142857142857142, 0.42857142857142855],
  [22400.0, 0.42857142857142855, 0.2],
  [500.0, 0.2, 0.08333333333333333],
  [29500.0, 0.08333333333333333, 0.3333333333333333],
  [300.0, 0.3333333333333333, 0.25],
  [13200.0, 0.25, 0.3125],
  [300.0, 0.3125, 0.21428571428571427],
  [11700.0, 0.21428571428571427, 0.2857142857142857],
  [6300.0, 0.2857142857142857, 0.2857142857142857],
  [6100.0, 0.2857142857142857, 0.25],
  [8200.0, 0.25, 0.25],
  [300.0, 0.25, 0.16666666666666666],
  [17400.0, 0.16666666666666666, 0.25],
  [2200.0, 0.25, 0.07142857142857142],
  [15800.0, 0.07142857142857142, 0.42857142857142855],
  [5400.0, 0.42857142857142855, 0.2],
  [47000.0, 0.2, 0.07142857142857142],
  [11400.0, 0.07142857142857142, 0.0625],
  [5800.0, 0.0625, 0.0625],
  [11000.0, 0.0625, 0.0625],
  [29800.0, 0.0625, 0.16666666666666666],
  [15800.0, 0.16666666666666666, 0.2727272727272727],
  [300.0, 0.2727272727272727, 0.25],
  [16300.0, 0.25, 0.3333333333333333],
  [17900.0, 0.3333333333333333, 0.15],
  [8600.0, 0.15, 0.05],
  [60200.0, 0.05, 0.1111111111111111],
  [41700.0, 0.1111111111111111, 0.3333333333333333],
  [21800.0, 0.3333333333333333, 0.5],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
0.19 => p.pan;
1600.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
