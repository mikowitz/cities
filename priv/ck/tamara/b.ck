[
  [83100.0, 0.0, 0.0],
  [24500.0, 0.0, 0.1875],
  [43100.0, 0.1875, 0.43333333333333335],
  [17500.0, 0.43333333333333335, 0.25],
  [38700.0, 0.25, 0.16666666666666666],
  [3000.0, 0.16666666666666666, 0.25],
  [71000.0, 0.25, 0.0625],
  [21200.0, 0.0625, 0.2222222222222222],
  [15500.0, 0.2222222222222222, 0.08333333333333333],
  [12500.0, 0.08333333333333333, 0.08333333333333333],
  [5800.0, 0.08333333333333333, 0.25],
  [37300.0, 0.25, 0.07142857142857142],
  [44600.0, 0.07142857142857142, 0.3],
  [8900.0, 0.3, 0.0625],
  [58500.0, 0.0625, 0.2777777777777778],
  [22700.0, 0.2777777777777778, 0.07142857142857142],
  [5900.0, 0.07142857142857142, 0.375],
  [12200.0, 0.375, 0.16666666666666666],
  [5100.0, 0.16666666666666666, 0.13636363636363635],
  [29600.0, 0.13636363636363635, 0.3125],
  [55700.0, 0.3125, 0.0625],
  [46600.0, 0.0625, 0.07142857142857142],
  [400.0, 0.07142857142857142, 0.25],
  [107000.0, 0.25, 0.07142857142857142],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.85 => p.pan;
200.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
