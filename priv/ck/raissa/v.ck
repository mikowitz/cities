[
  [46300.0, 0.0, 0.0],
  [4300.0, 0.0, 0.045454545454545456],
  [43800.0, 0.045454545454545456, 0.05454545454545454],
  [27300.0, 0.05454545454545454, 0.03636363636363637],
  [75700.0, 0.03636363636363637, 0.045454545454545456],
  [39600.0, 0.045454545454545456, 0.06818181818181818],
  [69400.0, 0.06818181818181818, 0.03636363636363637],
  [22800.0, 0.03636363636363637, 0.03305785123966942],
  [44100.0, 0.03305785123966942, 0.07272727272727274],
  [35100.0, 0.07272727272727274, 0.06818181818181818],
  [35100.0, 0.06818181818181818, 0.045454545454545456],
  [33800.0, 0.045454545454545456, 0.045454545454545456],
  [27200.0, 0.045454545454545456, 0.01515151515151515],
  [11200.0, 0.01515151515151515, 0.0303030303030303],
  [16700.0, 0.0303030303030303, 0.045454545454545456],
  [11900.0, 0.045454545454545456, 0.056818181818181816],
  [19700.0, 0.056818181818181816, 0.045454545454545456],
  [24900.0, 0.045454545454545456, 0.03636363636363637],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
0.63 => p.pan;
2200.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
