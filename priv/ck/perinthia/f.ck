[
  [8800.0, 0.0, 0.0],
  [2400.0, 0.0, 0.1111111111111111],
  [4400.0, 0.1111111111111111, 0.03333333333333333],
  [28800.0, 0.03333333333333333, 0.3333333333333333],
  [16000.0, 0.3333333333333333, 0.3333333333333333],
  [9800.0, 0.3333333333333333, 0.3333333333333333],
  [10100.0, 0.3333333333333333, 0.06666666666666667],
  [35100.0, 0.06666666666666667, 0.3333333333333333],
  [24400.0, 0.3333333333333333, 0.3333333333333333],
  [2400.0, 0.3333333333333333, 0.1111111111111111],
  [1200.0, 0.1111111111111111, 0.3333333333333333],
  [9900.0, 0.3333333333333333, 0.041666666666666664],
  [16200.0, 0.041666666666666664, 0.06666666666666667],
  [7500.0, 0.06666666666666667, 0.03333333333333333],
  [5100.0, 0.03333333333333333, 0.06666666666666667],
  [26600.0, 0.06666666666666667, 0.3333333333333333],
  [5400.0, 0.3333333333333333, 0.14285714285714285],
  [1200.0, 0.14285714285714285, 0.3333333333333333],
  [29800.0, 0.3333333333333333, 0.037037037037037035],
  [38100.0, 0.037037037037037035, 0.037037037037037035],
  [72300.0, 0.037037037037037035, 0.06666666666666667],
  [27700.0, 0.06666666666666667, 0.2777777777777778],
  [5500.0, 0.2777777777777778, 0.08333333333333333],
  [2900.0, 0.08333333333333333, 0.19999999999999998],
  [31700.0, 0.19999999999999998, 0.041666666666666664],
  [4200.0, 0.041666666666666664, 0.06666666666666667],
  [200.0, 0.06666666666666667, 0.1111111111111111],
  [30800.0, 0.1111111111111111, 0.14814814814814814],
  [26400.0, 0.14814814814814814, 0.047619047619047616],
  [4800.0, 0.047619047619047616, 0.3333333333333333],
  [7300.0, 0.3333333333333333, 0.1111111111111111],
  [3600.0, 0.1111111111111111, 0.3333333333333333],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.56 => p.pan;
600.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
