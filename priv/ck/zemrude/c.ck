[
  [8900.0, 0.0, 0.0],
  [3700.0, 0.0, 0.26666666666666666],
  [43600.0, 0.26666666666666666, 0.08333333333333333],
  [57100.0, 0.08333333333333333, 0.041666666666666664],
  [5100.0, 0.041666666666666664, 0.05555555555555555],
  [5300.0, 0.05555555555555555, 0.1111111111111111],
  [6300.0, 0.1111111111111111, 0.05555555555555555],
  [1900.0, 0.05555555555555555, 0.2777777777777778],
  [22700.0, 0.2777777777777778, 0.08333333333333333],
  [32400.0, 0.08333333333333333, 0.047619047619047616],
  [12000.0, 0.047619047619047616, 0.2222222222222222],
  [15000.0, 0.2222222222222222, 0.25],
  [19000.0, 0.25, 0.1111111111111111],
  [20000.0, 0.1111111111111111, 0.06666666666666667],
  [5600.0, 0.06666666666666667, 0.1111111111111111],
  [4800.0, 0.1111111111111111, 0.2777777777777778],
  [23200.0, 0.2777777777777778, 0.027777777777777776],
  [28100.0, 0.027777777777777776, 0.041666666666666664],
  [9900.0, 0.041666666666666664, 0.047619047619047616],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.78 => p.pan;
300.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
