[
  [4700.0, 0.0, 0.0],
  [110100.0, 0.0, 0.2],
  [17400.0, 0.2, 0.2],
  [21700.0, 0.2, 0.2],
  [23200.0, 0.2, 0.2],
  [3800.0, 0.2, 0.2],
  [6400.0, 0.2, 0.15],
  [1100.0, 0.15, 0.03333333333333333],
  [16300.0, 0.03333333333333333, 0.1],
  [11300.0, 0.1, 0.2],
  [13900.0, 0.2, 0.1],
  [10200.0, 0.1, 0.2],
  [6300.0, 0.2, 0.06666666666666667],
  [17100.0, 0.06666666666666667, 0.2],
  [4700.0, 0.2, 0.2],
  [7700.0, 0.2, 0.2],
  [95800.0, 0.2, 0.2],
  [11900.0, 0.2, 0.2],
  [26400.0, 0.2, 0.2],
  [9800.0, 0.2, 0.2],
  [14100.0, 0.2, 0.06666666666666667],
  [34800.0, 0.06666666666666667, 0.06666666666666667],
  [1900.0, 0.06666666666666667, 0.2],
  [59700.0, 0.2, 0.06666666666666667],
  [5700.0, 0.06666666666666667, 0.2],
  [36400.0, 0.2, 0.2],
  [300.0, 0.2, 0.2],
  [8200.0, 0.2, 0.1],
  [26500.0, 0.1, 0.2],
  [13800.0, 0.2, 0.2],
  [26100.0, 0.2, 0.2],
  [3100.0, 0.2, 0.2],
  [24000.0, 0.2, 0.2],
  [10500.0, 0.2, 0.2],
  [21500.0, 0.2, 0.2],
  [20100.0, 0.2, 0.1],
  [5900.0, 0.1, 0.2],
  [33900.0, 0.2, 0.08],
  [4900.0, 0.08, 0.1],
  [200.0, 0.1, 0.2],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
0.85 => p.pan;
2500.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
