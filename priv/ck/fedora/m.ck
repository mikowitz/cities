[
  [12600.0, 0.0, 0.0],
  [6200.0, 0.0, 0.007692307692307693],
  [16500.0, 0.007692307692307693, 0.015384615384615385],
  [13300.0, 0.015384615384615385, 0.07692307692307693],
  [12500.0, 0.07692307692307693, 0.015384615384615385],
  [21700.0, 0.015384615384615385, 0.06153846153846154],
  [8200.0, 0.06153846153846154, 0.06410256410256411],
  [10100.0, 0.06410256410256411, 0.03296703296703297],
  [4400.0, 0.03296703296703297, 0.019230769230769232],
  [18600.0, 0.019230769230769232, 0.02564102564102564],
  [5500.0, 0.02564102564102564, 0.008547008547008546],
  [10900.0, 0.008547008547008546, 0.015384615384615385],
  [20100.0, 0.015384615384615385, 0.057692307692307696],
  [22700.0, 0.057692307692307696, 0.06410256410256411],
  [2400.0, 0.06410256410256411, 0.01282051282051282],
  [28400.0, 0.01282051282051282, 0.07692307692307693],
  [4100.0, 0.07692307692307693, 0.038461538461538464],
  [13300.0, 0.038461538461538464, 0.017094017094017092],
  [28000.0, 0.017094017094017092, 0.01282051282051282],
  [24900.0, 0.01282051282051282, 0.07692307692307693],
  [19500.0, 0.07692307692307693, 0.07692307692307693],
  [13600.0, 0.07692307692307693, 0.010989010989010988],
  [7400.0, 0.010989010989010988, 0.07692307692307693],
  [3500.0, 0.07692307692307693, 0.02564102564102564],
  [9100.0, 0.02564102564102564, 0.02564102564102564],
  [3600.0, 0.02564102564102564, 0.019230769230769232],
  [39200.0, 0.019230769230769232, 0.06153846153846154],
  [29600.0, 0.06153846153846154, 0.03496503496503496],
  [7400.0, 0.03496503496503496, 0.019230769230769232],
  [500.0, 0.019230769230769232, 0.01282051282051282],
  [10900.0, 0.01282051282051282, 0.038461538461538464],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.04 => p.pan;
1300.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
