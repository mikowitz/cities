[
  [4600.0, 0.0, 0.0],
  [6100.0, 0.0, 0.08333333333333333],
  [10800.0, 0.08333333333333333, 0.2777777777777778],
  [14500.0, 0.2777777777777778, 0.25],
  [2300.0, 0.25, 0.16666666666666666],
  [5200.0, 0.16666666666666666, 0.08333333333333333],
  [21400.0, 0.08333333333333333, 0.16666666666666666],
  [55200.0, 0.16666666666666666, 0.2380952380952381],
  [4200.0, 0.2380952380952381, 0.2777777777777778],
  [6900.0, 0.2777777777777778, 0.14285714285714285],
  [200.0, 0.14285714285714285, 0.2222222222222222],
  [4500.0, 0.2222222222222222, 0.3333333333333333],
  [17600.0, 0.3333333333333333, 0.047619047619047616],
  [18000.0, 0.047619047619047616, 0.09523809523809523],
  [2700.0, 0.09523809523809523, 0.06666666666666667],
  [4000.0, 0.06666666666666667, 0.3333333333333333],
  [22800.0, 0.3333333333333333, 0.3333333333333333],
  [22500.0, 0.3333333333333333, 0.06666666666666667],
  [22300.0, 0.06666666666666667, 0.2916666666666667],
  [5300.0, 0.2916666666666667, 0.26666666666666666],
  [20000.0, 0.26666666666666666, 0.05555555555555555],
  [18200.0, 0.05555555555555555, 0.14285714285714285],
  [4100.0, 0.14285714285714285, 0.21212121212121213],
  [2400.0, 0.21212121212121213, 0.19047619047619047],
  [16000.0, 0.19047619047619047, 0.1111111111111111],
  [13500.0, 0.1111111111111111, 0.19999999999999998],
  [9600.0, 0.19999999999999998, 0.2857142857142857],
  [200.0, 0.2857142857142857, 0.15384615384615385],
  [4700.0, 0.15384615384615385, 0.1794871794871795],
  [7900.0, 0.1794871794871795, 0.0909090909090909],
  [7700.0, 0.0909090909090909, 0.3333333333333333],
  [2900.0, 0.3333333333333333, 0.08333333333333333],
  [5100.0, 0.08333333333333333, 0.3333333333333333],
  [7200.0, 0.3333333333333333, 0.2380952380952381],
  [2400.0, 0.2380952380952381, 0.08333333333333333],
  [9600.0, 0.08333333333333333, 0.08333333333333333],
  [6800.0, 0.08333333333333333, 0.2222222222222222],
  [8500.0, 0.2222222222222222, 0.08333333333333333],
  [200.0, 0.08333333333333333, 0.26666666666666666],
  [7600.0, 0.26666666666666666, 0.3333333333333333],
  [6500.0, 0.3333333333333333, 0.1111111111111111],
  [6000.0, 0.1111111111111111, 0.25925925925925924],
  [2000.0, 0.25925925925925924, 0.25925925925925924],
  [36500.0, 0.25925925925925924, 0.1111111111111111],
  [5300.0, 0.1111111111111111, 0.25],
  [200.0, 0.25, 0.16666666666666666],
  [4000.0, 0.16666666666666666, 0.2222222222222222],
  [200.0, 0.2222222222222222, 0.05555555555555555],
  [11100.0, 0.05555555555555555, 0.08333333333333333],
  [6200.0, 0.08333333333333333, 0.16666666666666666],
  [3900.0, 0.16666666666666666, 0.12121212121212122],
  [19400.0, 0.12121212121212122, 0.16666666666666666],
  [7600.0, 0.16666666666666666, 0.2962962962962963],
  [18000.0, 0.2962962962962963, 0.05555555555555555],
  [56300.0, 0.05555555555555555, 0.2916666666666667],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.11 => p.pan;
1200.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
