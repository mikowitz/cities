[
  [40900.0, 0.0, 0.0],
  [17800.0, 0.0, 0.07142857142857142],
  [7300.0, 0.07142857142857142, 0.05555555555555555],
  [61600.0, 0.05555555555555555, 0.08333333333333333],
  [5100.0, 0.08333333333333333, 0.07142857142857142],
  [66100.0, 0.07142857142857142, 0.1],
  [2200.0, 0.1, 0.07142857142857142],
  [11700.0, 0.07142857142857142, 0.42857142857142855],
  [2800.0, 0.42857142857142855, 0.09375],
  [13600.0, 0.09375, 0.25],
  [2800.0, 0.25, 0.25],
  [33100.0, 0.25, 0.125],
  [300.0, 0.125, 0.3],
  [21300.0, 0.3, 0.4],
  [8000.0, 0.4, 0.07142857142857142],
  [8100.0, 0.07142857142857142, 0.2222222222222222],
  [2200.0, 0.2222222222222222, 0.07142857142857142],
  [45500.0, 0.07142857142857142, 0.42857142857142855],
  [23100.0, 0.42857142857142855, 0.05555555555555555],
  [300.0, 0.05555555555555555, 0.3],
  [9700.0, 0.3, 0.4],
  [300.0, 0.4, 0.35714285714285715],
  [15500.0, 0.35714285714285715, 0.42857142857142855],
  [65300.0, 0.42857142857142855, 0.14285714285714285],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
0.19 => p.pan;
1600.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
