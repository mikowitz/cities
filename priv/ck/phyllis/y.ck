[
  [1500.0, 0.0, 0.0],
  [7100.0, 0.0, 0.06666666666666667],
  [1800.0, 0.06666666666666667, 0.08571428571428572],
  [49300.0, 0.08571428571428572, 0.06666666666666667],
  [9700.0, 0.06666666666666667, 0.2],
  [26400.0, 0.2, 0.2],
  [12800.0, 0.2, 0.2],
  [24800.0, 0.2, 0.2],
  [5100.0, 0.2, 0.2],
  [7900.0, 0.2, 0.2],
  [52800.0, 0.2, 0.05],
  [5100.0, 0.05, 0.2],
  [5500.0, 0.2, 0.08571428571428572],
  [2000.0, 0.08571428571428572, 0.1],
  [17300.0, 0.1, 0.2],
  [2400.0, 0.2, 0.06666666666666667],
  [12900.0, 0.06666666666666667, 0.2],
  [1700.0, 0.2, 0.2],
  [3000.0, 0.2, 0.06666666666666667],
  [5700.0, 0.06666666666666667, 0.2],
  [14100.0, 0.2, 0.05],
  [3900.0, 0.05, 0.06666666666666667],
  [2600.0, 0.06666666666666667, 0.2],
  [7700.0, 0.2, 0.08571428571428572],
  [2600.0, 0.08571428571428572, 0.05],
  [6400.0, 0.05, 0.15],
  [3100.0, 0.15, 0.2],
  [2300.0, 0.2, 0.05],
  [23000.0, 0.05, 0.1],
  [7600.0, 0.1, 0.075],
  [15700.0, 0.075, 0.06666666666666667],
  [28700.0, 0.06666666666666667, 0.06666666666666667],
  [6400.0, 0.06666666666666667, 0.2],
  [4900.0, 0.2, 0.06666666666666667],
  [6800.0, 0.06666666666666667, 0.05],
  [6900.0, 0.05, 0.05],
  [12800.0, 0.05, 0.06666666666666667],
  [6600.0, 0.06666666666666667, 0.2],
  [31700.0, 0.2, 0.08571428571428572],
  [28900.0, 0.08571428571428572, 0.2],
  [13000.0, 0.2, 0.05],
  [26700.0, 0.05, 0.1],
  [9200.0, 0.1, 0.1],
  [200.0, 0.1, 0.2],
  [7500.0, 0.2, 0.04],
  [17500.0, 0.04, 0.2],
  [25200.0, 0.2, 0.2],
  [11500.0, 0.2, 0.06666666666666667],
  [13300.0, 0.06666666666666667, 0.1],
  [12000.0, 0.1, 0.2],
  [7600.0, 0.2, 0.2],
  [16500.0, 0.2, 0.08571428571428572],
  [5100.0, 0.08571428571428572, 0.2],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
0.85 => p.pan;
2500.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
