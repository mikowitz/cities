[
  [33300.0, 0.0, 0.0],
  [33900.0, 0.0, 0.014492753623188404],
  [3200.0, 0.014492753623188404, 0.010869565217391304],
  [29700.0, 0.010869565217391304, 0.014492753623188404],
  [10800.0, 0.014492753623188404, 0.031055900621118012],
  [20500.0, 0.031055900621118012, 0.017391304347826087],
  [600.0, 0.017391304347826087, 0.004830917874396135],
  [21000.0, 0.004830917874396135, 0.024154589371980676],
  [15200.0, 0.024154589371980676, 0.010869565217391304],
  [56800.0, 0.010869565217391304, 0.021739130434782608],
  [5800.0, 0.021739130434782608, 0.014492753623188404],
  [11500.0, 0.014492753623188404, 0.006211180124223602],
  [46500.0, 0.006211180124223602, 0.008695652173913044],
  [38300.0, 0.008695652173913044, 0.043478260869565216],
  [200.0, 0.043478260869565216, 0.043478260869565216],
  [2300.0, 0.043478260869565216, 0.008695652173913044],
  [4700.0, 0.008695652173913044, 0.021739130434782608],
  [5300.0, 0.021739130434782608, 0.010869565217391304],
  [12700.0, 0.010869565217391304, 0.010869565217391304],
  [30200.0, 0.010869565217391304, 0.010869565217391304],
  [23900.0, 0.010869565217391304, 0.019762845849802372],
  [14600.0, 0.019762845849802372, 0.014492753623188404],
  [29200.0, 0.014492753623188404, 0.010869565217391304],
  [1800.0, 0.010869565217391304, 0.008695652173913044],
  [26400.0, 0.008695652173913044, 0.008695652173913044],
  [12500.0, 0.008695652173913044, 0.010869565217391304],
  [23800.0, 0.010869565217391304, 0.008695652173913044],
  [28500.0, 0.008695652173913044, 0.010869565217391304],
  [52600.0, 0.010869565217391304, 0.014492753623188404],
  [18500.0, 0.014492753623188404, 0.014492753623188404],
  [8000.0, 0.014492753623188404, 0.008695652173913044],
  [3800.0, 0.008695652173913044, 0.010869565217391304],
  [59700.0, 0.010869565217391304, 0.014492753623188404],
  [14800.0, 0.014492753623188404, 0.010869565217391304],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
0.7 => p.pan;
2300.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
