[
  [16100.0, 0.0, 0.0],
  [12900.0, 0.0, 0.5],
  [11000.0, 0.5, 0.3333333333333333],
  [15400.0, 0.3333333333333333, 0.3333333333333333],
  [5200.0, 0.3333333333333333, 0.5],
  [200.0, 0.5, 0.21428571428571427],
  [47200.0, 0.21428571428571427, 0.2857142857142857],
  [300.0, 0.2857142857142857, 0.3333333333333333],
  [14300.0, 0.3333333333333333, 0.5],
  [200.0, 0.5, 0.5],
  [9000.0, 0.5, 0.125],
  [11000.0, 0.125, 0.045454545454545456],
  [2100.0, 0.045454545454545456, 0.5],
  [10900.0, 0.5, 0.5],
  [6000.0, 0.5, 0.3333333333333333],
  [10800.0, 0.3333333333333333, 0.5],
  [4800.0, 0.5, 0.5],
  [200.0, 0.5, 0.3333333333333333],
  [14300.0, 0.3333333333333333, 0.5],
  [4700.0, 0.5, 0.041666666666666664],
  [33300.0, 0.041666666666666664, 0.5],
  [10200.0, 0.5, 0.3333333333333333],
  [16800.0, 0.3333333333333333, 0.3333333333333333],
  [20000.0, 0.3333333333333333, 0.125],
  [44000.0, 0.125, 0.3],
  [26200.0, 0.3, 0.16666666666666666],
  [8800.0, 0.16666666666666666, 0.0625],
  [8600.0, 0.0625, 0.3125],
  [15600.0, 0.3125, 0.5],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.7 => p.pan;
400.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
