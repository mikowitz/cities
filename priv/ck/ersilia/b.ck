[
  [6800.0, 0.0, 0.0],
  [22000.0, 0.0, 0.2777777777777778],
  [23600.0, 0.2777777777777778, 0.22727272727272727],
  [5600.0, 0.22727272727272727, 0.1],
  [21200.0, 0.1, 0.038461538461538464],
  [16600.0, 0.038461538461538464, 0.1],
  [21000.0, 0.1, 0.08333333333333333],
  [59600.0, 0.08333333333333333, 0.22727272727272727],
  [42800.0, 0.22727272727272727, 0.16666666666666666],
  [29600.0, 0.16666666666666666, 0.21428571428571427],
  [23000.0, 0.21428571428571427, 0.25],
  [50500.0, 0.25, 0.14285714285714285],
  [19900.0, 0.14285714285714285, 0.1111111111111111],
  [14700.0, 0.1111111111111111, 0.1],
  [16700.0, 0.1, 0.45],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.85 => p.pan;
200.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
