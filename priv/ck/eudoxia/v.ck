[
  [26700.0, 0.0, 0.0],
  [7400.0, 0.0, 0.045454545454545456],
  [8400.0, 0.045454545454545456, 0.0707070707070707],
  [44700.0, 0.0707070707070707, 0.07792207792207792],
  [26800.0, 0.07792207792207792, 0.06493506493506494],
  [49200.0, 0.06493506493506494, 0.07272727272727274],
  [85700.0, 0.07272727272727274, 0.0404040404040404],
  [30700.0, 0.0404040404040404, 0.051948051948051945],
  [12100.0, 0.051948051948051945, 0.025974025974025972],
  [10100.0, 0.025974025974025972, 0.08264462809917356],
  [40000.0, 0.08264462809917356, 0.0606060606060606],
  [93600.0, 0.0606060606060606, 0.03636363636363637],
  [120700.0, 0.03636363636363637, 0.03636363636363637],
  [18600.0, 0.03636363636363637, 0.06818181818181818],
  [400.0, 0.06818181818181818, 0.03896103896103896],
  [15200.0, 0.03896103896103896, 0.07792207792207792],
  [36600.0, 0.07792207792207792, 0.03636363636363637],
  [28300.0, 0.03636363636363637, 0.045454545454545456],
  [28800.0, 0.045454545454545456, 0.05785123966942149],
  [59800.0, 0.05785123966942149, 0.045454545454545456],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
0.63 => p.pan;
2200.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
