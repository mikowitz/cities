[
  [85700.0, 0.0, 0.0],
  [2900.0, 0.0, 0.1],
  [41800.0, 0.1, 0.1],
  [2600.0, 0.1, 0.05555555555555555],
  [25400.0, 0.05555555555555555, 0.14285714285714285],
  [28900.0, 0.14285714285714285, 0.0625],
  [19500.0, 0.0625, 0.2222222222222222],
  [32500.0, 0.2222222222222222, 0.5],
  [300.0, 0.5, 0.25],
  [10800.0, 0.25, 0.3333333333333333],
  [76700.0, 0.3333333333333333, 0.35714285714285715],
  [25600.0, 0.35714285714285715, 0.1875],
  [45500.0, 0.1875, 0.1],
  [2900.0, 0.1, 0.1],
  [7600.0, 0.1, 0.16666666666666666],
  [109600.0, 0.16666666666666666, 0.1],
  [300.0, 0.1, 0.22727272727272727],
  [11700.0, 0.22727272727272727, 0.2727272727272727],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
0.19 => p.pan;
1600.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
