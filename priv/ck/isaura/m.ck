[
  [120600.0, 0.0, 0.0],
  [34900.0, 0.0, 0.015384615384615385],
  [21900.0, 0.015384615384615385, 0.06153846153846154],
  [23600.0, 0.06153846153846154, 0.057692307692307696],
  [24600.0, 0.057692307692307696, 0.06593406593406594],
  [34500.0, 0.06593406593406594, 0.07692307692307693],
  [10100.0, 0.07692307692307693, 0.057692307692307696],
  [10700.0, 0.057692307692307696, 0.042735042735042736],
  [58900.0, 0.042735042735042736, 0.07692307692307693],
  [31400.0, 0.07692307692307693, 0.054945054945054944],
  [17100.0, 0.054945054945054944, 0.038461538461538464],
  [7500.0, 0.038461538461538464, 0.015384615384615385],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.04 => p.pan;
1300.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
