[
  [15000.0, 0.0, 0.0],
  [4800.0, 0.0, 0.08333333333333333],
  [24100.0, 0.08333333333333333, 0.3333333333333333],
  [23300.0, 0.3333333333333333, 0.08333333333333333],
  [2500.0, 0.08333333333333333, 0.05555555555555555],
  [11700.0, 0.05555555555555555, 0.08333333333333333],
  [25200.0, 0.08333333333333333, 0.06666666666666667],
  [26000.0, 0.06666666666666667, 0.047619047619047616],
  [5900.0, 0.047619047619047616, 0.13333333333333333],
  [38600.0, 0.13333333333333333, 0.08333333333333333],
  [20400.0, 0.08333333333333333, 0.05555555555555555],
  [31900.0, 0.05555555555555555, 0.047619047619047616],
  [19300.0, 0.047619047619047616, 0.13333333333333333],
  [58100.0, 0.13333333333333333, 0.3333333333333333],
  [6900.0, 0.3333333333333333, 0.047619047619047616],
  [16300.0, 0.047619047619047616, 0.06666666666666667],
  [48900.0, 0.06666666666666667, 0.3333333333333333],
  [26400.0, 0.3333333333333333, 0.037037037037037035],
  [1900.0, 0.037037037037037035, 0.3333333333333333],
  [48100.0, 0.3333333333333333, 0.3333333333333333],
  [34400.0, 0.3333333333333333, 0.16666666666666666],
  [8300.0, 0.16666666666666666, 0.3333333333333333],
  [13300.0, 0.3333333333333333, 0.08333333333333333],
  [17300.0, 0.08333333333333333, 0.1111111111111111],
  [32800.0, 0.1111111111111111, 0.05555555555555555],
  [13000.0, 0.05555555555555555, 0.16666666666666666],
  [23300.0, 0.16666666666666666, 0.047619047619047616],
  [39400.0, 0.047619047619047616, 0.06666666666666667],
  [18800.0, 0.06666666666666667, 0.3333333333333333],
  [12500.0, 0.3333333333333333, 0.08333333333333333],
  [2900.0, 0.08333333333333333, 0.3333333333333333],
  [13100.0, 0.3333333333333333, 0.3333333333333333],
  [7400.0, 0.3333333333333333, 0.1111111111111111],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.56 => p.pan;
600.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
