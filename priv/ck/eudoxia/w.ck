[
  [4100.0, 0.0, 0.0],
  [7200.0, 0.0, 0.008695652173913044],
  [3100.0, 0.008695652173913044, 0.021739130434782608],
  [900.0, 0.021739130434782608, 0.03260869565217391],
  [2000.0, 0.03260869565217391, 0.010869565217391304],
  [18800.0, 0.010869565217391304, 0.006211180124223602],
  [51600.0, 0.006211180124223602, 0.008695652173913044],
  [26000.0, 0.008695652173913044, 0.008695652173913044],
  [1200.0, 0.008695652173913044, 0.02608695652173913],
  [22900.0, 0.02608695652173913, 0.010869565217391304],
  [6800.0, 0.010869565217391304, 0.03260869565217391],
  [1100.0, 0.03260869565217391, 0.008695652173913044],
  [82600.0, 0.008695652173913044, 0.010869565217391304],
  [48700.0, 0.010869565217391304, 0.008695652173913044],
  [34600.0, 0.008695652173913044, 0.010869565217391304],
  [5900.0, 0.010869565217391304, 0.008695652173913044],
  [43000.0, 0.008695652173913044, 0.034782608695652174],
  [23500.0, 0.034782608695652174, 0.010869565217391304],
  [20800.0, 0.010869565217391304, 0.010869565217391304],
  [4100.0, 0.010869565217391304, 0.008695652173913044],
  [48200.0, 0.008695652173913044, 0.010869565217391304],
  [3800.0, 0.010869565217391304, 0.010869565217391304],
  [13100.0, 0.010869565217391304, 0.02898550724637681],
  [16800.0, 0.02898550724637681, 0.02898550724637681],
  [9300.0, 0.02898550724637681, 0.02898550724637681],
  [6100.0, 0.02898550724637681, 0.014492753623188404],
  [14000.0, 0.014492753623188404, 0.014492753623188404],
  [1500.0, 0.014492753623188404, 0.024844720496894408],
  [18100.0, 0.024844720496894408, 0.02898550724637681],
  [28300.0, 0.02898550724637681, 0.02898550724637681],
  [3300.0, 0.02898550724637681, 0.008695652173913044],
  [53400.0, 0.008695652173913044, 0.007246376811594202],
  [11100.0, 0.007246376811594202, 0.014492753623188404],
  [72100.0, 0.014492753623188404, 0.014492753623188404],
  [35800.0, 0.014492753623188404, 0.010869565217391304],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
0.7 => p.pan;
2300.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
