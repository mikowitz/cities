[
  [2800.0, 0.0, 0.0],
  [3600.0, 0.0, 0.3333333333333333],
  [5100.0, 0.3333333333333333, 0.09999999999999999],
  [13200.0, 0.09999999999999999, 0.3333333333333333],
  [14000.0, 0.3333333333333333, 0.06666666666666667],
  [10700.0, 0.06666666666666667, 0.3333333333333333],
  [6600.0, 0.3333333333333333, 0.08333333333333333],
  [27000.0, 0.08333333333333333, 0.08333333333333333],
  [27500.0, 0.08333333333333333, 0.08333333333333333],
  [20900.0, 0.08333333333333333, 0.3333333333333333],
  [62800.0, 0.3333333333333333, 0.3333333333333333],
  [40100.0, 0.3333333333333333, 0.1388888888888889],
  [11300.0, 0.1388888888888889, 0.1111111111111111],
  [17700.0, 0.1111111111111111, 0.3333333333333333],
  [3400.0, 0.3333333333333333, 0.3333333333333333],
  [200.0, 0.3333333333333333, 0.1111111111111111],
  [12900.0, 0.1111111111111111, 0.14814814814814814],
  [14600.0, 0.14814814814814814, 0.3333333333333333],
  [300.0, 0.3333333333333333, 0.3333333333333333],
  [12000.0, 0.3333333333333333, 0.3333333333333333],
  [20700.0, 0.3333333333333333, 0.08333333333333333],
  [8800.0, 0.08333333333333333, 0.3333333333333333],
  [16100.0, 0.3333333333333333, 0.3333333333333333],
  [31400.0, 0.3333333333333333, 0.26666666666666666],
  [200.0, 0.26666666666666666, 0.2222222222222222],
  [11100.0, 0.2222222222222222, 0.3333333333333333],
  [19900.0, 0.3333333333333333, 0.047619047619047616],
  [1400.0, 0.047619047619047616, 0.3333333333333333],
  [27200.0, 0.3333333333333333, 0.16666666666666666],
  [800.0, 0.16666666666666666, 0.08333333333333333],
  [7100.0, 0.08333333333333333, 0.047619047619047616],
  [2500.0, 0.047619047619047616, 0.3333333333333333],
  [19100.0, 0.3333333333333333, 0.19047619047619047],
  [21400.0, 0.19047619047619047, 0.2333333333333333],
  [34500.0, 0.2333333333333333, 0.1111111111111111],
  [10300.0, 0.1111111111111111, 0.025641025641025644],
  [3700.0, 0.025641025641025644, 0.041666666666666664],
  [7100.0, 0.041666666666666664, 0.3333333333333333],
  [24400.0, 0.3333333333333333, 0.1111111111111111],
  [30900.0, 0.1111111111111111, 0.3333333333333333],
  [33100.0, 0.3333333333333333, 0.3333333333333333],
  [2100.0, 0.3333333333333333, 0.3333333333333333],
  [4900.0, 0.3333333333333333, 0.3333333333333333],
  [4200.0, 0.3333333333333333, 0.09999999999999999],
  [16600.0, 0.09999999999999999, 0.08333333333333333],
  [2200.0, 0.08333333333333333, 0.3333333333333333],
  [5500.0, 0.3333333333333333, 0.16666666666666666],
  [27100.0, 0.16666666666666666, 0.3333333333333333],
  [200.0, 0.3333333333333333, 0.3333333333333333],
  [4400.0, 0.3333333333333333, 0.08333333333333333],
  [4400.0, 0.08333333333333333, 0.06666666666666667],
  [16500.0, 0.06666666666666667, 0.3333333333333333],
  [21700.0, 0.3333333333333333, 0.3333333333333333],
  [1400.0, 0.3333333333333333, 0.3333333333333333],
  [3000.0, 0.3333333333333333, 0.16666666666666666],
  [2600.0, 0.16666666666666666, 0.06666666666666667],
  [25300.0, 0.06666666666666667, 0.3333333333333333],
  [43900.0, 0.3333333333333333, 0.3333333333333333],
  [12500.0, 0.3333333333333333, 0.125],
  [31200.0, 0.125, 0.3333333333333333],
  [18000.0, 0.3333333333333333, 0.3333333333333333],
  [2000.0, 0.3333333333333333, 0.06666666666666667],
  [22600.0, 0.06666666666666667, 0.3333333333333333],
  [7600.0, 0.3333333333333333, 0.3333333333333333],
  [7600.0, 0.3333333333333333, 0.3333333333333333],
  [38900.0, 0.3333333333333333, 0.047619047619047616],
  [10500.0, 0.047619047619047616, 0.3333333333333333],
  [8000.0, 0.3333333333333333, 0.047619047619047616],
  [20400.0, 0.047619047619047616, 0.047619047619047616],
  [36000.0, 0.047619047619047616, 0.3333333333333333],
  [34100.0, 0.3333333333333333, 0.047619047619047616],
  [4900.0, 0.047619047619047616, 0.047619047619047616],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.56 => p.pan;
600.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
