[
  [38500.0, 0.0, 0.0],
  [19000.0, 0.0, 0.14285714285714285],
  [22000.0, 0.14285714285714285, 0.14285714285714285],
  [30500.0, 0.14285714285714285, 0.12244897959183673],
  [16600.0, 0.12244897959183673, 0.14285714285714285],
  [20100.0, 0.14285714285714285, 0.047619047619047616],
  [17300.0, 0.047619047619047616, 0.14285714285714285],
  [9100.0, 0.14285714285714285, 0.028571428571428574],
  [27700.0, 0.028571428571428574, 0.14285714285714285],
  [27100.0, 0.14285714285714285, 0.014285714285714287],
  [19800.0, 0.014285714285714287, 0.03571428571428571],
  [38400.0, 0.03571428571428571, 0.14285714285714285],
  [14200.0, 0.14285714285714285, 0.014285714285714287],
  [2000.0, 0.014285714285714287, 0.08571428571428572],
  [18100.0, 0.08571428571428572, 0.03571428571428571],
  [53500.0, 0.03571428571428571, 0.09523809523809523],
  [36900.0, 0.09523809523809523, 0.017857142857142856],
  [43000.0, 0.017857142857142856, 0.10714285714285714],
  [5800.0, 0.10714285714285714, 0.14285714285714285],
  [26500.0, 0.14285714285714285, 0.061224489795918366],
  [14500.0, 0.061224489795918366, 0.03571428571428571],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.48 => p.pan;
700.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
