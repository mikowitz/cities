[
  [7600.0, 0.0, 0.0],
  [14000.0, 0.0, 0.06666666666666667],
  [4700.0, 0.06666666666666667, 0.13333333333333333],
  [24100.0, 0.13333333333333333, 0.041666666666666664],
  [7500.0, 0.041666666666666664, 0.023809523809523808],
  [300.0, 0.023809523809523808, 0.041666666666666664],
  [1900.0, 0.041666666666666664, 0.125],
  [2200.0, 0.125, 0.03333333333333333],
  [35700.0, 0.03333333333333333, 0.125],
  [6000.0, 0.125, 0.027777777777777776],
  [6800.0, 0.027777777777777776, 0.09523809523809523],
  [36900.0, 0.09523809523809523, 0.041666666666666664],
  [9700.0, 0.041666666666666664, 0.08333333333333333],
  [13200.0, 0.08333333333333333, 0.125],
  [3500.0, 0.125, 0.14285714285714285],
  [300.0, 0.14285714285714285, 0.13333333333333333],
  [18700.0, 0.13333333333333333, 0.03333333333333333],
  [11000.0, 0.03333333333333333, 0.125],
  [15300.0, 0.125, 0.12962962962962962],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.78 => p.pan;
300.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
