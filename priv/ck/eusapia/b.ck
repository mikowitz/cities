[
  [31100.0, 0.0, 0.0],
  [6200.0, 0.0, 0.16666666666666666],
  [111100.0, 0.16666666666666666, 0.22727272727272727],
  [21900.0, 0.22727272727272727, 0.25],
  [22800.0, 0.25, 0.16666666666666666],
  [70800.0, 0.16666666666666666, 0.1],
  [1600.0, 0.1, 0.08333333333333333],
  [5000.0, 0.08333333333333333, 0.3333333333333333],
  [7900.0, 0.3333333333333333, 0.1],
  [46400.0, 0.1, 0.3],
  [37600.0, 0.3, 0.25],
  [11100.0, 0.25, 0.07142857142857142],
  [34800.0, 0.07142857142857142, 0.07142857142857142],
  [8200.0, 0.07142857142857142, 0.5],
  [29000.0, 0.5, 0.1],
  [22800.0, 0.1, 0.0625],
  [3900.0, 0.0625, 0.2],
  [37100.0, 0.2, 0.125],
  [14600.0, 0.125, 0.0625],
  [22100.0, 0.0625, 0.5],
  [49500.0, 0.5, 0.16666666666666666],
  [34400.0, 0.16666666666666666, 0.1],
  [9300.0, 0.1, 0.16666666666666666],
  [27200.0, 0.16666666666666666, 0.3],
  [7100.0, 0.3, 0.07142857142857142],
  [23300.0, 0.07142857142857142, 0.42857142857142855],
  [6400.0, 0.42857142857142855, 0.0625],
  [41900.0, 0.0625, 0.2],
  [12000.0, 0.2, 0.1],
  [49500.0, 0.1, 0.1],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.85 => p.pan;
200.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
