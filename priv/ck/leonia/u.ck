[
  [32200.0, 0.0, 0.0],
  [1500.0, 0.0, 0.02197802197802198],
  [30100.0, 0.02197802197802198, 0.05494505494505495],
  [14700.0, 0.05494505494505495, 0.017857142857142856],
  [8500.0, 0.017857142857142856, 0.1142857142857143],
  [36500.0, 0.1142857142857143, 0.017857142857142856],
  [4400.0, 0.017857142857142856, 0.07142857142857142],
  [1900.0, 0.07142857142857142, 0.05357142857142857],
  [6200.0, 0.05357142857142857, 0.05714285714285715],
  [4100.0, 0.05714285714285715, 0.125],
  [14800.0, 0.125, 0.05714285714285715],
  [26300.0, 0.05714285714285715, 0.09523809523809523],
  [12200.0, 0.09523809523809523, 0.07142857142857142],
  [1800.0, 0.07142857142857142, 0.047619047619047616],
  [3400.0, 0.047619047619047616, 0.10714285714285714],
  [4100.0, 0.10714285714285714, 0.07142857142857142],
  [2900.0, 0.07142857142857142, 0.14285714285714285],
  [4900.0, 0.14285714285714285, 0.10204081632653061],
  [2400.0, 0.10204081632653061, 0.05357142857142857],
  [17100.0, 0.05357142857142857, 0.09523809523809523],
  [8400.0, 0.09523809523809523, 0.09523809523809523],
  [11400.0, 0.09523809523809523, 0.14285714285714285],
  [46700.0, 0.14285714285714285, 0.10714285714285714],
  [5800.0, 0.10714285714285714, 0.06349206349206349],
  [32900.0, 0.06349206349206349, 0.07142857142857142],
  [8800.0, 0.07142857142857142, 0.12244897959183673],
  [3100.0, 0.12244897959183673, 0.028571428571428574],
  [5400.0, 0.028571428571428574, 0.08571428571428572],
  [7500.0, 0.08571428571428572, 0.1285714285714286],
  [14700.0, 0.1285714285714286, 0.09523809523809523],
  [17700.0, 0.09523809523809523, 0.10204081632653061],
  [2800.0, 0.10204081632653061, 0.1142857142857143],
  [21300.0, 0.1142857142857143, 0.04081632653061224],
  [1300.0, 0.04081632653061224, 0.09523809523809523],
  [5700.0, 0.09523809523809523, 0.04081632653061224],
  [2700.0, 0.04081632653061224, 0.047619047619047616],
  [23900.0, 0.047619047619047616, 0.09523809523809523],
  [2600.0, 0.09523809523809523, 0.07142857142857142],
  [56800.0, 0.07142857142857142, 0.04081632653061224],
  [8200.0, 0.04081632653061224, 0.04081632653061224],
  [17800.0, 0.04081632653061224, 0.04081632653061224],
  [11300.0, 0.04081632653061224, 0.06493506493506493],
  [5800.0, 0.06493506493506493, 0.08163265306122448],
  [3100.0, 0.08163265306122448, 0.031746031746031744],
  [19400.0, 0.031746031746031744, 0.09523809523809523],
  [9800.0, 0.09523809523809523, 0.047619047619047616],
  [13400.0, 0.047619047619047616, 0.09523809523809523],
  [1200.0, 0.09523809523809523, 0.05194805194805195],
  [15000.0, 0.05194805194805195, 0.07792207792207792],
  [45200.0, 0.07792207792207792, 0.04081632653061224],
  [25900.0, 0.04081632653061224, 0.07142857142857142],
  [8300.0, 0.07142857142857142, 0.04081632653061224],
  [18300.0, 0.04081632653061224, 0.08571428571428572],
  [3700.0, 0.08571428571428572, 0.047619047619047616],
  [23900.0, 0.047619047619047616, 0.04081632653061224],
  [4300.0, 0.04081632653061224, 0.04081632653061224],
  [5700.0, 0.04081632653061224, 0.047619047619047616],
  [19300.0, 0.047619047619047616, 0.09523809523809523],
  [12700.0, 0.09523809523809523, 0.04285714285714286],
  [4400.0, 0.04285714285714286, 0.04081632653061224],
  [3100.0, 0.04081632653061224, 0.025974025974025976],
  [13800.0, 0.025974025974025976, 0.07792207792207792],
  [4600.0, 0.07792207792207792, 0.05357142857142857],
  [28000.0, 0.05357142857142857, 0.04285714285714286],
  [3000.0, 0.04285714285714286, 0.125],
  [42000.0, 0.125, 0.04081632653061224],
  [17300.0, 0.04081632653061224, 0.015873015873015872],
  [12900.0, 0.015873015873015872, 0.09523809523809523],
  [17500.0, 0.09523809523809523, 0.02040816326530612],
  [61400.0, 0.02040816326530612, 0.028571428571428574],
  [46200.0, 0.028571428571428574, 0.05357142857142857],
  [12200.0, 0.05357142857142857, 0.028571428571428574],
  [29300.0, 0.028571428571428574, 0.07142857142857142],
  [1200.0, 0.07142857142857142, 0.09523809523809523],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
0.56 => p.pan;
2100.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
