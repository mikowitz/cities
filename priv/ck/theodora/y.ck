[
  [14300.0, 0.0, 0.0],
  [15600.0, 0.0, 0.2],
  [6300.0, 0.2, 0.2],
  [34000.0, 0.2, 0.2],
  [7000.0, 0.2, 0.2],
  [29800.0, 0.2, 0.2],
  [9600.0, 0.2, 0.2],
  [9700.0, 0.2, 0.2],
  [3600.0, 0.2, 0.2],
  [5400.0, 0.2, 0.2],
  [12000.0, 0.2, 0.2],
  [13200.0, 0.2, 0.2],
  [8100.0, 0.2, 0.2],
  [10200.0, 0.2, 0.2],
  [22200.0, 0.2, 0.1],
  [19000.0, 0.1, 0.2],
  [1800.0, 0.2, 0.2],
  [20300.0, 0.2, 0.04],
  [20200.0, 0.04, 0.2],
  [42900.0, 0.2, 0.2],
  [69600.0, 0.2, 0.2],
  [16700.0, 0.2, 0.2],
  [2700.0, 0.2, 0.2],
  [5000.0, 0.2, 0.2],
  [41200.0, 0.2, 0.2],
  [33200.0, 0.2, 0.2],
  [17100.0, 0.2, 0.2],
  [65700.0, 0.2, 0.2],
  [24300.0, 0.2, 0.2],
  [1500.0, 0.2, 0.2],
  [28800.0, 0.2, 0.06666666666666667],
  [64400.0, 0.06666666666666667, 0.175],
  [25000.0, 0.175, 0.06666666666666667],
  [200.0, 0.06666666666666667, 0.2],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
0.85 => p.pan;
2500.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
