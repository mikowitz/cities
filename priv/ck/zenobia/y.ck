[
  [7000.0, 0.0, 0.0],
  [22500.0, 0.0, 0.2],
  [29000.0, 0.2, 0.2],
  [30200.0, 0.2, 0.2],
  [15600.0, 0.2, 0.2],
  [24900.0, 0.2, 0.2],
  [38100.0, 0.2, 0.17142857142857143],
  [21600.0, 0.17142857142857143, 0.2],
  [2700.0, 0.2, 0.2],
  [3700.0, 0.2, 0.2],
  [49400.0, 0.2, 0.2],
  [20900.0, 0.2, 0.06666666666666667],
  [4900.0, 0.06666666666666667, 0.2],
  [2200.0, 0.2, 0.16666666666666669],
  [26800.0, 0.16666666666666669, 0.2],
  [28200.0, 0.2, 0.17777777777777776],
  [3500.0, 0.17777777777777776, 0.16666666666666669],
  [24000.0, 0.16666666666666669, 0.2],
  [18900.0, 0.2, 0.1],
  [10000.0, 0.1, 0.2],
  [35800.0, 0.2, 0.2],
  [38100.0, 0.2, 0.04],
  [5100.0, 0.04, 0.2],
  [1500.0, 0.2, 0.2],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
0.85 => p.pan;
2500.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
