[
  [5300.0, 0.0, 0.0],
  [10600.0, 0.0, 0.06666666666666667],
  [4300.0, 0.06666666666666667, 0.2],
  [46300.0, 0.2, 0.2],
  [40100.0, 0.2, 0.2],
  [32400.0, 0.2, 0.06666666666666667],
  [1700.0, 0.06666666666666667, 0.13333333333333333],
  [3000.0, 0.13333333333333333, 0.2],
  [4700.0, 0.2, 0.2],
  [11400.0, 0.2, 0.06666666666666667],
  [13800.0, 0.06666666666666667, 0.1],
  [8000.0, 0.1, 0.06666666666666667],
  [11000.0, 0.06666666666666667, 0.06666666666666667],
  [15400.0, 0.06666666666666667, 0.16666666666666669],
  [46600.0, 0.16666666666666669, 0.2],
  [4800.0, 0.2, 0.2],
  [39200.0, 0.2, 0.2],
  [8800.0, 0.2, 0.06666666666666667],
  [24700.0, 0.06666666666666667, 0.2],
  [8900.0, 0.2, 0.02222222222222222],
  [18300.0, 0.02222222222222222, 0.2],
  [75800.0, 0.2, 0.2],
  [5000.0, 0.2, 0.2],
  [27100.0, 0.2, 0.2],
  [28800.0, 0.2, 0.2],
  [4100.0, 0.2, 0.2],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
0.85 => p.pan;
2500.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
