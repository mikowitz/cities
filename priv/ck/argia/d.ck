[
  [5500.0, 0.0, 0.0],
  [20600.0, 0.0, 0.05555555555555555],
  [11600.0, 0.05555555555555555, 0.5],
  [2200.0, 0.5, 0.5],
  [56100.0, 0.5, 0.125],
  [800.0, 0.125, 0.4166666666666667],
  [17700.0, 0.4166666666666667, 0.25],
  [10100.0, 0.25, 0.1875],
  [11400.0, 0.1875, 0.5],
  [2500.0, 0.5, 0.0625],
  [4500.0, 0.0625, 0.0625],
  [2400.0, 0.0625, 0.25],
  [28900.0, 0.25, 0.5],
  [19500.0, 0.5, 0.125],
  [5200.0, 0.125, 0.125],
  [9200.0, 0.125, 0.5],
  [2300.0, 0.5, 0.0625],
  [16400.0, 0.0625, 0.5],
  [7500.0, 0.5, 0.5],
  [2600.0, 0.5, 0.125],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.7 => p.pan;
400.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
