[
  [49100.0, 0.0, 0.0],
  [11100.0, 0.0, 0.008695652173913044],
  [6800.0, 0.008695652173913044, 0.030100334448160536],
  [22000.0, 0.030100334448160536, 0.006211180124223602],
  [68400.0, 0.006211180124223602, 0.010869565217391304],
  [68600.0, 0.010869565217391304, 0.010869565217391304],
  [3200.0, 0.010869565217391304, 0.024154589371980676],
  [12700.0, 0.024154589371980676, 0.008695652173913044],
  [3500.0, 0.008695652173913044, 0.008695652173913044],
  [46400.0, 0.008695652173913044, 0.008695652173913044],
  [2600.0, 0.008695652173913044, 0.021739130434782608],
  [33200.0, 0.021739130434782608, 0.010869565217391304],
  [4300.0, 0.010869565217391304, 0.006211180124223602],
  [1100.0, 0.006211180124223602, 0.008695652173913044],
  [4900.0, 0.008695652173913044, 0.008695652173913044],
  [7800.0, 0.008695652173913044, 0.006211180124223602],
  [3300.0, 0.006211180124223602, 0.008695652173913044],
  [4100.0, 0.008695652173913044, 0.010869565217391304],
  [3500.0, 0.010869565217391304, 0.021739130434782608],
  [17000.0, 0.021739130434782608, 0.03043478260869565],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
0.7 => p.pan;
2300.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
