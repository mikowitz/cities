[
  [1900.0, 0.0, 0.0],
  [25600.0, 0.0, 0.2222222222222222],
  [2300.0, 0.2222222222222222, 0.13333333333333333],
  [11000.0, 0.13333333333333333, 0.13333333333333333],
  [19200.0, 0.13333333333333333, 0.047619047619047616],
  [600.0, 0.047619047619047616, 0.3333333333333333],
  [7500.0, 0.3333333333333333, 0.14285714285714285],
  [3100.0, 0.14285714285714285, 0.06666666666666667],
  [200.0, 0.06666666666666667, 0.25],
  [3500.0, 0.25, 0.2916666666666667],
  [14200.0, 0.2916666666666667, 0.13333333333333333],
  [3900.0, 0.13333333333333333, 0.1388888888888889],
  [17100.0, 0.1388888888888889, 0.13333333333333333],
  [200.0, 0.13333333333333333, 0.2222222222222222],
  [200.0, 0.2222222222222222, 0.3333333333333333],
  [23400.0, 0.3333333333333333, 0.041666666666666664],
  [21200.0, 0.041666666666666664, 0.3333333333333333],
  [7400.0, 0.3333333333333333, 0.2777777777777778],
  [200.0, 0.2777777777777778, 0.25],
  [24800.0, 0.25, 0.3333333333333333],
  [6500.0, 0.3333333333333333, 0.16666666666666666],
  [800.0, 0.16666666666666666, 0.26666666666666666],
  [4400.0, 0.26666666666666666, 0.1111111111111111],
  [200.0, 0.1111111111111111, 0.2222222222222222],
  [8000.0, 0.2222222222222222, 0.3333333333333333],
  [500.0, 0.3333333333333333, 0.06666666666666667],
  [14600.0, 0.06666666666666667, 0.3333333333333333],
  [35300.0, 0.3333333333333333, 0.19047619047619047],
  [16500.0, 0.19047619047619047, 0.2222222222222222],
  [6200.0, 0.2222222222222222, 0.25],
  [13200.0, 0.25, 0.2962962962962963],
  [13400.0, 0.2962962962962963, 0.25],
  [16400.0, 0.25, 0.2380952380952381],
  [9800.0, 0.2380952380952381, 0.25],
  [5300.0, 0.25, 0.2857142857142857],
  [27800.0, 0.2857142857142857, 0.08333333333333333],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.11 => p.pan;
1200.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
