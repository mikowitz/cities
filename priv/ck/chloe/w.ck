[
  [9100.0, 0.0, 0.0],
  [42900.0, 0.0, 0.014492753623188404],
  [6500.0, 0.014492753623188404, 0.008695652173913044],
  [33700.0, 0.008695652173913044, 0.024844720496894408],
  [18400.0, 0.024844720496894408, 0.021739130434782608],
  [14500.0, 0.021739130434782608, 0.010869565217391304],
  [15800.0, 0.010869565217391304, 0.010869565217391304],
  [8100.0, 0.010869565217391304, 0.008695652173913044],
  [36700.0, 0.008695652173913044, 0.024844720496894408],
  [2000.0, 0.024844720496894408, 0.010869565217391304],
  [6400.0, 0.010869565217391304, 0.008695652173913044],
  [2100.0, 0.008695652173913044, 0.017391304347826087],
  [3800.0, 0.017391304347826087, 0.02898550724637681],
  [36300.0, 0.02898550724637681, 0.017391304347826087],
  [7700.0, 0.017391304347826087, 0.010869565217391304],
  [2700.0, 0.010869565217391304, 0.043478260869565216],
  [39800.0, 0.043478260869565216, 0.036231884057971016],
  [10600.0, 0.036231884057971016, 0.010869565217391304],
  [11900.0, 0.010869565217391304, 0.010869565217391304],
  [4700.0, 0.010869565217391304, 0.008695652173913044],
  [33700.0, 0.008695652173913044, 0.010869565217391304],
  [6000.0, 0.010869565217391304, 0.021739130434782608],
  [46100.0, 0.021739130434782608, 0.014492753623188404],
  [3500.0, 0.014492753623188404, 0.006211180124223602],
  [4400.0, 0.006211180124223602, 0.010869565217391304],
  [17100.0, 0.010869565217391304, 0.006211180124223602],
  [34100.0, 0.006211180124223602, 0.006211180124223602],
  [17700.0, 0.006211180124223602, 0.008695652173913044],
  [5500.0, 0.008695652173913044, 0.008695652173913044],
  [2000.0, 0.008695652173913044, 0.010869565217391304],
  [39000.0, 0.010869565217391304, 0.010869565217391304],
  [2600.0, 0.010869565217391304, 0.008695652173913044],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
0.7 => p.pan;
2300.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
