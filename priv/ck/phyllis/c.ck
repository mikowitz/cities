[
  [14100.0, 0.0, 0.0],
  [13600.0, 0.0, 0.2857142857142857],
  [2100.0, 0.2857142857142857, 0.05555555555555555],
  [9900.0, 0.05555555555555555, 0.25],
  [2600.0, 0.25, 0.041666666666666664],
  [16000.0, 0.041666666666666664, 0.047619047619047616],
  [28900.0, 0.047619047619047616, 0.19047619047619047],
  [26500.0, 0.19047619047619047, 0.2222222222222222],
  [6100.0, 0.2222222222222222, 0.06666666666666667],
  [17200.0, 0.06666666666666667, 0.047619047619047616],
  [13100.0, 0.047619047619047616, 0.08333333333333333],
  [24500.0, 0.08333333333333333, 0.06666666666666667],
  [36100.0, 0.06666666666666667, 0.047619047619047616],
  [5300.0, 0.047619047619047616, 0.25],
  [9600.0, 0.25, 0.05555555555555555],
  [4600.0, 0.05555555555555555, 0.041666666666666664],
  [12700.0, 0.041666666666666664, 0.1111111111111111],
  [15800.0, 0.1111111111111111, 0.08333333333333333],
  [31900.0, 0.08333333333333333, 0.2777777777777778],
  [22400.0, 0.2777777777777778, 0.08333333333333333],
  [40300.0, 0.08333333333333333, 0.047619047619047616],
  [9500.0, 0.047619047619047616, 0.19047619047619047],
  [13400.0, 0.19047619047619047, 0.19047619047619047],
  [3800.0, 0.19047619047619047, 0.26666666666666666],
  [21200.0, 0.26666666666666666, 0.1111111111111111],
  [7600.0, 0.1111111111111111, 0.047619047619047616],
  [12100.0, 0.047619047619047616, 0.08333333333333333],
  [3500.0, 0.08333333333333333, 0.26666666666666666],
  [26300.0, 0.26666666666666666, 0.26666666666666666],
  [2200.0, 0.26666666666666666, 0.26666666666666666],
  [5200.0, 0.26666666666666666, 0.047619047619047616],
  [9100.0, 0.047619047619047616, 0.14814814814814814],
  [3600.0, 0.14814814814814814, 0.047619047619047616],
  [36700.0, 0.047619047619047616, 0.037037037037037035],
  [1900.0, 0.037037037037037035, 0.14285714285714285],
  [12100.0, 0.14285714285714285, 0.037037037037037035],
  [30700.0, 0.037037037037037035, 0.14285714285714285],
  [4400.0, 0.14285714285714285, 0.14285714285714285],
  [700.0, 0.14285714285714285, 0.16666666666666666],
  [800.0, 0.16666666666666666, 0.047619047619047616],
  [5500.0, 0.047619047619047616, 0.19047619047619047],
  [12500.0, 0.19047619047619047, 0.047619047619047616],
  [1800.0, 0.047619047619047616, 0.16666666666666666],
  [3500.0, 0.16666666666666666, 0.05555555555555555],
  [15900.0, 0.05555555555555555, 0.16666666666666666],
  [8000.0, 0.16666666666666666, 0.05555555555555555],
  [10900.0, 0.05555555555555555, 0.08333333333333333],
  [8400.0, 0.08333333333333333, 0.05555555555555555],
  [5400.0, 0.05555555555555555, 0.26666666666666666],
  [4100.0, 0.26666666666666666, 0.16666666666666666],
  [800.0, 0.16666666666666666, 0.047619047619047616],
  [7900.0, 0.047619047619047616, 0.19047619047619047],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.78 => p.pan;
300.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
