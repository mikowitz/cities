[
  [400.0, 0.0, 0.0],
  [3300.0, 0.0, 0.3333333333333333],
  [7700.0, 0.3333333333333333, 0.2222222222222222],
  [6800.0, 0.2222222222222222, 0.05],
  [3400.0, 0.05, 0.2],
  [9700.0, 0.2, 0.3333333333333333],
  [3300.0, 0.3333333333333333, 0.5],
  [2700.0, 0.5, 0.1],
  [5100.0, 0.1, 0.3333333333333333],
  [2300.0, 0.3333333333333333, 0.5],
  [4000.0, 0.5, 0.2],
  [4500.0, 0.2, 0.3333333333333333],
  [8100.0, 0.3333333333333333, 0.2],
  [1500.0, 0.2, 0.3333333333333333],
  [4300.0, 0.3333333333333333, 0.2777777777777778],
  [2900.0, 0.2777777777777778, 0.5],
  [7900.0, 0.5, 0.3333333333333333],
  [4700.0, 0.3333333333333333, 0.3333333333333333],
  [900.0, 0.3333333333333333, 0.5],
  [5500.0, 0.5, 0.3333333333333333],
  [6200.0, 0.3333333333333333, 0.07142857142857142],
  [3000.0, 0.07142857142857142, 0.3333333333333333],
  [1100.0, 0.3333333333333333, 0.3333333333333333],
  [1700.0, 0.3333333333333333, 0.3],
  [13800.0, 0.3, 0.0625],
  [900.0, 0.0625, 0.5],
  [2400.0, 0.5, 0.3333333333333333],
  [4500.0, 0.3333333333333333, 0.3333333333333333],
  [2500.0, 0.3333333333333333, 0.3333333333333333],
  [2700.0, 0.3333333333333333, 0.3333333333333333],
  [2100.0, 0.3333333333333333, 0.21428571428571427],
  [2200.0, 0.21428571428571427, 0.35714285714285715],
  [1100.0, 0.35714285714285715, 0.3333333333333333],
  [3000.0, 0.3333333333333333, 0.25],
  [4100.0, 0.25, 0.3333333333333333],
  [600.0, 0.3333333333333333, 0.3333333333333333],
  [9500.0, 0.3333333333333333, 0.05],
  [1100.0, 0.05, 0.3333333333333333],
  [8100.0, 0.3333333333333333, 0.3],
  [1700.0, 0.3, 0.25],
  [11700.0, 0.25, 0.3333333333333333],
  [22300.0, 0.3333333333333333, 0.25],
  [5100.0, 0.25, 0.3333333333333333],
  [1700.0, 0.3333333333333333, 0.35714285714285715],
  [7900.0, 0.35714285714285715, 0.0625],
  [2500.0, 0.0625, 0.3333333333333333],
  [1700.0, 0.3333333333333333, 0.25],
  [5700.0, 0.25, 0.3333333333333333],
  [8700.0, 0.3333333333333333, 0.3333333333333333],
  [3700.0, 0.3333333333333333, 0.3333333333333333],
  [6800.0, 0.3333333333333333, 0.3333333333333333],
  [5900.0, 0.3333333333333333, 0.3333333333333333],
  [4600.0, 0.3333333333333333, 0.3333333333333333],
  [2000.0, 0.3333333333333333, 0.3333333333333333],
  [8900.0, 0.3333333333333333, 0.3333333333333333],
  [600.0, 0.3333333333333333, 0.3333333333333333],
  [4000.0, 0.3333333333333333, 0.0625],
  [13900.0, 0.0625, 0.25],
  [11000.0, 0.25, 0.2],
  [5900.0, 0.2, 0.125],
  [600.0, 0.125, 0.3333333333333333],
  [1800.0, 0.3333333333333333, 0.038461538461538464],
  [4200.0, 0.038461538461538464, 0.3076923076923077],
  [900.0, 0.3076923076923077, 0.3333333333333333],
  [8500.0, 0.3333333333333333, 0.058823529411764705],
  [4300.0, 0.058823529411764705, 0.3333333333333333],
  [900.0, 0.3333333333333333, 0.3333333333333333],
  [7000.0, 0.3333333333333333, 0.2],
  [3200.0, 0.2, 0.3333333333333333],
  [600.0, 0.3333333333333333, 0.3333333333333333],
  [16200.0, 0.3333333333333333, 0.0625],
  [2200.0, 0.0625, 0.3333333333333333],
  [1200.0, 0.3333333333333333, 0.4166666666666667],
  [8700.0, 0.4166666666666667, 0.3333333333333333],
  [18600.0, 0.3333333333333333, 0.3333333333333333],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.41 => p.pan;
800.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
