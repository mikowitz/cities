[
  [14800.0, 0.0, 0.0],
  [8900.0, 0.0, 0.13333333333333333],
  [1800.0, 0.13333333333333333, 0.2916666666666667],
  [33100.0, 0.2916666666666667, 0.08333333333333333],
  [6700.0, 0.08333333333333333, 0.2916666666666667],
  [8100.0, 0.2916666666666667, 0.047619047619047616],
  [7600.0, 0.047619047619047616, 0.047619047619047616],
  [12400.0, 0.047619047619047616, 0.2380952380952381],
  [15600.0, 0.2380952380952381, 0.19047619047619047],
  [13100.0, 0.19047619047619047, 0.14285714285714285],
  [3300.0, 0.14285714285714285, 0.08333333333333333],
  [1200.0, 0.08333333333333333, 0.047619047619047616],
  [2400.0, 0.047619047619047616, 0.2857142857142857],
  [8300.0, 0.2857142857142857, 0.14814814814814814],
  [55900.0, 0.14814814814814814, 0.05555555555555555],
  [9300.0, 0.05555555555555555, 0.2857142857142857],
  [13600.0, 0.2857142857142857, 0.06666666666666667],
  [38000.0, 0.06666666666666667, 0.06666666666666667],
  [15600.0, 0.06666666666666667, 0.08333333333333333],
  [1400.0, 0.08333333333333333, 0.25],
  [10600.0, 0.25, 0.25],
  [1700.0, 0.25, 0.2222222222222222],
  [21200.0, 0.2222222222222222, 0.023809523809523808],
  [3400.0, 0.023809523809523808, 0.047619047619047616],
  [3600.0, 0.047619047619047616, 0.025641025641025644],
  [6700.0, 0.025641025641025644, 0.20512820512820515],
  [12800.0, 0.20512820512820515, 0.14285714285714285],
  [5400.0, 0.14285714285714285, 0.08333333333333333],
  [7400.0, 0.08333333333333333, 0.20833333333333334],
  [8400.0, 0.20833333333333334, 0.06666666666666667],
  [3800.0, 0.06666666666666667, 0.19047619047619047],
  [15700.0, 0.19047619047619047, 0.041666666666666664],
  [17300.0, 0.041666666666666664, 0.2222222222222222],
  [2800.0, 0.2222222222222222, 0.041666666666666664],
  [20800.0, 0.041666666666666664, 0.041666666666666664],
  [5700.0, 0.041666666666666664, 0.09523809523809523],
  [4300.0, 0.09523809523809523, 0.26666666666666666],
  [4300.0, 0.26666666666666666, 0.19047619047619047],
  [28300.0, 0.19047619047619047, 0.030303030303030304],
  [26600.0, 0.030303030303030304, 0.26666666666666666],
  [5600.0, 0.26666666666666666, 0.1851851851851852],
  [8900.0, 0.1851851851851852, 0.08333333333333333],
  [20900.0, 0.08333333333333333, 0.08333333333333333],
  [1300.0, 0.08333333333333333, 0.08333333333333333],
  [9900.0, 0.08333333333333333, 0.25],
  [55000.0, 0.25, 0.08333333333333333],
  [6400.0, 0.08333333333333333, 0.20833333333333334],
  [38000.0, 0.20833333333333334, 0.19047619047619047],
  [22400.0, 0.19047619047619047, 0.041666666666666664],
  [14500.0, 0.041666666666666664, 0.06666666666666667],
  [12100.0, 0.06666666666666667, 0.08333333333333333],
  [9600.0, 0.08333333333333333, 0.07407407407407407],
  [13400.0, 0.07407407407407407, 0.16666666666666666],
  [7100.0, 0.16666666666666666, 0.08333333333333333],
  [1000.0, 0.08333333333333333, 0.027777777777777776],
  [32100.0, 0.027777777777777776, 0.1111111111111111],
  [31100.0, 0.1111111111111111, 0.3333333333333333],
  [2300.0, 0.3333333333333333, 0.1111111111111111],
  [74400.0, 0.1111111111111111, 0.1111111111111111],
  [23700.0, 0.1111111111111111, 0.08333333333333333],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.78 => p.pan;
300.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
