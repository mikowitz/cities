[
  [200.0, 0.0, 0.0],
  [9400.0, 0.0, 0.25],
  [3100.0, 0.25, 0.14285714285714285],
  [5800.0, 0.14285714285714285, 0.5],
  [1900.0, 0.5, 0.25],
  [9200.0, 0.25, 0.3333333333333333],
  [8000.0, 0.3333333333333333, 0.25],
  [2200.0, 0.25, 0.2],
  [5500.0, 0.2, 0.3333333333333333],
  [13300.0, 0.3333333333333333, 0.125],
  [4400.0, 0.125, 0.5],
  [1500.0, 0.5, 0.2777777777777778],
  [13100.0, 0.2777777777777778, 0.2],
  [2200.0, 0.2, 0.2],
  [5500.0, 0.2, 0.3333333333333333],
  [15500.0, 0.3333333333333333, 0.05],
  [2900.0, 0.05, 0.2],
  [4200.0, 0.2, 0.2],
  [12700.0, 0.2, 0.4],
  [3300.0, 0.4, 0.3333333333333333],
  [1700.0, 0.3333333333333333, 0.25],
  [5800.0, 0.25, 0.125],
  [1400.0, 0.125, 0.2],
  [3200.0, 0.2, 0.16666666666666666],
  [1300.0, 0.16666666666666666, 0.25],
  [9500.0, 0.25, 0.25],
  [4900.0, 0.25, 0.1111111111111111],
  [2600.0, 0.1111111111111111, 0.3333333333333333],
  [5500.0, 0.3333333333333333, 0.16666666666666666],
  [5600.0, 0.16666666666666666, 0.5],
  [8400.0, 0.5, 0.3333333333333333],
  [6200.0, 0.3333333333333333, 0.16666666666666666],
  [10300.0, 0.16666666666666666, 0.25],
  [5100.0, 0.25, 0.16666666666666666],
  [3700.0, 0.16666666666666666, 0.3333333333333333],
  [3400.0, 0.3333333333333333, 0.2],
  [1600.0, 0.2, 0.3333333333333333],
  [2200.0, 0.3333333333333333, 0.2],
  [6000.0, 0.2, 0.3333333333333333],
  [900.0, 0.3333333333333333, 0.5],
  [4200.0, 0.5, 0.3333333333333333],
  [7800.0, 0.3333333333333333, 0.25],
  [900.0, 0.25, 0.5],
  [11000.0, 0.5, 0.25],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.41 => p.pan;
800.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
