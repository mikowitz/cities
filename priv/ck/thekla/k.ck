[
  [7300.0, 0.0, 0.0],
  [11400.0, 0.0, 0.0606060606060606],
  [3500.0, 0.0606060606060606, 0.09090909090909091],
  [20200.0, 0.09090909090909091, 0.0404040404040404],
  [26700.0, 0.0404040404040404, 0.07954545454545454],
  [3300.0, 0.07954545454545454, 0.09090909090909091],
  [7400.0, 0.09090909090909091, 0.051948051948051945],
  [23300.0, 0.051948051948051945, 0.045454545454545456],
  [41500.0, 0.045454545454545456, 0.07272727272727274],
  [66200.0, 0.07272727272727274, 0.05454545454545454],
  [56900.0, 0.05454545454545454, 0.09090909090909091],
  [50800.0, 0.09090909090909091, 0.06818181818181818],
  [17400.0, 0.06818181818181818, 0.051948051948051945],
  [6400.0, 0.051948051948051945, 0.09090909090909091],
  [6300.0, 0.09090909090909091, 0.09090909090909091],
  [12700.0, 0.09090909090909091, 0.045454545454545456],
  [18800.0, 0.045454545454545456, 0.0606060606060606],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.19 => p.pan;
1100.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
