[
  [7200.0, 0.0, 0.0],
  [8700.0, 0.0, 0.16666666666666666],
  [2700.0, 0.16666666666666666, 0.08333333333333333],
  [5500.0, 0.08333333333333333, 0.16666666666666666],
  [2600.0, 0.16666666666666666, 0.08333333333333333],
  [3300.0, 0.08333333333333333, 0.08333333333333333],
  [20400.0, 0.08333333333333333, 0.08333333333333333],
  [12600.0, 0.08333333333333333, 0.3333333333333333],
  [200.0, 0.3333333333333333, 0.2222222222222222],
  [12400.0, 0.2222222222222222, 0.3333333333333333],
  [9400.0, 0.3333333333333333, 0.16666666666666666],
  [200.0, 0.16666666666666666, 0.16666666666666666],
  [49800.0, 0.16666666666666666, 0.2222222222222222],
  [11400.0, 0.2222222222222222, 0.13333333333333333],
  [2300.0, 0.13333333333333333, 0.06666666666666667],
  [2100.0, 0.06666666666666667, 0.2222222222222222],
  [12900.0, 0.2222222222222222, 0.1111111111111111],
  [600.0, 0.1111111111111111, 0.16666666666666666],
  [1900.0, 0.16666666666666666, 0.05555555555555555],
  [5800.0, 0.05555555555555555, 0.2777777777777778],
  [200.0, 0.2777777777777778, 0.2222222222222222],
  [10300.0, 0.2222222222222222, 0.3333333333333333],
  [7800.0, 0.3333333333333333, 0.05555555555555555],
  [3200.0, 0.05555555555555555, 0.16666666666666666],
  [5800.0, 0.16666666666666666, 0.19999999999999998],
  [5100.0, 0.19999999999999998, 0.06666666666666667],
  [24600.0, 0.06666666666666667, 0.05555555555555555],
  [4600.0, 0.05555555555555555, 0.06666666666666667],
  [200.0, 0.06666666666666667, 0.2222222222222222],
  [3100.0, 0.2222222222222222, 0.3333333333333333],
  [4500.0, 0.3333333333333333, 0.1111111111111111],
  [21600.0, 0.1111111111111111, 0.1111111111111111],
  [10500.0, 0.1111111111111111, 0.13333333333333333],
  [9600.0, 0.13333333333333333, 0.047619047619047616],
  [7400.0, 0.047619047619047616, 0.041666666666666664],
  [11200.0, 0.041666666666666664, 0.25],
  [200.0, 0.25, 0.16666666666666666],
  [4900.0, 0.16666666666666666, 0.2222222222222222],
  [2400.0, 0.2222222222222222, 0.3333333333333333],
  [5800.0, 0.3333333333333333, 0.041666666666666664],
  [200.0, 0.041666666666666664, 0.26666666666666666],
  [1500.0, 0.26666666666666666, 0.3333333333333333],
  [13600.0, 0.3333333333333333, 0.19999999999999998],
  [18100.0, 0.19999999999999998, 0.05555555555555555],
  [2300.0, 0.05555555555555555, 0.1111111111111111],
  [5000.0, 0.1111111111111111, 0.08333333333333333],
  [21800.0, 0.08333333333333333, 0.26666666666666666],
  [13500.0, 0.26666666666666666, 0.13333333333333333],
  [5800.0, 0.13333333333333333, 0.2916666666666667],
  [20100.0, 0.2916666666666667, 0.05555555555555555],
  [14900.0, 0.05555555555555555, 0.19999999999999998],
  [19400.0, 0.19999999999999998, 0.13333333333333333],
  [22200.0, 0.13333333333333333, 0.16666666666666666],
  [29700.0, 0.16666666666666666, 0.047619047619047616],
  [1000.0, 0.047619047619047616, 0.26666666666666666],
  [13600.0, 0.26666666666666666, 0.08333333333333333],
  [200.0, 0.08333333333333333, 0.25],
  [25400.0, 0.25, 0.3333333333333333],
  [37900.0, 0.3333333333333333, 0.09523809523809523],
  [14700.0, 0.09523809523809523, 0.05555555555555555],
  [12800.0, 0.05555555555555555, 0.19999999999999998],
  [25000.0, 0.19999999999999998, 0.06666666666666667],
  [8400.0, 0.06666666666666667, 0.2777777777777778],
  [31700.0, 0.2777777777777778, 0.13333333333333333],
  [2400.0, 0.13333333333333333, 0.30952380952380953],
  [9300.0, 0.30952380952380953, 0.05555555555555555],
  [15700.0, 0.05555555555555555, 0.16666666666666666],
  [200.0, 0.16666666666666666, 0.25],
  [5400.0, 0.25, 0.3333333333333333],
  [9400.0, 0.3333333333333333, 0.1851851851851852],
  [35800.0, 0.1851851851851852, 0.05555555555555555],
  [200.0, 0.05555555555555555, 0.25],
  [6900.0, 0.25, 0.2916666666666667],
  [32000.0, 0.2916666666666667, 0.26666666666666666],
  [10400.0, 0.26666666666666666, 0.05555555555555555],
  [5100.0, 0.05555555555555555, 0.13333333333333333],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.11 => p.pan;
1200.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
