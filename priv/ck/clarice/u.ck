[
  [6900.0, 0.0, 0.0],
  [19700.0, 0.0, 0.125],
  [18700.0, 0.125, 0.031746031746031744],
  [25700.0, 0.031746031746031744, 0.011904761904761904],
  [18700.0, 0.011904761904761904, 0.08571428571428572],
  [9700.0, 0.08571428571428572, 0.07936507936507937],
  [7200.0, 0.07936507936507937, 0.10204081632653061],
  [22600.0, 0.10204081632653061, 0.08163265306122448],
  [4600.0, 0.08163265306122448, 0.047619047619047616],
  [3200.0, 0.047619047619047616, 0.07142857142857142],
  [19200.0, 0.07142857142857142, 0.10204081632653061],
  [6300.0, 0.10204081632653061, 0.06349206349206349],
  [35000.0, 0.06349206349206349, 0.031746031746031744],
  [3700.0, 0.031746031746031744, 0.07142857142857142],
  [30900.0, 0.07142857142857142, 0.04081632653061224],
  [10400.0, 0.04081632653061224, 0.08571428571428572],
  [14500.0, 0.08571428571428572, 0.09523809523809523],
  [3600.0, 0.09523809523809523, 0.047619047619047616],
  [5700.0, 0.047619047619047616, 0.03571428571428571],
  [7400.0, 0.03571428571428571, 0.07142857142857142],
  [4200.0, 0.07142857142857142, 0.03571428571428571],
  [9500.0, 0.03571428571428571, 0.03571428571428571],
  [21400.0, 0.03571428571428571, 0.05194805194805195],
  [16700.0, 0.05194805194805195, 0.03571428571428571],
  [10200.0, 0.03571428571428571, 0.09523809523809523],
  [5500.0, 0.09523809523809523, 0.02040816326530612],
  [13600.0, 0.02040816326530612, 0.031746031746031744],
  [85400.0, 0.031746031746031744, 0.07142857142857142],
  [3700.0, 0.07142857142857142, 0.11904761904761905],
  [1900.0, 0.11904761904761905, 0.031746031746031744],
  [900.0, 0.031746031746031744, 0.09523809523809523],
  [1400.0, 0.09523809523809523, 0.12698412698412698],
  [24200.0, 0.12698412698412698, 0.017857142857142856],
  [15700.0, 0.017857142857142856, 0.047619047619047616],
  [14200.0, 0.047619047619047616, 0.031746031746031744],
  [39300.0, 0.031746031746031744, 0.04081632653061224],
  [78000.0, 0.04081632653061224, 0.047619047619047616],
  [900.0, 0.047619047619047616, 0.1038961038961039],
  [3400.0, 0.1038961038961039, 0.12987012987012986],
  [1100.0, 0.12987012987012986, 0.02040816326530612],
  [31800.0, 0.02040816326530612, 0.061224489795918366],
  [17200.0, 0.061224489795918366, 0.10204081632653061],
  [15400.0, 0.10204081632653061, 0.028571428571428574],
  [6700.0, 0.028571428571428574, 0.03571428571428571],
  [7600.0, 0.03571428571428571, 0.10204081632653061],
  [7300.0, 0.10204081632653061, 0.03571428571428571],
  [2000.0, 0.03571428571428571, 0.09523809523809523],
  [8600.0, 0.09523809523809523, 0.10204081632653061],
  [3500.0, 0.10204081632653061, 0.1168831168831169],
  [21900.0, 0.1168831168831169, 0.10204081632653061],
  [17300.0, 0.10204081632653061, 0.025974025974025976],
  [4900.0, 0.025974025974025976, 0.05194805194805195],
  [98800.0, 0.05194805194805195, 0.04081632653061224],
  [23800.0, 0.04081632653061224, 0.08163265306122448],
  [3100.0, 0.08163265306122448, 0.09523809523809523],
  [26400.0, 0.09523809523809523, 0.031746031746031744],
  [1200.0, 0.031746031746031744, 0.047619047619047616],
  [26000.0, 0.047619047619047616, 0.11904761904761905],
  [23600.0, 0.11904761904761905, 0.028571428571428574],
  [8500.0, 0.028571428571428574, 0.09523809523809523],
  [8300.0, 0.09523809523809523, 0.04081632653061224],
  [9800.0, 0.04081632653061224, 0.08571428571428572],
  [14100.0, 0.08571428571428572, 0.07142857142857142],
  [3200.0, 0.07142857142857142, 0.03571428571428571],
  [27700.0, 0.03571428571428571, 0.08571428571428572],
  [5600.0, 0.08571428571428572, 0.03571428571428571],
  [20800.0, 0.03571428571428571, 0.047619047619047616],
  [8000.0, 0.047619047619047616, 0.09523809523809523],
  [3600.0, 0.09523809523809523, 0.07142857142857142],
  [24700.0, 0.07142857142857142, 0.061224489795918366],
  [15300.0, 0.061224489795918366, 0.07936507936507937],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
0.56 => p.pan;
2100.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
