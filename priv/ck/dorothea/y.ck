[
  [4700.0, 0.0, 0.0],
  [8600.0, 0.0, 0.15],
  [3200.0, 0.15, 0.2],
  [2700.0, 0.2, 0.06666666666666667],
  [60200.0, 0.06666666666666667, 0.2],
  [34400.0, 0.2, 0.2],
  [25900.0, 0.2, 0.175],
  [200.0, 0.175, 0.2],
  [25200.0, 0.2, 0.03333333333333333],
  [5000.0, 0.03333333333333333, 0.2],
  [14400.0, 0.2, 0.2],
  [2000.0, 0.2, 0.13333333333333333],
  [13000.0, 0.13333333333333333, 0.06666666666666667],
  [4800.0, 0.06666666666666667, 0.06666666666666667],
  [3300.0, 0.06666666666666667, 0.1],
  [7300.0, 0.1, 0.06666666666666667],
  [12700.0, 0.06666666666666667, 0.2],
  [2700.0, 0.2, 0.06666666666666667],
  [19900.0, 0.06666666666666667, 0.2],
  [3100.0, 0.2, 0.2],
  [8700.0, 0.2, 0.04],
  [6300.0, 0.04, 0.2],
  [22300.0, 0.2, 0.125],
  [8200.0, 0.125, 0.06666666666666667],
  [10300.0, 0.06666666666666667, 0.13333333333333333],
  [37400.0, 0.13333333333333333, 0.13333333333333333],
  [13600.0, 0.13333333333333333, 0.2],
  [5100.0, 0.2, 0.04],
  [300.0, 0.04, 0.2],
  [31700.0, 0.2, 0.1],
  [3700.0, 0.1, 0.2],
  [16700.0, 0.2, 0.2],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
0.85 => p.pan;
2500.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
