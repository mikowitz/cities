[
  [13100.0, 0.0, 0.0],
  [6800.0, 0.0, 0.26666666666666666],
  [9600.0, 0.26666666666666666, 0.047619047619047616],
  [17500.0, 0.047619047619047616, 0.08333333333333333],
  [22000.0, 0.08333333333333333, 0.07407407407407407],
  [27200.0, 0.07407407407407407, 0.05555555555555555],
  [2100.0, 0.05555555555555555, 0.19047619047619047],
  [41800.0, 0.19047619047619047, 0.047619047619047616],
  [40100.0, 0.047619047619047616, 0.1111111111111111],
  [5000.0, 0.1111111111111111, 0.037037037037037035],
  [5800.0, 0.037037037037037035, 0.14285714285714285],
  [3300.0, 0.14285714285714285, 0.08333333333333333],
  [18300.0, 0.08333333333333333, 0.26666666666666666],
  [18400.0, 0.26666666666666666, 0.25],
  [45700.0, 0.25, 0.2222222222222222],
  [8500.0, 0.2222222222222222, 0.05555555555555555],
  [11600.0, 0.05555555555555555, 0.1111111111111111],
  [15200.0, 0.1111111111111111, 0.25],
  [3700.0, 0.25, 0.26666666666666666],
  [15000.0, 0.26666666666666666, 0.14285714285714285],
  [17700.0, 0.14285714285714285, 0.19444444444444445],
  [7800.0, 0.19444444444444445, 0.16666666666666666],
  [55700.0, 0.16666666666666666, 0.26666666666666666],
  [10400.0, 0.26666666666666666, 0.08333333333333333],
  [12300.0, 0.08333333333333333, 0.25925925925925924],
  [14300.0, 0.25925925925925924, 0.03333333333333333],
  [4600.0, 0.03333333333333333, 0.1111111111111111],
  [2100.0, 0.1111111111111111, 0.1111111111111111],
  [8700.0, 0.1111111111111111, 0.047619047619047616],
  [8000.0, 0.047619047619047616, 0.20833333333333334],
  [3100.0, 0.20833333333333334, 0.041666666666666664],
  [200.0, 0.041666666666666664, 0.09523809523809523],
  [14800.0, 0.09523809523809523, 0.14285714285714285],
  [7100.0, 0.14285714285714285, 0.25925925925925924],
  [19500.0, 0.25925925925925924, 0.05555555555555555],
  [5600.0, 0.05555555555555555, 0.19047619047619047],
  [3400.0, 0.19047619047619047, 0.16666666666666666],
  [3400.0, 0.16666666666666666, 0.08333333333333333],
  [12600.0, 0.08333333333333333, 0.16666666666666666],
  [500.0, 0.16666666666666666, 0.2380952380952381],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.78 => p.pan;
300.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
