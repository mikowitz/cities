[
  [14600.0, 0.0, 0.0],
  [10200.0, 0.0, 0.3333333333333333],
  [35700.0, 0.3333333333333333, 0.3333333333333333],
  [12800.0, 0.3333333333333333, 0.3333333333333333],
  [5500.0, 0.3333333333333333, 0.3333333333333333],
  [6700.0, 0.3333333333333333, 0.08333333333333333],
  [16100.0, 0.08333333333333333, 0.3333333333333333],
  [21600.0, 0.3333333333333333, 0.06666666666666667],
  [7000.0, 0.06666666666666667, 0.25],
  [32800.0, 0.25, 0.3333333333333333],
  [15100.0, 0.3333333333333333, 0.3333333333333333],
  [200.0, 0.3333333333333333, 0.2222222222222222],
  [3500.0, 0.2222222222222222, 0.3333333333333333],
  [14900.0, 0.3333333333333333, 0.041666666666666664],
  [17700.0, 0.041666666666666664, 0.3333333333333333],
  [2900.0, 0.3333333333333333, 0.06666666666666667],
  [19800.0, 0.06666666666666667, 0.1111111111111111],
  [13700.0, 0.1111111111111111, 0.06666666666666667],
  [1100.0, 0.06666666666666667, 0.25],
  [7700.0, 0.25, 0.06666666666666667],
  [5900.0, 0.06666666666666667, 0.3333333333333333],
  [7800.0, 0.3333333333333333, 0.08333333333333333],
  [15200.0, 0.08333333333333333, 0.3333333333333333],
  [37900.0, 0.3333333333333333, 0.1111111111111111],
  [400.0, 0.1111111111111111, 0.3333333333333333],
  [4600.0, 0.3333333333333333, 0.1111111111111111],
  [12600.0, 0.1111111111111111, 0.3333333333333333],
  [31100.0, 0.3333333333333333, 0.3333333333333333],
  [3800.0, 0.3333333333333333, 0.3333333333333333],
  [8000.0, 0.3333333333333333, 0.125],
  [300.0, 0.125, 0.1111111111111111],
  [1800.0, 0.1111111111111111, 0.1851851851851852],
  [10500.0, 0.1851851851851852, 0.3333333333333333],
  [13500.0, 0.3333333333333333, 0.3333333333333333],
  [14100.0, 0.3333333333333333, 0.06666666666666667],
  [10900.0, 0.06666666666666667, 0.06666666666666667],
  [11000.0, 0.06666666666666667, 0.047619047619047616],
  [9200.0, 0.047619047619047616, 0.3333333333333333],
  [23600.0, 0.3333333333333333, 0.3333333333333333],
  [20900.0, 0.3333333333333333, 0.06666666666666667],
  [1300.0, 0.06666666666666667, 0.3333333333333333],
  [200.0, 0.3333333333333333, 0.16666666666666666],
  [22300.0, 0.16666666666666666, 0.2222222222222222],
  [1500.0, 0.2222222222222222, 0.1111111111111111],
  [9400.0, 0.1111111111111111, 0.08333333333333333],
  [3700.0, 0.08333333333333333, 0.037037037037037035],
  [8800.0, 0.037037037037037035, 0.06666666666666667],
  [9700.0, 0.06666666666666667, 0.08333333333333333],
  [24100.0, 0.08333333333333333, 0.1111111111111111],
  [10000.0, 0.1111111111111111, 0.3333333333333333],
  [10700.0, 0.3333333333333333, 0.06666666666666667],
  [25400.0, 0.06666666666666667, 0.08333333333333333],
  [28100.0, 0.08333333333333333, 0.08333333333333333],
  [200.0, 0.08333333333333333, 0.16666666666666666],
  [37600.0, 0.16666666666666666, 0.20833333333333334],
  [4900.0, 0.20833333333333334, 0.3333333333333333],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.56 => p.pan;
600.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
