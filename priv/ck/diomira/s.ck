[
  [14600.0, 0.0, 0.0],
  [3800.0, 0.0, 0.02631578947368421],
  [11600.0, 0.02631578947368421, 0.019736842105263157],
  [2000.0, 0.019736842105263157, 0.005263157894736842],
  [3500.0, 0.005263157894736842, 0.0043859649122807015],
  [2800.0, 0.0043859649122807015, 0.02631578947368421],
  [2200.0, 0.02631578947368421, 0.0037593984962406013],
  [3100.0, 0.0037593984962406013, 0.02631578947368421],
  [300.0, 0.02631578947368421, 0.02631578947368421],
  [2400.0, 0.02631578947368421, 0.0037593984962406013],
  [5600.0, 0.0037593984962406013, 0.02631578947368421],
  [9800.0, 0.02631578947368421, 0.015037593984962405],
  [10300.0, 0.015037593984962405, 0.02631578947368421],
  [3200.0, 0.02631578947368421, 0.021052631578947368],
  [11000.0, 0.021052631578947368, 0.02631578947368421],
  [4300.0, 0.02631578947368421, 0.011278195488721804],
  [300.0, 0.011278195488721804, 0.02631578947368421],
  [3000.0, 0.02631578947368421, 0.006578947368421052],
  [6700.0, 0.006578947368421052, 0.019736842105263157],
  [2800.0, 0.019736842105263157, 0.02631578947368421],
  [7200.0, 0.02631578947368421, 0.0037593984962406013],
  [10000.0, 0.0037593984962406013, 0.02631578947368421],
  [3500.0, 0.02631578947368421, 0.02631578947368421],
  [9400.0, 0.02631578947368421, 0.0029239766081871343],
  [5900.0, 0.0029239766081871343, 0.02631578947368421],
  [11500.0, 0.02631578947368421, 0.0037593984962406013],
  [10000.0, 0.0037593984962406013, 0.02631578947368421],
  [2200.0, 0.02631578947368421, 0.02631578947368421],
  [1300.0, 0.02631578947368421, 0.0043859649122807015],
  [8400.0, 0.0043859649122807015, 0.02631578947368421],
  [4000.0, 0.02631578947368421, 0.02631578947368421],
  [1900.0, 0.02631578947368421, 0.02631578947368421],
  [3000.0, 0.02631578947368421, 0.02631578947368421],
  [4600.0, 0.02631578947368421, 0.02631578947368421],
  [20800.0, 0.02631578947368421, 0.021052631578947368],
  [12400.0, 0.021052631578947368, 0.02631578947368421],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
0.41 => p.pan;
1900.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
