[
  [3800.0, 0.0, 0.0],
  [48200.0, 0.0, 0.08571428571428572],
  [16900.0, 0.08571428571428572, 0.14285714285714285],
  [11300.0, 0.14285714285714285, 0.05357142857142857],
  [36900.0, 0.05357142857142857, 0.14285714285714285],
  [35000.0, 0.14285714285714285, 0.14285714285714285],
  [13100.0, 0.14285714285714285, 0.10714285714285714],
  [18800.0, 0.10714285714285714, 0.14285714285714285],
  [2200.0, 0.14285714285714285, 0.14285714285714285],
  [26700.0, 0.14285714285714285, 0.08571428571428572],
  [5000.0, 0.08571428571428572, 0.08571428571428572],
  [5700.0, 0.08571428571428572, 0.14285714285714285],
  [13400.0, 0.14285714285714285, 0.023809523809523808],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.48 => p.pan;
700.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
