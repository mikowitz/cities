[
  [23700.0, 0.0, 0.0],
  [33800.0, 0.0, 0.3333333333333333],
  [10600.0, 0.3333333333333333, 0.3333333333333333],
  [7400.0, 0.3333333333333333, 0.3333333333333333],
  [28500.0, 0.3333333333333333, 0.26666666666666666],
  [3900.0, 0.26666666666666666, 0.3333333333333333],
  [14100.0, 0.3333333333333333, 0.3333333333333333],
  [6800.0, 0.3333333333333333, 0.3333333333333333],
  [7100.0, 0.3333333333333333, 0.3333333333333333],
  [7700.0, 0.3333333333333333, 0.3333333333333333],
  [6400.0, 0.3333333333333333, 0.08333333333333333],
  [10600.0, 0.08333333333333333, 0.3333333333333333],
  [7600.0, 0.3333333333333333, 0.08333333333333333],
  [15700.0, 0.08333333333333333, 0.08333333333333333],
  [9800.0, 0.08333333333333333, 0.041666666666666664],
  [15100.0, 0.041666666666666664, 0.3333333333333333],
  [9300.0, 0.3333333333333333, 0.3333333333333333],
  [16100.0, 0.3333333333333333, 0.3333333333333333],
  [25900.0, 0.3333333333333333, 0.3333333333333333],
  [7200.0, 0.3333333333333333, 0.05555555555555555],
  [35600.0, 0.05555555555555555, 0.3333333333333333],
  [24400.0, 0.3333333333333333, 0.08333333333333333],
  [11900.0, 0.08333333333333333, 0.1111111111111111],
  [4400.0, 0.1111111111111111, 0.3333333333333333],
  [37600.0, 0.3333333333333333, 0.3333333333333333],
  [5200.0, 0.3333333333333333, 0.08333333333333333],
  [21100.0, 0.08333333333333333, 0.06666666666666667],
  [38400.0, 0.06666666666666667, 0.3333333333333333],
  [12100.0, 0.3333333333333333, 0.3333333333333333],
  [9800.0, 0.3333333333333333, 0.3333333333333333],
  [9200.0, 0.3333333333333333, 0.3333333333333333],
  [6800.0, 0.3333333333333333, 0.3333333333333333],
  [10500.0, 0.3333333333333333, 0.3333333333333333],
  [1200.0, 0.3333333333333333, 0.3333333333333333],
  [25800.0, 0.3333333333333333, 0.06666666666666667],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.56 => p.pan;
600.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
