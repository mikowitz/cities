[
  [27200.0, 0.0, 0.0],
  [3500.0, 0.0, 0.06666666666666667],
  [3700.0, 0.06666666666666667, 0.05555555555555555],
  [56800.0, 0.05555555555555555, 0.041666666666666664],
  [23900.0, 0.041666666666666664, 0.24242424242424243],
  [8900.0, 0.24242424242424243, 0.26666666666666666],
  [16400.0, 0.26666666666666666, 0.047619047619047616],
  [18100.0, 0.047619047619047616, 0.14814814814814814],
  [200.0, 0.14814814814814814, 0.3333333333333333],
  [14000.0, 0.3333333333333333, 0.041666666666666664],
  [1000.0, 0.041666666666666664, 0.047619047619047616],
  [70500.0, 0.047619047619047616, 0.19047619047619047],
  [25900.0, 0.19047619047619047, 0.06666666666666667],
  [18300.0, 0.06666666666666667, 0.26666666666666666],
  [51100.0, 0.26666666666666666, 0.06060606060606061],
  [6100.0, 0.06060606060606061, 0.030303030303030304],
  [200.0, 0.030303030303030304, 0.09999999999999999],
  [5000.0, 0.09999999999999999, 0.13333333333333333],
  [5000.0, 0.13333333333333333, 0.21212121212121213],
  [11100.0, 0.21212121212121213, 0.25],
  [10900.0, 0.25, 0.19999999999999998],
  [34200.0, 0.19999999999999998, 0.2380952380952381],
  [5900.0, 0.2380952380952381, 0.2222222222222222],
  [17300.0, 0.2222222222222222, 0.1851851851851852],
  [21100.0, 0.1851851851851852, 0.08333333333333333],
  [36500.0, 0.08333333333333333, 0.16666666666666666],
  [45500.0, 0.16666666666666666, 0.08333333333333333],
  [27600.0, 0.08333333333333333, 0.2222222222222222],
  [5200.0, 0.2222222222222222, 0.16666666666666666],
  [1700.0, 0.16666666666666666, 0.08333333333333333],
  [5200.0, 0.08333333333333333, 0.041666666666666664],
  [10600.0, 0.041666666666666664, 0.08333333333333333],
  [300.0, 0.08333333333333333, 0.2962962962962963],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.78 => p.pan;
300.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
