[
  [21200.0, 0.0, 0.0],
  [4900.0, 0.0, 0.09523809523809523],
  [4100.0, 0.09523809523809523, 0.10714285714285714],
  [600.0, 0.10714285714285714, 0.07142857142857142],
  [12500.0, 0.07142857142857142, 0.08928571428571429],
  [7800.0, 0.08928571428571429, 0.14285714285714285],
  [36300.0, 0.14285714285714285, 0.14285714285714285],
  [6600.0, 0.14285714285714285, 0.125],
  [22000.0, 0.125, 0.07142857142857142],
  [28100.0, 0.07142857142857142, 0.14285714285714285],
  [3500.0, 0.14285714285714285, 0.10714285714285714],
  [2300.0, 0.10714285714285714, 0.028571428571428574],
  [33800.0, 0.028571428571428574, 0.14285714285714285],
  [600.0, 0.14285714285714285, 0.07142857142857142],
  [9500.0, 0.07142857142857142, 0.08928571428571429],
  [17700.0, 0.08928571428571429, 0.07142857142857142],
  [24000.0, 0.07142857142857142, 0.14285714285714285],
  [24500.0, 0.14285714285714285, 0.1142857142857143],
  [36700.0, 0.1142857142857143, 0.09523809523809523],
  [35100.0, 0.09523809523809523, 0.10204081632653061],
  [12400.0, 0.10204081632653061, 0.10204081632653061],
  [8300.0, 0.10204081632653061, 0.09999999999999999],
  [3700.0, 0.09999999999999999, 0.08571428571428572],
  [5400.0, 0.08571428571428572, 0.03571428571428571],
  [19900.0, 0.03571428571428571, 0.14285714285714285],
  [19200.0, 0.14285714285714285, 0.14285714285714285],
  [58700.0, 0.14285714285714285, 0.09523809523809523],
  [15400.0, 0.09523809523809523, 0.11111111111111112],
  [40300.0, 0.11111111111111112, 0.08928571428571429],
  [10600.0, 0.08928571428571429, 0.10204081632653061],
  [2000.0, 0.10204081632653061, 0.1142857142857143],
  [10700.0, 0.1142857142857143, 0.1142857142857143],
  [2100.0, 0.1142857142857143, 0.14285714285714285],
  [14700.0, 0.14285714285714285, 0.06493506493506493],
  [25200.0, 0.06493506493506493, 0.09523809523809523],
  [5100.0, 0.09523809523809523, 0.12244897959183673],
  [76900.0, 0.12244897959183673, 0.09523809523809523],
  [3100.0, 0.09523809523809523, 0.10714285714285714],
  [26300.0, 0.10714285714285714, 0.10204081632653061],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.48 => p.pan;
700.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
