[
  [13900.0, 0.0, 0.0],
  [19900.0, 0.0, 0.14285714285714285],
  [11500.0, 0.14285714285714285, 0.14285714285714285],
  [26700.0, 0.14285714285714285, 0.125],
  [12400.0, 0.125, 0.14285714285714285],
  [20500.0, 0.14285714285714285, 0.07142857142857142],
  [23200.0, 0.07142857142857142, 0.09523809523809523],
  [8300.0, 0.09523809523809523, 0.061224489795918366],
  [16500.0, 0.061224489795918366, 0.08163265306122448],
  [22500.0, 0.08163265306122448, 0.02040816326530612],
  [3000.0, 0.02040816326530612, 0.02040816326530612],
  [3000.0, 0.02040816326530612, 0.03571428571428571],
  [70900.0, 0.03571428571428571, 0.03571428571428571],
  [3500.0, 0.03571428571428571, 0.09523809523809523],
  [1100.0, 0.09523809523809523, 0.14285714285714285],
  [34400.0, 0.14285714285714285, 0.14285714285714285],
  [3900.0, 0.14285714285714285, 0.14285714285714285],
  [9100.0, 0.14285714285714285, 0.14285714285714285],
  [3800.0, 0.14285714285714285, 0.14285714285714285],
  [9200.0, 0.14285714285714285, 0.09090909090909091],
  [7300.0, 0.09090909090909091, 0.07142857142857142],
  [19100.0, 0.07142857142857142, 0.08163265306122448],
  [16000.0, 0.08163265306122448, 0.14285714285714285],
  [8500.0, 0.14285714285714285, 0.09523809523809523],
  [19600.0, 0.09523809523809523, 0.028571428571428574],
  [19900.0, 0.028571428571428574, 0.14285714285714285],
  [7200.0, 0.14285714285714285, 0.14285714285714285],
  [7300.0, 0.14285714285714285, 0.14285714285714285],
  [13400.0, 0.14285714285714285, 0.14285714285714285],
  [9600.0, 0.14285714285714285, 0.10714285714285714],
  [28800.0, 0.10714285714285714, 0.14285714285714285],
  [43400.0, 0.14285714285714285, 0.10714285714285714],
  [2600.0, 0.10714285714285714, 0.14285714285714285],
  [19500.0, 0.14285714285714285, 0.14285714285714285],
  [6500.0, 0.14285714285714285, 0.05714285714285715],
  [42900.0, 0.05714285714285715, 0.14285714285714285],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.48 => p.pan;
700.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
