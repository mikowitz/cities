[
  [9400.0, 0.0, 0.0],
  [11000.0, 0.0, 0.014492753623188404],
  [4500.0, 0.014492753623188404, 0.010869565217391304],
  [2100.0, 0.010869565217391304, 0.006211180124223602],
  [2100.0, 0.006211180124223602, 0.037267080745341616],
  [6900.0, 0.037267080745341616, 0.021739130434782608],
  [9200.0, 0.021739130434782608, 0.010869565217391304],
  [700.0, 0.010869565217391304, 0.010869565217391304],
  [2200.0, 0.010869565217391304, 0.010869565217391304],
  [14200.0, 0.010869565217391304, 0.010869565217391304],
  [7200.0, 0.010869565217391304, 0.014492753623188404],
  [72300.0, 0.014492753623188404, 0.008695652173913044],
  [27100.0, 0.008695652173913044, 0.010869565217391304],
  [9900.0, 0.010869565217391304, 0.014492753623188404],
  [13400.0, 0.014492753623188404, 0.010869565217391304],
  [1900.0, 0.010869565217391304, 0.021739130434782608],
  [23000.0, 0.021739130434782608, 0.034782608695652174],
  [44700.0, 0.034782608695652174, 0.043478260869565216],
  [7900.0, 0.043478260869565216, 0.010869565217391304],
  [2500.0, 0.010869565217391304, 0.010869565217391304],
  [4700.0, 0.010869565217391304, 0.016304347826086956],
  [8700.0, 0.016304347826086956, 0.010869565217391304],
  [27400.0, 0.010869565217391304, 0.008695652173913044],
  [16600.0, 0.008695652173913044, 0.043478260869565216],
  [3300.0, 0.043478260869565216, 0.008695652173913044],
  [51400.0, 0.008695652173913044, 0.02898550724637681],
  [9000.0, 0.02898550724637681, 0.010869565217391304],
  [53200.0, 0.010869565217391304, 0.010869565217391304],
  [10500.0, 0.010869565217391304, 0.010869565217391304],
  [18100.0, 0.010869565217391304, 0.010869565217391304],
  [25000.0, 0.010869565217391304, 0.043478260869565216],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
0.7 => p.pan;
2300.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
