[
  [13400.0, 0.0, 0.0],
  [20500.0, 0.0, 0.05555555555555555],
  [8600.0, 0.05555555555555555, 0.03333333333333333],
  [1300.0, 0.03333333333333333, 0.08333333333333333],
  [5200.0, 0.08333333333333333, 0.19999999999999998],
  [35400.0, 0.19999999999999998, 0.047619047619047616],
  [10300.0, 0.047619047619047616, 0.19999999999999998],
  [12400.0, 0.19999999999999998, 0.05555555555555555],
  [4600.0, 0.05555555555555555, 0.1111111111111111],
  [14100.0, 0.1111111111111111, 0.08333333333333333],
  [2400.0, 0.08333333333333333, 0.041666666666666664],
  [19800.0, 0.041666666666666664, 0.25],
  [39900.0, 0.25, 0.13333333333333333],
  [11600.0, 0.13333333333333333, 0.1111111111111111],
  [7200.0, 0.1111111111111111, 0.1111111111111111],
  [21500.0, 0.1111111111111111, 0.26666666666666666],
  [8800.0, 0.26666666666666666, 0.1111111111111111],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.78 => p.pan;
300.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
