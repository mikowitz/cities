[
  [8700.0, 0.0, 0.0],
  [8700.0, 0.0, 0.16666666666666666],
  [17000.0, 0.16666666666666666, 0.047619047619047616],
  [5400.0, 0.047619047619047616, 0.3333333333333333],
  [6200.0, 0.3333333333333333, 0.25],
  [11900.0, 0.25, 0.3333333333333333],
  [38500.0, 0.3333333333333333, 0.3333333333333333],
  [200.0, 0.3333333333333333, 0.09523809523809523],
  [23000.0, 0.09523809523809523, 0.14285714285714285],
  [25700.0, 0.14285714285714285, 0.037037037037037035],
  [24200.0, 0.037037037037037035, 0.14285714285714285],
  [300.0, 0.14285714285714285, 0.25],
  [7500.0, 0.25, 0.06666666666666667],
  [19200.0, 0.06666666666666667, 0.3333333333333333],
  [27000.0, 0.3333333333333333, 0.3333333333333333],
  [35700.0, 0.3333333333333333, 0.1111111111111111],
  [8200.0, 0.1111111111111111, 0.047619047619047616],
  [77200.0, 0.047619047619047616, 0.3333333333333333],
  [52100.0, 0.3333333333333333, 0.15151515151515152],
  [15300.0, 0.15151515151515152, 0.3333333333333333],
  [1200.0, 0.3333333333333333, 0.3333333333333333],
  [40100.0, 0.3333333333333333, 0.05555555555555555],
  [44100.0, 0.05555555555555555, 0.3333333333333333],
  [31700.0, 0.3333333333333333, 0.14814814814814814],
  [38300.0, 0.14814814814814814, 0.13333333333333333],
  [7100.0, 0.13333333333333333, 0.03333333333333333],
  [1900.0, 0.03333333333333333, 0.3333333333333333],
  [10700.0, 0.3333333333333333, 0.08333333333333333],
  [7300.0, 0.08333333333333333, 0.3333333333333333],
  [3500.0, 0.3333333333333333, 0.3333333333333333],
  [12900.0, 0.3333333333333333, 0.3333333333333333],
  [29200.0, 0.3333333333333333, 0.3333333333333333],
  [6500.0, 0.3333333333333333, 0.1111111111111111],
  [23500.0, 0.1111111111111111, 0.3333333333333333],
  [1200.0, 0.3333333333333333, 0.09523809523809523],
  [24000.0, 0.09523809523809523, 0.19047619047619047],
  [8200.0, 0.19047619047619047, 0.09999999999999999],
  [20600.0, 0.09999999999999999, 0.16666666666666666],
  [5000.0, 0.16666666666666666, 0.1111111111111111],
  [5200.0, 0.1111111111111111, 0.1111111111111111],
  [5100.0, 0.1111111111111111, 0.1111111111111111],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.56 => p.pan;
600.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
