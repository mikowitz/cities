[
  [25200.0, 0.0, 0.0],
  [14100.0, 0.0, 0.25],
  [6500.0, 0.25, 0.08333333333333333],
  [33200.0, 0.08333333333333333, 0.3333333333333333],
  [1200.0, 0.3333333333333333, 0.3333333333333333],
  [66200.0, 0.3333333333333333, 0.3333333333333333],
  [25300.0, 0.3333333333333333, 0.08333333333333333],
  [8900.0, 0.08333333333333333, 0.125],
  [22700.0, 0.125, 0.3333333333333333],
  [34100.0, 0.3333333333333333, 0.3333333333333333],
  [50600.0, 0.3333333333333333, 0.3333333333333333],
  [20300.0, 0.3333333333333333, 0.047619047619047616],
  [12600.0, 0.047619047619047616, 0.3333333333333333],
  [22900.0, 0.3333333333333333, 0.3333333333333333],
  [13800.0, 0.3333333333333333, 0.3333333333333333],
  [14200.0, 0.3333333333333333, 0.3333333333333333],
  [1800.0, 0.3333333333333333, 0.08333333333333333],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
-0.56 => p.pan;
600.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
