[
  [47800.0, 0.0, 0.0],
  [17700.0, 0.0, 0.14285714285714285],
  [2600.0, 0.14285714285714285, 0.3333333333333333],
  [22300.0, 0.3333333333333333, 0.18181818181818182],
  [1500.0, 0.18181818181818182, 0.05],
  [27600.0, 0.05, 0.2],
  [5700.0, 0.2, 0.1875],
  [39200.0, 0.1875, 0.21428571428571427],
  [18400.0, 0.21428571428571427, 0.125],
  [20800.0, 0.125, 0.07142857142857142],
  [30900.0, 0.07142857142857142, 0.25],
  [22400.0, 0.25, 0.16666666666666666],
  [400.0, 0.16666666666666666, 0.05],
  [3600.0, 0.05, 0.15],
  [9700.0, 0.15, 0.125],
  [99700.0, 0.125, 0.3125],
  [22000.0, 0.3125, 0.13636363636363635],
  [39000.0, 0.13636363636363635, 0.125],
  [8500.0, 0.125, 0.3],
  [300.0, 0.3, 0.19230769230769232],
  [36800.0, 0.19230769230769232, 0.23076923076923078],
  [4800.0, 0.23076923076923078, 0.2],
  [1500.0, 0.2, 0.05],
  [14000.0, 0.05, 0.2],
  [16700.0, 0.2, 0.05],
  [99600.0, 0.05, 0.3],
  [3200.0, 0.3, 0.21428571428571427],
  [5900.0, 0.21428571428571427, 0.08333333333333333],
  [2900.0, 0.08333333333333333, 0.5],
  [24200.0, 0.5, 0.2222222222222222],
  [45400.0, 0.2222222222222222, 0.3181818181818182],
  [10400.0, 0.3181818181818182, 0.13333333333333333],
  [109500.0, 0.13333333333333333, 0.35714285714285715],
  [66400.0, 0.35714285714285715, 0.4444444444444444],
  [43400.0, 0.4444444444444444, 0.15],
  [113400.0, 0.15, 0.35714285714285715],
  [1800.0, 0.35714285714285715, 0.1],
  [69200.0, 0.1, 0.25],
  [53700.0, 0.25, 0.125],
  [25700.0, 0.125, 0.3],
  [20900.0, 0.3, 0.07142857142857142],
  [10100.0, 0.07142857142857142, 0.14285714285714285],
  [18400.0, 0.14285714285714285, 0.4166666666666667],
  [300.0, 0.4166666666666667, 0.2777777777777778],
  [96700.0, 0.2777777777777778, 0.3333333333333333],
  [17700.0, 0.3333333333333333, 0.07142857142857142],
  [33800.0, 0.07142857142857142, 0.08333333333333333],
  [1600.0, 0.08333333333333333, 0.5],
  [5400.0, 0.5, 0.125],
] @=> float fades[][];

Gain g => dac;
0.0 => g.gain;

SinOsc s => Pan2 p => g;
0.19 => p.pan;
1600.0 => s.freq;

for (0 => int i; i < fades.size(); i++) {
fades[i][0] => float totalMs;
fades[i][1] => float startGain;
fades[i][2] => float stopGain;

totalMs::ms + now => time stopTime;

0 => float progress;

(stopGain - startGain) * (1 / totalMs) => float stepChange;

while ( now < stopTime ) {
  1 +=> progress;
  stepChange + g.gain() => g.gain;
  1::ms => now;
}
}

s =< g;
